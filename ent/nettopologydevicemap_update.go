// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/device"
	"github.com/mrzack99s/netcoco/ent/nettopology"
	"github.com/mrzack99s/netcoco/ent/nettopologydevicemap"
	"github.com/mrzack99s/netcoco/ent/predicate"
)

// NetTopologyDeviceMapUpdate is the builder for updating NetTopologyDeviceMap entities.
type NetTopologyDeviceMapUpdate struct {
	config
	hooks    []Hook
	mutation *NetTopologyDeviceMapMutation
}

// Where adds a new predicate for the NetTopologyDeviceMapUpdate builder.
func (ntdmu *NetTopologyDeviceMapUpdate) Where(ps ...predicate.NetTopologyDeviceMap) *NetTopologyDeviceMapUpdate {
	ntdmu.mutation.predicates = append(ntdmu.mutation.predicates, ps...)
	return ntdmu
}

// SetPositionX sets the "position_x" field.
func (ntdmu *NetTopologyDeviceMapUpdate) SetPositionX(i int) *NetTopologyDeviceMapUpdate {
	ntdmu.mutation.ResetPositionX()
	ntdmu.mutation.SetPositionX(i)
	return ntdmu
}

// SetNillablePositionX sets the "position_x" field if the given value is not nil.
func (ntdmu *NetTopologyDeviceMapUpdate) SetNillablePositionX(i *int) *NetTopologyDeviceMapUpdate {
	if i != nil {
		ntdmu.SetPositionX(*i)
	}
	return ntdmu
}

// AddPositionX adds i to the "position_x" field.
func (ntdmu *NetTopologyDeviceMapUpdate) AddPositionX(i int) *NetTopologyDeviceMapUpdate {
	ntdmu.mutation.AddPositionX(i)
	return ntdmu
}

// SetPositionY sets the "position_y" field.
func (ntdmu *NetTopologyDeviceMapUpdate) SetPositionY(i int) *NetTopologyDeviceMapUpdate {
	ntdmu.mutation.ResetPositionY()
	ntdmu.mutation.SetPositionY(i)
	return ntdmu
}

// SetNillablePositionY sets the "position_y" field if the given value is not nil.
func (ntdmu *NetTopologyDeviceMapUpdate) SetNillablePositionY(i *int) *NetTopologyDeviceMapUpdate {
	if i != nil {
		ntdmu.SetPositionY(*i)
	}
	return ntdmu
}

// AddPositionY adds i to the "position_y" field.
func (ntdmu *NetTopologyDeviceMapUpdate) AddPositionY(i int) *NetTopologyDeviceMapUpdate {
	ntdmu.mutation.AddPositionY(i)
	return ntdmu
}

// SetOnTopologyID sets the "on_topology" edge to the NetTopology entity by ID.
func (ntdmu *NetTopologyDeviceMapUpdate) SetOnTopologyID(id int) *NetTopologyDeviceMapUpdate {
	ntdmu.mutation.SetOnTopologyID(id)
	return ntdmu
}

// SetNillableOnTopologyID sets the "on_topology" edge to the NetTopology entity by ID if the given value is not nil.
func (ntdmu *NetTopologyDeviceMapUpdate) SetNillableOnTopologyID(id *int) *NetTopologyDeviceMapUpdate {
	if id != nil {
		ntdmu = ntdmu.SetOnTopologyID(*id)
	}
	return ntdmu
}

// SetOnTopology sets the "on_topology" edge to the NetTopology entity.
func (ntdmu *NetTopologyDeviceMapUpdate) SetOnTopology(n *NetTopology) *NetTopologyDeviceMapUpdate {
	return ntdmu.SetOnTopologyID(n.ID)
}

// SetDeviceID sets the "device" edge to the Device entity by ID.
func (ntdmu *NetTopologyDeviceMapUpdate) SetDeviceID(id int) *NetTopologyDeviceMapUpdate {
	ntdmu.mutation.SetDeviceID(id)
	return ntdmu
}

// SetNillableDeviceID sets the "device" edge to the Device entity by ID if the given value is not nil.
func (ntdmu *NetTopologyDeviceMapUpdate) SetNillableDeviceID(id *int) *NetTopologyDeviceMapUpdate {
	if id != nil {
		ntdmu = ntdmu.SetDeviceID(*id)
	}
	return ntdmu
}

// SetDevice sets the "device" edge to the Device entity.
func (ntdmu *NetTopologyDeviceMapUpdate) SetDevice(d *Device) *NetTopologyDeviceMapUpdate {
	return ntdmu.SetDeviceID(d.ID)
}

// AddEdgeIDs adds the "edge" edge to the NetTopologyDeviceMap entity by IDs.
func (ntdmu *NetTopologyDeviceMapUpdate) AddEdgeIDs(ids ...int) *NetTopologyDeviceMapUpdate {
	ntdmu.mutation.AddEdgeIDs(ids...)
	return ntdmu
}

// AddEdge adds the "edge" edges to the NetTopologyDeviceMap entity.
func (ntdmu *NetTopologyDeviceMapUpdate) AddEdge(n ...*NetTopologyDeviceMap) *NetTopologyDeviceMapUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ntdmu.AddEdgeIDs(ids...)
}

// Mutation returns the NetTopologyDeviceMapMutation object of the builder.
func (ntdmu *NetTopologyDeviceMapUpdate) Mutation() *NetTopologyDeviceMapMutation {
	return ntdmu.mutation
}

// ClearOnTopology clears the "on_topology" edge to the NetTopology entity.
func (ntdmu *NetTopologyDeviceMapUpdate) ClearOnTopology() *NetTopologyDeviceMapUpdate {
	ntdmu.mutation.ClearOnTopology()
	return ntdmu
}

// ClearDevice clears the "device" edge to the Device entity.
func (ntdmu *NetTopologyDeviceMapUpdate) ClearDevice() *NetTopologyDeviceMapUpdate {
	ntdmu.mutation.ClearDevice()
	return ntdmu
}

// ClearEdgeEdge clears all "edge" edges to the NetTopologyDeviceMap entity.
func (ntdmu *NetTopologyDeviceMapUpdate) ClearEdgeEdge() *NetTopologyDeviceMapUpdate {
	ntdmu.mutation.ClearEdgeEdge()
	return ntdmu
}

// RemoveEdgeIDs removes the "edge" edge to NetTopologyDeviceMap entities by IDs.
func (ntdmu *NetTopologyDeviceMapUpdate) RemoveEdgeIDs(ids ...int) *NetTopologyDeviceMapUpdate {
	ntdmu.mutation.RemoveEdgeIDs(ids...)
	return ntdmu
}

// RemoveEdge removes "edge" edges to NetTopologyDeviceMap entities.
func (ntdmu *NetTopologyDeviceMapUpdate) RemoveEdge(n ...*NetTopologyDeviceMap) *NetTopologyDeviceMapUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ntdmu.RemoveEdgeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ntdmu *NetTopologyDeviceMapUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ntdmu.hooks) == 0 {
		affected, err = ntdmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetTopologyDeviceMapMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ntdmu.mutation = mutation
			affected, err = ntdmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ntdmu.hooks) - 1; i >= 0; i-- {
			mut = ntdmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ntdmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ntdmu *NetTopologyDeviceMapUpdate) SaveX(ctx context.Context) int {
	affected, err := ntdmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ntdmu *NetTopologyDeviceMapUpdate) Exec(ctx context.Context) error {
	_, err := ntdmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntdmu *NetTopologyDeviceMapUpdate) ExecX(ctx context.Context) {
	if err := ntdmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ntdmu *NetTopologyDeviceMapUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nettopologydevicemap.Table,
			Columns: nettopologydevicemap.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nettopologydevicemap.FieldID,
			},
		},
	}
	if ps := ntdmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntdmu.mutation.PositionX(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: nettopologydevicemap.FieldPositionX,
		})
	}
	if value, ok := ntdmu.mutation.AddedPositionX(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: nettopologydevicemap.FieldPositionX,
		})
	}
	if value, ok := ntdmu.mutation.PositionY(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: nettopologydevicemap.FieldPositionY,
		})
	}
	if value, ok := ntdmu.mutation.AddedPositionY(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: nettopologydevicemap.FieldPositionY,
		})
	}
	if ntdmu.mutation.OnTopologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nettopologydevicemap.OnTopologyTable,
			Columns: []string{nettopologydevicemap.OnTopologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopology.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntdmu.mutation.OnTopologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nettopologydevicemap.OnTopologyTable,
			Columns: []string{nettopologydevicemap.OnTopologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopology.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ntdmu.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nettopologydevicemap.DeviceTable,
			Columns: []string{nettopologydevicemap.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntdmu.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nettopologydevicemap.DeviceTable,
			Columns: []string{nettopologydevicemap.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ntdmu.mutation.EdgeEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nettopologydevicemap.EdgeTable,
			Columns: nettopologydevicemap.EdgePrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopologydevicemap.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntdmu.mutation.RemovedEdgeIDs(); len(nodes) > 0 && !ntdmu.mutation.EdgeEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nettopologydevicemap.EdgeTable,
			Columns: nettopologydevicemap.EdgePrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopologydevicemap.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntdmu.mutation.EdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nettopologydevicemap.EdgeTable,
			Columns: nettopologydevicemap.EdgePrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopologydevicemap.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ntdmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nettopologydevicemap.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// NetTopologyDeviceMapUpdateOne is the builder for updating a single NetTopologyDeviceMap entity.
type NetTopologyDeviceMapUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NetTopologyDeviceMapMutation
}

// SetPositionX sets the "position_x" field.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) SetPositionX(i int) *NetTopologyDeviceMapUpdateOne {
	ntdmuo.mutation.ResetPositionX()
	ntdmuo.mutation.SetPositionX(i)
	return ntdmuo
}

// SetNillablePositionX sets the "position_x" field if the given value is not nil.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) SetNillablePositionX(i *int) *NetTopologyDeviceMapUpdateOne {
	if i != nil {
		ntdmuo.SetPositionX(*i)
	}
	return ntdmuo
}

// AddPositionX adds i to the "position_x" field.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) AddPositionX(i int) *NetTopologyDeviceMapUpdateOne {
	ntdmuo.mutation.AddPositionX(i)
	return ntdmuo
}

// SetPositionY sets the "position_y" field.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) SetPositionY(i int) *NetTopologyDeviceMapUpdateOne {
	ntdmuo.mutation.ResetPositionY()
	ntdmuo.mutation.SetPositionY(i)
	return ntdmuo
}

// SetNillablePositionY sets the "position_y" field if the given value is not nil.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) SetNillablePositionY(i *int) *NetTopologyDeviceMapUpdateOne {
	if i != nil {
		ntdmuo.SetPositionY(*i)
	}
	return ntdmuo
}

// AddPositionY adds i to the "position_y" field.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) AddPositionY(i int) *NetTopologyDeviceMapUpdateOne {
	ntdmuo.mutation.AddPositionY(i)
	return ntdmuo
}

// SetOnTopologyID sets the "on_topology" edge to the NetTopology entity by ID.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) SetOnTopologyID(id int) *NetTopologyDeviceMapUpdateOne {
	ntdmuo.mutation.SetOnTopologyID(id)
	return ntdmuo
}

// SetNillableOnTopologyID sets the "on_topology" edge to the NetTopology entity by ID if the given value is not nil.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) SetNillableOnTopologyID(id *int) *NetTopologyDeviceMapUpdateOne {
	if id != nil {
		ntdmuo = ntdmuo.SetOnTopologyID(*id)
	}
	return ntdmuo
}

// SetOnTopology sets the "on_topology" edge to the NetTopology entity.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) SetOnTopology(n *NetTopology) *NetTopologyDeviceMapUpdateOne {
	return ntdmuo.SetOnTopologyID(n.ID)
}

// SetDeviceID sets the "device" edge to the Device entity by ID.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) SetDeviceID(id int) *NetTopologyDeviceMapUpdateOne {
	ntdmuo.mutation.SetDeviceID(id)
	return ntdmuo
}

// SetNillableDeviceID sets the "device" edge to the Device entity by ID if the given value is not nil.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) SetNillableDeviceID(id *int) *NetTopologyDeviceMapUpdateOne {
	if id != nil {
		ntdmuo = ntdmuo.SetDeviceID(*id)
	}
	return ntdmuo
}

// SetDevice sets the "device" edge to the Device entity.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) SetDevice(d *Device) *NetTopologyDeviceMapUpdateOne {
	return ntdmuo.SetDeviceID(d.ID)
}

// AddEdgeIDs adds the "edge" edge to the NetTopologyDeviceMap entity by IDs.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) AddEdgeIDs(ids ...int) *NetTopologyDeviceMapUpdateOne {
	ntdmuo.mutation.AddEdgeIDs(ids...)
	return ntdmuo
}

// AddEdge adds the "edge" edges to the NetTopologyDeviceMap entity.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) AddEdge(n ...*NetTopologyDeviceMap) *NetTopologyDeviceMapUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ntdmuo.AddEdgeIDs(ids...)
}

// Mutation returns the NetTopologyDeviceMapMutation object of the builder.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) Mutation() *NetTopologyDeviceMapMutation {
	return ntdmuo.mutation
}

// ClearOnTopology clears the "on_topology" edge to the NetTopology entity.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) ClearOnTopology() *NetTopologyDeviceMapUpdateOne {
	ntdmuo.mutation.ClearOnTopology()
	return ntdmuo
}

// ClearDevice clears the "device" edge to the Device entity.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) ClearDevice() *NetTopologyDeviceMapUpdateOne {
	ntdmuo.mutation.ClearDevice()
	return ntdmuo
}

// ClearEdgeEdge clears all "edge" edges to the NetTopologyDeviceMap entity.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) ClearEdgeEdge() *NetTopologyDeviceMapUpdateOne {
	ntdmuo.mutation.ClearEdgeEdge()
	return ntdmuo
}

// RemoveEdgeIDs removes the "edge" edge to NetTopologyDeviceMap entities by IDs.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) RemoveEdgeIDs(ids ...int) *NetTopologyDeviceMapUpdateOne {
	ntdmuo.mutation.RemoveEdgeIDs(ids...)
	return ntdmuo
}

// RemoveEdge removes "edge" edges to NetTopologyDeviceMap entities.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) RemoveEdge(n ...*NetTopologyDeviceMap) *NetTopologyDeviceMapUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ntdmuo.RemoveEdgeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) Select(field string, fields ...string) *NetTopologyDeviceMapUpdateOne {
	ntdmuo.fields = append([]string{field}, fields...)
	return ntdmuo
}

// Save executes the query and returns the updated NetTopologyDeviceMap entity.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) Save(ctx context.Context) (*NetTopologyDeviceMap, error) {
	var (
		err  error
		node *NetTopologyDeviceMap
	)
	if len(ntdmuo.hooks) == 0 {
		node, err = ntdmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetTopologyDeviceMapMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ntdmuo.mutation = mutation
			node, err = ntdmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ntdmuo.hooks) - 1; i >= 0; i-- {
			mut = ntdmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ntdmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) SaveX(ctx context.Context) *NetTopologyDeviceMap {
	node, err := ntdmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) Exec(ctx context.Context) error {
	_, err := ntdmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntdmuo *NetTopologyDeviceMapUpdateOne) ExecX(ctx context.Context) {
	if err := ntdmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ntdmuo *NetTopologyDeviceMapUpdateOne) sqlSave(ctx context.Context) (_node *NetTopologyDeviceMap, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nettopologydevicemap.Table,
			Columns: nettopologydevicemap.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nettopologydevicemap.FieldID,
			},
		},
	}
	id, ok := ntdmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing NetTopologyDeviceMap.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ntdmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nettopologydevicemap.FieldID)
		for _, f := range fields {
			if !nettopologydevicemap.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nettopologydevicemap.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ntdmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntdmuo.mutation.PositionX(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: nettopologydevicemap.FieldPositionX,
		})
	}
	if value, ok := ntdmuo.mutation.AddedPositionX(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: nettopologydevicemap.FieldPositionX,
		})
	}
	if value, ok := ntdmuo.mutation.PositionY(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: nettopologydevicemap.FieldPositionY,
		})
	}
	if value, ok := ntdmuo.mutation.AddedPositionY(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: nettopologydevicemap.FieldPositionY,
		})
	}
	if ntdmuo.mutation.OnTopologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nettopologydevicemap.OnTopologyTable,
			Columns: []string{nettopologydevicemap.OnTopologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopology.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntdmuo.mutation.OnTopologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nettopologydevicemap.OnTopologyTable,
			Columns: []string{nettopologydevicemap.OnTopologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopology.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ntdmuo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nettopologydevicemap.DeviceTable,
			Columns: []string{nettopologydevicemap.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntdmuo.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nettopologydevicemap.DeviceTable,
			Columns: []string{nettopologydevicemap.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ntdmuo.mutation.EdgeEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nettopologydevicemap.EdgeTable,
			Columns: nettopologydevicemap.EdgePrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopologydevicemap.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntdmuo.mutation.RemovedEdgeIDs(); len(nodes) > 0 && !ntdmuo.mutation.EdgeEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nettopologydevicemap.EdgeTable,
			Columns: nettopologydevicemap.EdgePrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopologydevicemap.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntdmuo.mutation.EdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nettopologydevicemap.EdgeTable,
			Columns: nettopologydevicemap.EdgePrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopologydevicemap.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NetTopologyDeviceMap{config: ntdmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ntdmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nettopologydevicemap.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
