// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/device"
	"github.com/mrzack99s/netcoco/ent/ipaddress"
	"github.com/mrzack99s/netcoco/ent/netinterface"
	"github.com/mrzack99s/netcoco/ent/portchannelinterface"
)

// IPAddressCreate is the builder for creating a IPAddress entity.
type IPAddressCreate struct {
	config
	mutation *IPAddressMutation
	hooks    []Hook
}

// SetIPAddress sets the "ip_address" field.
func (iac *IPAddressCreate) SetIPAddress(s string) *IPAddressCreate {
	iac.mutation.SetIPAddress(s)
	return iac
}

// SetSubnetMask sets the "subnet_mask" field.
func (iac *IPAddressCreate) SetSubnetMask(s string) *IPAddressCreate {
	iac.mutation.SetSubnetMask(s)
	return iac
}

// SetOnDeviceID sets the "on_device" edge to the Device entity by ID.
func (iac *IPAddressCreate) SetOnDeviceID(id int) *IPAddressCreate {
	iac.mutation.SetOnDeviceID(id)
	return iac
}

// SetNillableOnDeviceID sets the "on_device" edge to the Device entity by ID if the given value is not nil.
func (iac *IPAddressCreate) SetNillableOnDeviceID(id *int) *IPAddressCreate {
	if id != nil {
		iac = iac.SetOnDeviceID(*id)
	}
	return iac
}

// SetOnDevice sets the "on_device" edge to the Device entity.
func (iac *IPAddressCreate) SetOnDevice(d *Device) *IPAddressCreate {
	return iac.SetOnDeviceID(d.ID)
}

// AddInterfaceIDs adds the "interfaces" edge to the NetInterface entity by IDs.
func (iac *IPAddressCreate) AddInterfaceIDs(ids ...int) *IPAddressCreate {
	iac.mutation.AddInterfaceIDs(ids...)
	return iac
}

// AddInterfaces adds the "interfaces" edges to the NetInterface entity.
func (iac *IPAddressCreate) AddInterfaces(n ...*NetInterface) *IPAddressCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return iac.AddInterfaceIDs(ids...)
}

// AddPoInterfaceIDs adds the "po_interfaces" edge to the PortChannelInterface entity by IDs.
func (iac *IPAddressCreate) AddPoInterfaceIDs(ids ...int) *IPAddressCreate {
	iac.mutation.AddPoInterfaceIDs(ids...)
	return iac
}

// AddPoInterfaces adds the "po_interfaces" edges to the PortChannelInterface entity.
func (iac *IPAddressCreate) AddPoInterfaces(p ...*PortChannelInterface) *IPAddressCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iac.AddPoInterfaceIDs(ids...)
}

// Mutation returns the IPAddressMutation object of the builder.
func (iac *IPAddressCreate) Mutation() *IPAddressMutation {
	return iac.mutation
}

// Save creates the IPAddress in the database.
func (iac *IPAddressCreate) Save(ctx context.Context) (*IPAddress, error) {
	var (
		err  error
		node *IPAddress
	)
	if len(iac.hooks) == 0 {
		if err = iac.check(); err != nil {
			return nil, err
		}
		node, err = iac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IPAddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iac.check(); err != nil {
				return nil, err
			}
			iac.mutation = mutation
			node, err = iac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iac.hooks) - 1; i >= 0; i-- {
			mut = iac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (iac *IPAddressCreate) SaveX(ctx context.Context) *IPAddress {
	v, err := iac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (iac *IPAddressCreate) check() error {
	if _, ok := iac.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New("ent: missing required field \"ip_address\"")}
	}
	if v, ok := iac.mutation.IPAddress(); ok {
		if err := ipaddress.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf("ent: validator failed for field \"ip_address\": %w", err)}
		}
	}
	if _, ok := iac.mutation.SubnetMask(); !ok {
		return &ValidationError{Name: "subnet_mask", err: errors.New("ent: missing required field \"subnet_mask\"")}
	}
	if v, ok := iac.mutation.SubnetMask(); ok {
		if err := ipaddress.SubnetMaskValidator(v); err != nil {
			return &ValidationError{Name: "subnet_mask", err: fmt.Errorf("ent: validator failed for field \"subnet_mask\": %w", err)}
		}
	}
	return nil
}

func (iac *IPAddressCreate) sqlSave(ctx context.Context) (*IPAddress, error) {
	_node, _spec := iac.createSpec()
	if err := sqlgraph.CreateNode(ctx, iac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (iac *IPAddressCreate) createSpec() (*IPAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &IPAddress{config: iac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ipaddress.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ipaddress.FieldID,
			},
		}
	)
	if value, ok := iac.mutation.IPAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ipaddress.FieldIPAddress,
		})
		_node.IPAddress = value
	}
	if value, ok := iac.mutation.SubnetMask(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ipaddress.FieldSubnetMask,
		})
		_node.SubnetMask = value
	}
	if nodes := iac.mutation.OnDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipaddress.OnDeviceTable,
			Columns: []string{ipaddress.OnDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.device_have_ip_addresses = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iac.mutation.InterfacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ipaddress.InterfacesTable,
			Columns: []string{ipaddress.InterfacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iac.mutation.PoInterfacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ipaddress.PoInterfacesTable,
			Columns: []string{ipaddress.PoInterfacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portchannelinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IPAddressCreateBulk is the builder for creating many IPAddress entities in bulk.
type IPAddressCreateBulk struct {
	config
	builders []*IPAddressCreate
}

// Save creates the IPAddress entities in the database.
func (iacb *IPAddressCreateBulk) Save(ctx context.Context) ([]*IPAddress, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iacb.builders))
	nodes := make([]*IPAddress, len(iacb.builders))
	mutators := make([]Mutator, len(iacb.builders))
	for i := range iacb.builders {
		func(i int, root context.Context) {
			builder := iacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IPAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iacb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iacb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iacb *IPAddressCreateBulk) SaveX(ctx context.Context) []*IPAddress {
	v, err := iacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
