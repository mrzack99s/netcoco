// Code generated by entc, DO NOT EDIT.

package netinterface

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mrzack99s/netcoco/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// InterfaceName applies equality check predicate on the "interface_name" field. It's identical to InterfaceNameEQ.
func InterfaceName(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterfaceName), v))
	})
}

// InterfaceVlan applies equality check predicate on the "interface_vlan" field. It's identical to InterfaceVlanEQ.
func InterfaceVlan(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterfaceVlan), v))
	})
}

// InterfaceNativeVlan applies equality check predicate on the "interface_native_vlan" field. It's identical to InterfaceNativeVlanEQ.
func InterfaceNativeVlan(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterfaceNativeVlan), v))
	})
}

// InterfaceNameEQ applies the EQ predicate on the "interface_name" field.
func InterfaceNameEQ(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterfaceName), v))
	})
}

// InterfaceNameNEQ applies the NEQ predicate on the "interface_name" field.
func InterfaceNameNEQ(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInterfaceName), v))
	})
}

// InterfaceNameIn applies the In predicate on the "interface_name" field.
func InterfaceNameIn(vs ...string) predicate.NetInterface {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NetInterface(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInterfaceName), v...))
	})
}

// InterfaceNameNotIn applies the NotIn predicate on the "interface_name" field.
func InterfaceNameNotIn(vs ...string) predicate.NetInterface {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NetInterface(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInterfaceName), v...))
	})
}

// InterfaceNameGT applies the GT predicate on the "interface_name" field.
func InterfaceNameGT(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInterfaceName), v))
	})
}

// InterfaceNameGTE applies the GTE predicate on the "interface_name" field.
func InterfaceNameGTE(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInterfaceName), v))
	})
}

// InterfaceNameLT applies the LT predicate on the "interface_name" field.
func InterfaceNameLT(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInterfaceName), v))
	})
}

// InterfaceNameLTE applies the LTE predicate on the "interface_name" field.
func InterfaceNameLTE(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInterfaceName), v))
	})
}

// InterfaceNameContains applies the Contains predicate on the "interface_name" field.
func InterfaceNameContains(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInterfaceName), v))
	})
}

// InterfaceNameHasPrefix applies the HasPrefix predicate on the "interface_name" field.
func InterfaceNameHasPrefix(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInterfaceName), v))
	})
}

// InterfaceNameHasSuffix applies the HasSuffix predicate on the "interface_name" field.
func InterfaceNameHasSuffix(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInterfaceName), v))
	})
}

// InterfaceNameEqualFold applies the EqualFold predicate on the "interface_name" field.
func InterfaceNameEqualFold(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInterfaceName), v))
	})
}

// InterfaceNameContainsFold applies the ContainsFold predicate on the "interface_name" field.
func InterfaceNameContainsFold(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInterfaceName), v))
	})
}

// InterfaceVlanEQ applies the EQ predicate on the "interface_vlan" field.
func InterfaceVlanEQ(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterfaceVlan), v))
	})
}

// InterfaceVlanNEQ applies the NEQ predicate on the "interface_vlan" field.
func InterfaceVlanNEQ(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInterfaceVlan), v))
	})
}

// InterfaceVlanIn applies the In predicate on the "interface_vlan" field.
func InterfaceVlanIn(vs ...string) predicate.NetInterface {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NetInterface(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInterfaceVlan), v...))
	})
}

// InterfaceVlanNotIn applies the NotIn predicate on the "interface_vlan" field.
func InterfaceVlanNotIn(vs ...string) predicate.NetInterface {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NetInterface(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInterfaceVlan), v...))
	})
}

// InterfaceVlanGT applies the GT predicate on the "interface_vlan" field.
func InterfaceVlanGT(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInterfaceVlan), v))
	})
}

// InterfaceVlanGTE applies the GTE predicate on the "interface_vlan" field.
func InterfaceVlanGTE(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInterfaceVlan), v))
	})
}

// InterfaceVlanLT applies the LT predicate on the "interface_vlan" field.
func InterfaceVlanLT(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInterfaceVlan), v))
	})
}

// InterfaceVlanLTE applies the LTE predicate on the "interface_vlan" field.
func InterfaceVlanLTE(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInterfaceVlan), v))
	})
}

// InterfaceVlanContains applies the Contains predicate on the "interface_vlan" field.
func InterfaceVlanContains(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInterfaceVlan), v))
	})
}

// InterfaceVlanHasPrefix applies the HasPrefix predicate on the "interface_vlan" field.
func InterfaceVlanHasPrefix(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInterfaceVlan), v))
	})
}

// InterfaceVlanHasSuffix applies the HasSuffix predicate on the "interface_vlan" field.
func InterfaceVlanHasSuffix(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInterfaceVlan), v))
	})
}

// InterfaceVlanEqualFold applies the EqualFold predicate on the "interface_vlan" field.
func InterfaceVlanEqualFold(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInterfaceVlan), v))
	})
}

// InterfaceVlanContainsFold applies the ContainsFold predicate on the "interface_vlan" field.
func InterfaceVlanContainsFold(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInterfaceVlan), v))
	})
}

// InterfaceNativeVlanEQ applies the EQ predicate on the "interface_native_vlan" field.
func InterfaceNativeVlanEQ(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterfaceNativeVlan), v))
	})
}

// InterfaceNativeVlanNEQ applies the NEQ predicate on the "interface_native_vlan" field.
func InterfaceNativeVlanNEQ(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInterfaceNativeVlan), v))
	})
}

// InterfaceNativeVlanIn applies the In predicate on the "interface_native_vlan" field.
func InterfaceNativeVlanIn(vs ...string) predicate.NetInterface {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NetInterface(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInterfaceNativeVlan), v...))
	})
}

// InterfaceNativeVlanNotIn applies the NotIn predicate on the "interface_native_vlan" field.
func InterfaceNativeVlanNotIn(vs ...string) predicate.NetInterface {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NetInterface(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInterfaceNativeVlan), v...))
	})
}

// InterfaceNativeVlanGT applies the GT predicate on the "interface_native_vlan" field.
func InterfaceNativeVlanGT(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInterfaceNativeVlan), v))
	})
}

// InterfaceNativeVlanGTE applies the GTE predicate on the "interface_native_vlan" field.
func InterfaceNativeVlanGTE(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInterfaceNativeVlan), v))
	})
}

// InterfaceNativeVlanLT applies the LT predicate on the "interface_native_vlan" field.
func InterfaceNativeVlanLT(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInterfaceNativeVlan), v))
	})
}

// InterfaceNativeVlanLTE applies the LTE predicate on the "interface_native_vlan" field.
func InterfaceNativeVlanLTE(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInterfaceNativeVlan), v))
	})
}

// InterfaceNativeVlanContains applies the Contains predicate on the "interface_native_vlan" field.
func InterfaceNativeVlanContains(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInterfaceNativeVlan), v))
	})
}

// InterfaceNativeVlanHasPrefix applies the HasPrefix predicate on the "interface_native_vlan" field.
func InterfaceNativeVlanHasPrefix(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInterfaceNativeVlan), v))
	})
}

// InterfaceNativeVlanHasSuffix applies the HasSuffix predicate on the "interface_native_vlan" field.
func InterfaceNativeVlanHasSuffix(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInterfaceNativeVlan), v))
	})
}

// InterfaceNativeVlanEqualFold applies the EqualFold predicate on the "interface_native_vlan" field.
func InterfaceNativeVlanEqualFold(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInterfaceNativeVlan), v))
	})
}

// InterfaceNativeVlanContainsFold applies the ContainsFold predicate on the "interface_native_vlan" field.
func InterfaceNativeVlanContainsFold(v string) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInterfaceNativeVlan), v))
	})
}

// HasOnDevice applies the HasEdge predicate on the "on_device" edge.
func HasOnDevice() predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OnDeviceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OnDeviceTable, OnDeviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOnDeviceWith applies the HasEdge predicate on the "on_device" edge with a given conditions (other predicates).
func HasOnDeviceWith(preds ...predicate.Device) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OnDeviceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OnDeviceTable, OnDeviceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMode applies the HasEdge predicate on the "mode" edge.
func HasMode() predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ModeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ModeTable, ModeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModeWith applies the HasEdge predicate on the "mode" edge with a given conditions (other predicates).
func HasModeWith(preds ...predicate.NetInterfaceMode) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ModeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ModeTable, ModeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NetInterface) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NetInterface) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NetInterface) predicate.NetInterface {
	return predicate.NetInterface(func(s *sql.Selector) {
		p(s.Not())
	})
}
