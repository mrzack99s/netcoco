// Code generated by entc, DO NOT EDIT.

package netinterface

const (
	// Label holds the string label denoting the netinterface type in the database.
	Label = "net_interface"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInterfaceName holds the string denoting the interface_name field in the database.
	FieldInterfaceName = "interface_name"
	// FieldInterfaceVlan holds the string denoting the interface_vlan field in the database.
	FieldInterfaceVlan = "interface_vlan"
	// FieldInterfaceNativeVlan holds the string denoting the interface_native_vlan field in the database.
	FieldInterfaceNativeVlan = "interface_native_vlan"
	// EdgeOnDevice holds the string denoting the on_device edge name in mutations.
	EdgeOnDevice = "on_device"
	// EdgeMode holds the string denoting the mode edge name in mutations.
	EdgeMode = "mode"
	// Table holds the table name of the netinterface in the database.
	Table = "net_interfaces"
	// OnDeviceTable is the table the holds the on_device relation/edge.
	OnDeviceTable = "net_interfaces"
	// OnDeviceInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	OnDeviceInverseTable = "devices"
	// OnDeviceColumn is the table column denoting the on_device relation/edge.
	OnDeviceColumn = "device_interfaces"
	// ModeTable is the table the holds the mode relation/edge.
	ModeTable = "net_interfaces"
	// ModeInverseTable is the table name for the NetInterfaceMode entity.
	// It exists in this package in order to avoid circular dependency with the "netinterfacemode" package.
	ModeInverseTable = "net_interface_modes"
	// ModeColumn is the table column denoting the mode relation/edge.
	ModeColumn = "net_interface_mode_modes"
)

// Columns holds all SQL columns for netinterface fields.
var Columns = []string{
	FieldID,
	FieldInterfaceName,
	FieldInterfaceVlan,
	FieldInterfaceNativeVlan,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "net_interfaces"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"device_interfaces",
	"net_interface_mode_modes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// InterfaceNameValidator is a validator for the "interface_name" field. It is called by the builders before save.
	InterfaceNameValidator func(string) error
	// DefaultInterfaceVlan holds the default value on creation for the "interface_vlan" field.
	DefaultInterfaceVlan string
	// DefaultInterfaceNativeVlan holds the default value on creation for the "interface_native_vlan" field.
	DefaultInterfaceNativeVlan string
)
