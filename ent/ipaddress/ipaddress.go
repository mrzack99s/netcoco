// Code generated by entc, DO NOT EDIT.

package ipaddress

const (
	// Label holds the string label denoting the ipaddress type in the database.
	Label = "ip_address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldSubnetMask holds the string denoting the subnet_mask field in the database.
	FieldSubnetMask = "subnet_mask"
	// EdgeOnDevice holds the string denoting the on_device edge name in mutations.
	EdgeOnDevice = "on_device"
	// EdgeInterfaces holds the string denoting the interfaces edge name in mutations.
	EdgeInterfaces = "interfaces"
	// EdgePoInterfaces holds the string denoting the po_interfaces edge name in mutations.
	EdgePoInterfaces = "po_interfaces"
	// Table holds the table name of the ipaddress in the database.
	Table = "ip_addresses"
	// OnDeviceTable is the table the holds the on_device relation/edge.
	OnDeviceTable = "ip_addresses"
	// OnDeviceInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	OnDeviceInverseTable = "devices"
	// OnDeviceColumn is the table column denoting the on_device relation/edge.
	OnDeviceColumn = "device_have_ip_addresses"
	// InterfacesTable is the table the holds the interfaces relation/edge.
	InterfacesTable = "net_interfaces"
	// InterfacesInverseTable is the table name for the NetInterface entity.
	// It exists in this package in order to avoid circular dependency with the "netinterface" package.
	InterfacesInverseTable = "net_interfaces"
	// InterfacesColumn is the table column denoting the interfaces relation/edge.
	InterfacesColumn = "ip_address_interfaces"
	// PoInterfacesTable is the table the holds the po_interfaces relation/edge.
	PoInterfacesTable = "port_channel_interfaces"
	// PoInterfacesInverseTable is the table name for the PortChannelInterface entity.
	// It exists in this package in order to avoid circular dependency with the "portchannelinterface" package.
	PoInterfacesInverseTable = "port_channel_interfaces"
	// PoInterfacesColumn is the table column denoting the po_interfaces relation/edge.
	PoInterfacesColumn = "ip_address_po_interfaces"
)

// Columns holds all SQL columns for ipaddress fields.
var Columns = []string{
	FieldID,
	FieldIPAddress,
	FieldSubnetMask,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ip_addresses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"device_have_ip_addresses",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IPAddressValidator is a validator for the "ip_address" field. It is called by the builders before save.
	IPAddressValidator func(string) error
	// SubnetMaskValidator is a validator for the "subnet_mask" field. It is called by the builders before save.
	SubnetMaskValidator func(string) error
)
