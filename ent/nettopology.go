// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/mrzack99s/netcoco/ent/nettopology"
)

// NetTopology is the model entity for the NetTopology schema.
type NetTopology struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TopologyName holds the value of the "topology_name" field.
	TopologyName string `json:"topology_name,omitempty"`
	// TopologyDescription holds the value of the "topology_description" field.
	TopologyDescription string `json:"topology_description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NetTopologyQuery when eager-loading is set.
	Edges NetTopologyEdges `json:"edges"`
}

// NetTopologyEdges holds the relations/edges for other nodes in the graph.
type NetTopologyEdges struct {
	// Topology holds the value of the topology edge.
	Topology []*NetTopologyDeviceMap `json:"topology,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TopologyOrErr returns the Topology value or an error if the edge
// was not loaded in eager-loading.
func (e NetTopologyEdges) TopologyOrErr() ([]*NetTopologyDeviceMap, error) {
	if e.loadedTypes[0] {
		return e.Topology, nil
	}
	return nil, &NotLoadedError{edge: "topology"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NetTopology) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case nettopology.FieldID:
			values[i] = new(sql.NullInt64)
		case nettopology.FieldTopologyName, nettopology.FieldTopologyDescription:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NetTopology", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NetTopology fields.
func (nt *NetTopology) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nettopology.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nt.ID = int(value.Int64)
		case nettopology.FieldTopologyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topology_name", values[i])
			} else if value.Valid {
				nt.TopologyName = value.String
			}
		case nettopology.FieldTopologyDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topology_description", values[i])
			} else if value.Valid {
				nt.TopologyDescription = value.String
			}
		}
	}
	return nil
}

// QueryTopology queries the "topology" edge of the NetTopology entity.
func (nt *NetTopology) QueryTopology() *NetTopologyDeviceMapQuery {
	return (&NetTopologyClient{config: nt.config}).QueryTopology(nt)
}

// Update returns a builder for updating this NetTopology.
// Note that you need to call NetTopology.Unwrap() before calling this method if this NetTopology
// was returned from a transaction, and the transaction was committed or rolled back.
func (nt *NetTopology) Update() *NetTopologyUpdateOne {
	return (&NetTopologyClient{config: nt.config}).UpdateOne(nt)
}

// Unwrap unwraps the NetTopology entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nt *NetTopology) Unwrap() *NetTopology {
	tx, ok := nt.config.driver.(*txDriver)
	if !ok {
		panic("ent: NetTopology is not a transactional entity")
	}
	nt.config.driver = tx.drv
	return nt
}

// String implements the fmt.Stringer.
func (nt *NetTopology) String() string {
	var builder strings.Builder
	builder.WriteString("NetTopology(")
	builder.WriteString(fmt.Sprintf("id=%v", nt.ID))
	builder.WriteString(", topology_name=")
	builder.WriteString(nt.TopologyName)
	builder.WriteString(", topology_description=")
	builder.WriteString(nt.TopologyDescription)
	builder.WriteByte(')')
	return builder.String()
}

// NetTopologies is a parsable slice of NetTopology.
type NetTopologies []*NetTopology

func (nt NetTopologies) config(cfg config) {
	for _i := range nt {
		nt[_i].config = cfg
	}
}
