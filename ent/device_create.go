// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/device"
	"github.com/mrzack99s/netcoco/ent/devicetype"
	"github.com/mrzack99s/netcoco/ent/netinterface"
	"github.com/mrzack99s/netcoco/ent/nettopologydevicemap"
)

// DeviceCreate is the builder for creating a Device entity.
type DeviceCreate struct {
	config
	mutation *DeviceMutation
	hooks    []Hook
}

// SetDeviceName sets the "device_name" field.
func (dc *DeviceCreate) SetDeviceName(s string) *DeviceCreate {
	dc.mutation.SetDeviceName(s)
	return dc
}

// SetDeviceHostname sets the "device_hostname" field.
func (dc *DeviceCreate) SetDeviceHostname(s string) *DeviceCreate {
	dc.mutation.SetDeviceHostname(s)
	return dc
}

// SetDeviceUsername sets the "device_username" field.
func (dc *DeviceCreate) SetDeviceUsername(s string) *DeviceCreate {
	dc.mutation.SetDeviceUsername(s)
	return dc
}

// SetNillableDeviceUsername sets the "device_username" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableDeviceUsername(s *string) *DeviceCreate {
	if s != nil {
		dc.SetDeviceUsername(*s)
	}
	return dc
}

// SetDevicePassword sets the "device_password" field.
func (dc *DeviceCreate) SetDevicePassword(s string) *DeviceCreate {
	dc.mutation.SetDevicePassword(s)
	return dc
}

// SetNillableDevicePassword sets the "device_password" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableDevicePassword(s *string) *DeviceCreate {
	if s != nil {
		dc.SetDevicePassword(*s)
	}
	return dc
}

// SetDeviceSecret sets the "device_secret" field.
func (dc *DeviceCreate) SetDeviceSecret(s string) *DeviceCreate {
	dc.mutation.SetDeviceSecret(s)
	return dc
}

// SetNillableDeviceSecret sets the "device_secret" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableDeviceSecret(s *string) *DeviceCreate {
	if s != nil {
		dc.SetDeviceSecret(*s)
	}
	return dc
}

// SetDeviceSSHPort sets the "device_ssh_port" field.
func (dc *DeviceCreate) SetDeviceSSHPort(i int) *DeviceCreate {
	dc.mutation.SetDeviceSSHPort(i)
	return dc
}

// SetNillableDeviceSSHPort sets the "device_ssh_port" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableDeviceSSHPort(i *int) *DeviceCreate {
	if i != nil {
		dc.SetDeviceSSHPort(*i)
	}
	return dc
}

// SetDeviceCommitConfig sets the "device_commit_config" field.
func (dc *DeviceCreate) SetDeviceCommitConfig(b bool) *DeviceCreate {
	dc.mutation.SetDeviceCommitConfig(b)
	return dc
}

// SetNillableDeviceCommitConfig sets the "device_commit_config" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableDeviceCommitConfig(b *bool) *DeviceCreate {
	if b != nil {
		dc.SetDeviceCommitConfig(*b)
	}
	return dc
}

// SetInTypeID sets the "in_type" edge to the DeviceType entity by ID.
func (dc *DeviceCreate) SetInTypeID(id int) *DeviceCreate {
	dc.mutation.SetInTypeID(id)
	return dc
}

// SetNillableInTypeID sets the "in_type" edge to the DeviceType entity by ID if the given value is not nil.
func (dc *DeviceCreate) SetNillableInTypeID(id *int) *DeviceCreate {
	if id != nil {
		dc = dc.SetInTypeID(*id)
	}
	return dc
}

// SetInType sets the "in_type" edge to the DeviceType entity.
func (dc *DeviceCreate) SetInType(d *DeviceType) *DeviceCreate {
	return dc.SetInTypeID(d.ID)
}

// AddInterfaceIDs adds the "interfaces" edge to the NetInterface entity by IDs.
func (dc *DeviceCreate) AddInterfaceIDs(ids ...int) *DeviceCreate {
	dc.mutation.AddInterfaceIDs(ids...)
	return dc
}

// AddInterfaces adds the "interfaces" edges to the NetInterface entity.
func (dc *DeviceCreate) AddInterfaces(n ...*NetInterface) *DeviceCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return dc.AddInterfaceIDs(ids...)
}

// AddInTopologyIDs adds the "in_topology" edge to the NetTopologyDeviceMap entity by IDs.
func (dc *DeviceCreate) AddInTopologyIDs(ids ...int) *DeviceCreate {
	dc.mutation.AddInTopologyIDs(ids...)
	return dc
}

// AddInTopology adds the "in_topology" edges to the NetTopologyDeviceMap entity.
func (dc *DeviceCreate) AddInTopology(n ...*NetTopologyDeviceMap) *DeviceCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return dc.AddInTopologyIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (dc *DeviceCreate) Mutation() *DeviceMutation {
	return dc.mutation
}

// Save creates the Device in the database.
func (dc *DeviceCreate) Save(ctx context.Context) (*Device, error) {
	var (
		err  error
		node *Device
	)
	dc.defaults()
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeviceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DeviceCreate) SaveX(ctx context.Context) *Device {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (dc *DeviceCreate) defaults() {
	if _, ok := dc.mutation.DeviceSecret(); !ok {
		v := device.DefaultDeviceSecret
		dc.mutation.SetDeviceSecret(v)
	}
	if _, ok := dc.mutation.DeviceSSHPort(); !ok {
		v := device.DefaultDeviceSSHPort
		dc.mutation.SetDeviceSSHPort(v)
	}
	if _, ok := dc.mutation.DeviceCommitConfig(); !ok {
		v := device.DefaultDeviceCommitConfig
		dc.mutation.SetDeviceCommitConfig(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DeviceCreate) check() error {
	if _, ok := dc.mutation.DeviceName(); !ok {
		return &ValidationError{Name: "device_name", err: errors.New("ent: missing required field \"device_name\"")}
	}
	if v, ok := dc.mutation.DeviceName(); ok {
		if err := device.DeviceNameValidator(v); err != nil {
			return &ValidationError{Name: "device_name", err: fmt.Errorf("ent: validator failed for field \"device_name\": %w", err)}
		}
	}
	if _, ok := dc.mutation.DeviceHostname(); !ok {
		return &ValidationError{Name: "device_hostname", err: errors.New("ent: missing required field \"device_hostname\"")}
	}
	if v, ok := dc.mutation.DeviceHostname(); ok {
		if err := device.DeviceHostnameValidator(v); err != nil {
			return &ValidationError{Name: "device_hostname", err: fmt.Errorf("ent: validator failed for field \"device_hostname\": %w", err)}
		}
	}
	if _, ok := dc.mutation.DeviceSSHPort(); !ok {
		return &ValidationError{Name: "device_ssh_port", err: errors.New("ent: missing required field \"device_ssh_port\"")}
	}
	if v, ok := dc.mutation.DeviceSSHPort(); ok {
		if err := device.DeviceSSHPortValidator(v); err != nil {
			return &ValidationError{Name: "device_ssh_port", err: fmt.Errorf("ent: validator failed for field \"device_ssh_port\": %w", err)}
		}
	}
	if _, ok := dc.mutation.DeviceCommitConfig(); !ok {
		return &ValidationError{Name: "device_commit_config", err: errors.New("ent: missing required field \"device_commit_config\"")}
	}
	return nil
}

func (dc *DeviceCreate) sqlSave(ctx context.Context) (*Device, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dc *DeviceCreate) createSpec() (*Device, *sqlgraph.CreateSpec) {
	var (
		_node = &Device{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: device.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: device.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.DeviceName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldDeviceName,
		})
		_node.DeviceName = value
	}
	if value, ok := dc.mutation.DeviceHostname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldDeviceHostname,
		})
		_node.DeviceHostname = value
	}
	if value, ok := dc.mutation.DeviceUsername(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldDeviceUsername,
		})
		_node.DeviceUsername = value
	}
	if value, ok := dc.mutation.DevicePassword(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldDevicePassword,
		})
		_node.DevicePassword = value
	}
	if value, ok := dc.mutation.DeviceSecret(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldDeviceSecret,
		})
		_node.DeviceSecret = value
	}
	if value, ok := dc.mutation.DeviceSSHPort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: device.FieldDeviceSSHPort,
		})
		_node.DeviceSSHPort = value
	}
	if value, ok := dc.mutation.DeviceCommitConfig(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: device.FieldDeviceCommitConfig,
		})
		_node.DeviceCommitConfig = value
	}
	if nodes := dc.mutation.InTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.InTypeTable,
			Columns: []string{device.InTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: devicetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.device_type_types = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.InterfacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.InterfacesTable,
			Columns: []string{device.InterfacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.InTopologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.InTopologyTable,
			Columns: []string{device.InTopologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopologydevicemap.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeviceCreateBulk is the builder for creating many Device entities in bulk.
type DeviceCreateBulk struct {
	config
	builders []*DeviceCreate
}

// Save creates the Device entities in the database.
func (dcb *DeviceCreateBulk) Save(ctx context.Context) ([]*Device, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Device, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DeviceCreateBulk) SaveX(ctx context.Context) []*Device {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
