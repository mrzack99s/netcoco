// Code generated by entc, DO NOT EDIT.

package device

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mrzack99s/netcoco/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DeviceName applies equality check predicate on the "device_name" field. It's identical to DeviceNameEQ.
func DeviceName(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceName), v))
	})
}

// DeviceHostname applies equality check predicate on the "device_hostname" field. It's identical to DeviceHostnameEQ.
func DeviceHostname(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceHostname), v))
	})
}

// DeviceUsername applies equality check predicate on the "device_username" field. It's identical to DeviceUsernameEQ.
func DeviceUsername(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceUsername), v))
	})
}

// DevicePassword applies equality check predicate on the "device_password" field. It's identical to DevicePasswordEQ.
func DevicePassword(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDevicePassword), v))
	})
}

// DeviceSecret applies equality check predicate on the "device_secret" field. It's identical to DeviceSecretEQ.
func DeviceSecret(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceSecret), v))
	})
}

// DeviceSSHPort applies equality check predicate on the "device_ssh_port" field. It's identical to DeviceSSHPortEQ.
func DeviceSSHPort(v int) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceSSHPort), v))
	})
}

// DeviceCommitConfig applies equality check predicate on the "device_commit_config" field. It's identical to DeviceCommitConfigEQ.
func DeviceCommitConfig(v bool) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceCommitConfig), v))
	})
}

// DeviceNameEQ applies the EQ predicate on the "device_name" field.
func DeviceNameEQ(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceName), v))
	})
}

// DeviceNameNEQ applies the NEQ predicate on the "device_name" field.
func DeviceNameNEQ(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeviceName), v))
	})
}

// DeviceNameIn applies the In predicate on the "device_name" field.
func DeviceNameIn(vs ...string) predicate.Device {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Device(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeviceName), v...))
	})
}

// DeviceNameNotIn applies the NotIn predicate on the "device_name" field.
func DeviceNameNotIn(vs ...string) predicate.Device {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Device(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeviceName), v...))
	})
}

// DeviceNameGT applies the GT predicate on the "device_name" field.
func DeviceNameGT(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeviceName), v))
	})
}

// DeviceNameGTE applies the GTE predicate on the "device_name" field.
func DeviceNameGTE(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeviceName), v))
	})
}

// DeviceNameLT applies the LT predicate on the "device_name" field.
func DeviceNameLT(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeviceName), v))
	})
}

// DeviceNameLTE applies the LTE predicate on the "device_name" field.
func DeviceNameLTE(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeviceName), v))
	})
}

// DeviceNameContains applies the Contains predicate on the "device_name" field.
func DeviceNameContains(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeviceName), v))
	})
}

// DeviceNameHasPrefix applies the HasPrefix predicate on the "device_name" field.
func DeviceNameHasPrefix(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeviceName), v))
	})
}

// DeviceNameHasSuffix applies the HasSuffix predicate on the "device_name" field.
func DeviceNameHasSuffix(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeviceName), v))
	})
}

// DeviceNameEqualFold applies the EqualFold predicate on the "device_name" field.
func DeviceNameEqualFold(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeviceName), v))
	})
}

// DeviceNameContainsFold applies the ContainsFold predicate on the "device_name" field.
func DeviceNameContainsFold(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeviceName), v))
	})
}

// DeviceHostnameEQ applies the EQ predicate on the "device_hostname" field.
func DeviceHostnameEQ(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceHostname), v))
	})
}

// DeviceHostnameNEQ applies the NEQ predicate on the "device_hostname" field.
func DeviceHostnameNEQ(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeviceHostname), v))
	})
}

// DeviceHostnameIn applies the In predicate on the "device_hostname" field.
func DeviceHostnameIn(vs ...string) predicate.Device {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Device(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeviceHostname), v...))
	})
}

// DeviceHostnameNotIn applies the NotIn predicate on the "device_hostname" field.
func DeviceHostnameNotIn(vs ...string) predicate.Device {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Device(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeviceHostname), v...))
	})
}

// DeviceHostnameGT applies the GT predicate on the "device_hostname" field.
func DeviceHostnameGT(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeviceHostname), v))
	})
}

// DeviceHostnameGTE applies the GTE predicate on the "device_hostname" field.
func DeviceHostnameGTE(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeviceHostname), v))
	})
}

// DeviceHostnameLT applies the LT predicate on the "device_hostname" field.
func DeviceHostnameLT(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeviceHostname), v))
	})
}

// DeviceHostnameLTE applies the LTE predicate on the "device_hostname" field.
func DeviceHostnameLTE(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeviceHostname), v))
	})
}

// DeviceHostnameContains applies the Contains predicate on the "device_hostname" field.
func DeviceHostnameContains(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeviceHostname), v))
	})
}

// DeviceHostnameHasPrefix applies the HasPrefix predicate on the "device_hostname" field.
func DeviceHostnameHasPrefix(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeviceHostname), v))
	})
}

// DeviceHostnameHasSuffix applies the HasSuffix predicate on the "device_hostname" field.
func DeviceHostnameHasSuffix(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeviceHostname), v))
	})
}

// DeviceHostnameEqualFold applies the EqualFold predicate on the "device_hostname" field.
func DeviceHostnameEqualFold(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeviceHostname), v))
	})
}

// DeviceHostnameContainsFold applies the ContainsFold predicate on the "device_hostname" field.
func DeviceHostnameContainsFold(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeviceHostname), v))
	})
}

// DeviceUsernameEQ applies the EQ predicate on the "device_username" field.
func DeviceUsernameEQ(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceUsername), v))
	})
}

// DeviceUsernameNEQ applies the NEQ predicate on the "device_username" field.
func DeviceUsernameNEQ(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeviceUsername), v))
	})
}

// DeviceUsernameIn applies the In predicate on the "device_username" field.
func DeviceUsernameIn(vs ...string) predicate.Device {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Device(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeviceUsername), v...))
	})
}

// DeviceUsernameNotIn applies the NotIn predicate on the "device_username" field.
func DeviceUsernameNotIn(vs ...string) predicate.Device {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Device(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeviceUsername), v...))
	})
}

// DeviceUsernameGT applies the GT predicate on the "device_username" field.
func DeviceUsernameGT(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeviceUsername), v))
	})
}

// DeviceUsernameGTE applies the GTE predicate on the "device_username" field.
func DeviceUsernameGTE(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeviceUsername), v))
	})
}

// DeviceUsernameLT applies the LT predicate on the "device_username" field.
func DeviceUsernameLT(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeviceUsername), v))
	})
}

// DeviceUsernameLTE applies the LTE predicate on the "device_username" field.
func DeviceUsernameLTE(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeviceUsername), v))
	})
}

// DeviceUsernameContains applies the Contains predicate on the "device_username" field.
func DeviceUsernameContains(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeviceUsername), v))
	})
}

// DeviceUsernameHasPrefix applies the HasPrefix predicate on the "device_username" field.
func DeviceUsernameHasPrefix(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeviceUsername), v))
	})
}

// DeviceUsernameHasSuffix applies the HasSuffix predicate on the "device_username" field.
func DeviceUsernameHasSuffix(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeviceUsername), v))
	})
}

// DeviceUsernameIsNil applies the IsNil predicate on the "device_username" field.
func DeviceUsernameIsNil() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeviceUsername)))
	})
}

// DeviceUsernameNotNil applies the NotNil predicate on the "device_username" field.
func DeviceUsernameNotNil() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeviceUsername)))
	})
}

// DeviceUsernameEqualFold applies the EqualFold predicate on the "device_username" field.
func DeviceUsernameEqualFold(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeviceUsername), v))
	})
}

// DeviceUsernameContainsFold applies the ContainsFold predicate on the "device_username" field.
func DeviceUsernameContainsFold(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeviceUsername), v))
	})
}

// DevicePasswordEQ applies the EQ predicate on the "device_password" field.
func DevicePasswordEQ(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDevicePassword), v))
	})
}

// DevicePasswordNEQ applies the NEQ predicate on the "device_password" field.
func DevicePasswordNEQ(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDevicePassword), v))
	})
}

// DevicePasswordIn applies the In predicate on the "device_password" field.
func DevicePasswordIn(vs ...string) predicate.Device {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Device(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDevicePassword), v...))
	})
}

// DevicePasswordNotIn applies the NotIn predicate on the "device_password" field.
func DevicePasswordNotIn(vs ...string) predicate.Device {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Device(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDevicePassword), v...))
	})
}

// DevicePasswordGT applies the GT predicate on the "device_password" field.
func DevicePasswordGT(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDevicePassword), v))
	})
}

// DevicePasswordGTE applies the GTE predicate on the "device_password" field.
func DevicePasswordGTE(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDevicePassword), v))
	})
}

// DevicePasswordLT applies the LT predicate on the "device_password" field.
func DevicePasswordLT(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDevicePassword), v))
	})
}

// DevicePasswordLTE applies the LTE predicate on the "device_password" field.
func DevicePasswordLTE(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDevicePassword), v))
	})
}

// DevicePasswordContains applies the Contains predicate on the "device_password" field.
func DevicePasswordContains(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDevicePassword), v))
	})
}

// DevicePasswordHasPrefix applies the HasPrefix predicate on the "device_password" field.
func DevicePasswordHasPrefix(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDevicePassword), v))
	})
}

// DevicePasswordHasSuffix applies the HasSuffix predicate on the "device_password" field.
func DevicePasswordHasSuffix(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDevicePassword), v))
	})
}

// DevicePasswordIsNil applies the IsNil predicate on the "device_password" field.
func DevicePasswordIsNil() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDevicePassword)))
	})
}

// DevicePasswordNotNil applies the NotNil predicate on the "device_password" field.
func DevicePasswordNotNil() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDevicePassword)))
	})
}

// DevicePasswordEqualFold applies the EqualFold predicate on the "device_password" field.
func DevicePasswordEqualFold(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDevicePassword), v))
	})
}

// DevicePasswordContainsFold applies the ContainsFold predicate on the "device_password" field.
func DevicePasswordContainsFold(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDevicePassword), v))
	})
}

// DeviceSecretEQ applies the EQ predicate on the "device_secret" field.
func DeviceSecretEQ(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceSecret), v))
	})
}

// DeviceSecretNEQ applies the NEQ predicate on the "device_secret" field.
func DeviceSecretNEQ(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeviceSecret), v))
	})
}

// DeviceSecretIn applies the In predicate on the "device_secret" field.
func DeviceSecretIn(vs ...string) predicate.Device {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Device(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeviceSecret), v...))
	})
}

// DeviceSecretNotIn applies the NotIn predicate on the "device_secret" field.
func DeviceSecretNotIn(vs ...string) predicate.Device {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Device(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeviceSecret), v...))
	})
}

// DeviceSecretGT applies the GT predicate on the "device_secret" field.
func DeviceSecretGT(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeviceSecret), v))
	})
}

// DeviceSecretGTE applies the GTE predicate on the "device_secret" field.
func DeviceSecretGTE(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeviceSecret), v))
	})
}

// DeviceSecretLT applies the LT predicate on the "device_secret" field.
func DeviceSecretLT(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeviceSecret), v))
	})
}

// DeviceSecretLTE applies the LTE predicate on the "device_secret" field.
func DeviceSecretLTE(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeviceSecret), v))
	})
}

// DeviceSecretContains applies the Contains predicate on the "device_secret" field.
func DeviceSecretContains(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeviceSecret), v))
	})
}

// DeviceSecretHasPrefix applies the HasPrefix predicate on the "device_secret" field.
func DeviceSecretHasPrefix(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeviceSecret), v))
	})
}

// DeviceSecretHasSuffix applies the HasSuffix predicate on the "device_secret" field.
func DeviceSecretHasSuffix(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeviceSecret), v))
	})
}

// DeviceSecretIsNil applies the IsNil predicate on the "device_secret" field.
func DeviceSecretIsNil() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeviceSecret)))
	})
}

// DeviceSecretNotNil applies the NotNil predicate on the "device_secret" field.
func DeviceSecretNotNil() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeviceSecret)))
	})
}

// DeviceSecretEqualFold applies the EqualFold predicate on the "device_secret" field.
func DeviceSecretEqualFold(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeviceSecret), v))
	})
}

// DeviceSecretContainsFold applies the ContainsFold predicate on the "device_secret" field.
func DeviceSecretContainsFold(v string) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeviceSecret), v))
	})
}

// DeviceSSHPortEQ applies the EQ predicate on the "device_ssh_port" field.
func DeviceSSHPortEQ(v int) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceSSHPort), v))
	})
}

// DeviceSSHPortNEQ applies the NEQ predicate on the "device_ssh_port" field.
func DeviceSSHPortNEQ(v int) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeviceSSHPort), v))
	})
}

// DeviceSSHPortIn applies the In predicate on the "device_ssh_port" field.
func DeviceSSHPortIn(vs ...int) predicate.Device {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Device(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeviceSSHPort), v...))
	})
}

// DeviceSSHPortNotIn applies the NotIn predicate on the "device_ssh_port" field.
func DeviceSSHPortNotIn(vs ...int) predicate.Device {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Device(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeviceSSHPort), v...))
	})
}

// DeviceSSHPortGT applies the GT predicate on the "device_ssh_port" field.
func DeviceSSHPortGT(v int) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeviceSSHPort), v))
	})
}

// DeviceSSHPortGTE applies the GTE predicate on the "device_ssh_port" field.
func DeviceSSHPortGTE(v int) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeviceSSHPort), v))
	})
}

// DeviceSSHPortLT applies the LT predicate on the "device_ssh_port" field.
func DeviceSSHPortLT(v int) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeviceSSHPort), v))
	})
}

// DeviceSSHPortLTE applies the LTE predicate on the "device_ssh_port" field.
func DeviceSSHPortLTE(v int) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeviceSSHPort), v))
	})
}

// DeviceCommitConfigEQ applies the EQ predicate on the "device_commit_config" field.
func DeviceCommitConfigEQ(v bool) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceCommitConfig), v))
	})
}

// DeviceCommitConfigNEQ applies the NEQ predicate on the "device_commit_config" field.
func DeviceCommitConfigNEQ(v bool) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeviceCommitConfig), v))
	})
}

// HasInType applies the HasEdge predicate on the "in_type" edge.
func HasInType() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InTypeTable, InTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInTypeWith applies the HasEdge predicate on the "in_type" edge with a given conditions (other predicates).
func HasInTypeWith(preds ...predicate.DeviceType) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InTypeTable, InTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInPlatform applies the HasEdge predicate on the "in_platform" edge.
func HasInPlatform() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InPlatformTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InPlatformTable, InPlatformColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInPlatformWith applies the HasEdge predicate on the "in_platform" edge with a given conditions (other predicates).
func HasInPlatformWith(preds ...predicate.DevicePlatform) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InPlatformInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InPlatformTable, InPlatformColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInterfaces applies the HasEdge predicate on the "interfaces" edge.
func HasInterfaces() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InterfacesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InterfacesTable, InterfacesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInterfacesWith applies the HasEdge predicate on the "interfaces" edge with a given conditions (other predicates).
func HasInterfacesWith(preds ...predicate.NetInterface) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InterfacesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InterfacesTable, InterfacesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInTopology applies the HasEdge predicate on the "in_topology" edge.
func HasInTopology() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InTopologyTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InTopologyTable, InTopologyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInTopologyWith applies the HasEdge predicate on the "in_topology" edge with a given conditions (other predicates).
func HasInTopologyWith(preds ...predicate.NetTopologyDeviceMap) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InTopologyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InTopologyTable, InTopologyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStoreVlans applies the HasEdge predicate on the "store_vlans" edge.
func HasStoreVlans() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoreVlansTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, StoreVlansTable, StoreVlansPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreVlansWith applies the HasEdge predicate on the "store_vlans" edge with a given conditions (other predicates).
func HasStoreVlansWith(preds ...predicate.Vlan) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoreVlansInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, StoreVlansTable, StoreVlansPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeletedVlans applies the HasEdge predicate on the "deleted_vlans" edge.
func HasDeletedVlans() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeletedVlansTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DeletedVlansTable, DeletedVlansColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeletedVlansWith applies the HasEdge predicate on the "deleted_vlans" edge with a given conditions (other predicates).
func HasDeletedVlansWith(preds ...predicate.DeletedVlanLog) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeletedVlansInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DeletedVlansTable, DeletedVlansColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Device) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Device) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Device) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		p(s.Not())
	})
}
