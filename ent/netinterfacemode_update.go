// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/netinterface"
	"github.com/mrzack99s/netcoco/ent/netinterfacemode"
	"github.com/mrzack99s/netcoco/ent/portchannelinterface"
	"github.com/mrzack99s/netcoco/ent/predicate"
)

// NetInterfaceModeUpdate is the builder for updating NetInterfaceMode entities.
type NetInterfaceModeUpdate struct {
	config
	hooks    []Hook
	mutation *NetInterfaceModeMutation
}

// Where adds a new predicate for the NetInterfaceModeUpdate builder.
func (nimu *NetInterfaceModeUpdate) Where(ps ...predicate.NetInterfaceMode) *NetInterfaceModeUpdate {
	nimu.mutation.predicates = append(nimu.mutation.predicates, ps...)
	return nimu
}

// SetInterfaceMode sets the "interface_mode" field.
func (nimu *NetInterfaceModeUpdate) SetInterfaceMode(s string) *NetInterfaceModeUpdate {
	nimu.mutation.SetInterfaceMode(s)
	return nimu
}

// AddModeIDs adds the "modes" edge to the NetInterface entity by IDs.
func (nimu *NetInterfaceModeUpdate) AddModeIDs(ids ...int) *NetInterfaceModeUpdate {
	nimu.mutation.AddModeIDs(ids...)
	return nimu
}

// AddModes adds the "modes" edges to the NetInterface entity.
func (nimu *NetInterfaceModeUpdate) AddModes(n ...*NetInterface) *NetInterfaceModeUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nimu.AddModeIDs(ids...)
}

// AddPoModeIDs adds the "po_modes" edge to the PortChannelInterface entity by IDs.
func (nimu *NetInterfaceModeUpdate) AddPoModeIDs(ids ...int) *NetInterfaceModeUpdate {
	nimu.mutation.AddPoModeIDs(ids...)
	return nimu
}

// AddPoModes adds the "po_modes" edges to the PortChannelInterface entity.
func (nimu *NetInterfaceModeUpdate) AddPoModes(p ...*PortChannelInterface) *NetInterfaceModeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nimu.AddPoModeIDs(ids...)
}

// Mutation returns the NetInterfaceModeMutation object of the builder.
func (nimu *NetInterfaceModeUpdate) Mutation() *NetInterfaceModeMutation {
	return nimu.mutation
}

// ClearModes clears all "modes" edges to the NetInterface entity.
func (nimu *NetInterfaceModeUpdate) ClearModes() *NetInterfaceModeUpdate {
	nimu.mutation.ClearModes()
	return nimu
}

// RemoveModeIDs removes the "modes" edge to NetInterface entities by IDs.
func (nimu *NetInterfaceModeUpdate) RemoveModeIDs(ids ...int) *NetInterfaceModeUpdate {
	nimu.mutation.RemoveModeIDs(ids...)
	return nimu
}

// RemoveModes removes "modes" edges to NetInterface entities.
func (nimu *NetInterfaceModeUpdate) RemoveModes(n ...*NetInterface) *NetInterfaceModeUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nimu.RemoveModeIDs(ids...)
}

// ClearPoModes clears all "po_modes" edges to the PortChannelInterface entity.
func (nimu *NetInterfaceModeUpdate) ClearPoModes() *NetInterfaceModeUpdate {
	nimu.mutation.ClearPoModes()
	return nimu
}

// RemovePoModeIDs removes the "po_modes" edge to PortChannelInterface entities by IDs.
func (nimu *NetInterfaceModeUpdate) RemovePoModeIDs(ids ...int) *NetInterfaceModeUpdate {
	nimu.mutation.RemovePoModeIDs(ids...)
	return nimu
}

// RemovePoModes removes "po_modes" edges to PortChannelInterface entities.
func (nimu *NetInterfaceModeUpdate) RemovePoModes(p ...*PortChannelInterface) *NetInterfaceModeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nimu.RemovePoModeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nimu *NetInterfaceModeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nimu.hooks) == 0 {
		if err = nimu.check(); err != nil {
			return 0, err
		}
		affected, err = nimu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetInterfaceModeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nimu.check(); err != nil {
				return 0, err
			}
			nimu.mutation = mutation
			affected, err = nimu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nimu.hooks) - 1; i >= 0; i-- {
			mut = nimu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nimu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nimu *NetInterfaceModeUpdate) SaveX(ctx context.Context) int {
	affected, err := nimu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nimu *NetInterfaceModeUpdate) Exec(ctx context.Context) error {
	_, err := nimu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nimu *NetInterfaceModeUpdate) ExecX(ctx context.Context) {
	if err := nimu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nimu *NetInterfaceModeUpdate) check() error {
	if v, ok := nimu.mutation.InterfaceMode(); ok {
		if err := netinterfacemode.InterfaceModeValidator(v); err != nil {
			return &ValidationError{Name: "interface_mode", err: fmt.Errorf("ent: validator failed for field \"interface_mode\": %w", err)}
		}
	}
	return nil
}

func (nimu *NetInterfaceModeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   netinterfacemode.Table,
			Columns: netinterfacemode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: netinterfacemode.FieldID,
			},
		},
	}
	if ps := nimu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nimu.mutation.InterfaceMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: netinterfacemode.FieldInterfaceMode,
		})
	}
	if nimu.mutation.ModesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacemode.ModesTable,
			Columns: []string{netinterfacemode.ModesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nimu.mutation.RemovedModesIDs(); len(nodes) > 0 && !nimu.mutation.ModesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacemode.ModesTable,
			Columns: []string{netinterfacemode.ModesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nimu.mutation.ModesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacemode.ModesTable,
			Columns: []string{netinterfacemode.ModesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nimu.mutation.PoModesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacemode.PoModesTable,
			Columns: []string{netinterfacemode.PoModesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portchannelinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nimu.mutation.RemovedPoModesIDs(); len(nodes) > 0 && !nimu.mutation.PoModesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacemode.PoModesTable,
			Columns: []string{netinterfacemode.PoModesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portchannelinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nimu.mutation.PoModesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacemode.PoModesTable,
			Columns: []string{netinterfacemode.PoModesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portchannelinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nimu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{netinterfacemode.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// NetInterfaceModeUpdateOne is the builder for updating a single NetInterfaceMode entity.
type NetInterfaceModeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NetInterfaceModeMutation
}

// SetInterfaceMode sets the "interface_mode" field.
func (nimuo *NetInterfaceModeUpdateOne) SetInterfaceMode(s string) *NetInterfaceModeUpdateOne {
	nimuo.mutation.SetInterfaceMode(s)
	return nimuo
}

// AddModeIDs adds the "modes" edge to the NetInterface entity by IDs.
func (nimuo *NetInterfaceModeUpdateOne) AddModeIDs(ids ...int) *NetInterfaceModeUpdateOne {
	nimuo.mutation.AddModeIDs(ids...)
	return nimuo
}

// AddModes adds the "modes" edges to the NetInterface entity.
func (nimuo *NetInterfaceModeUpdateOne) AddModes(n ...*NetInterface) *NetInterfaceModeUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nimuo.AddModeIDs(ids...)
}

// AddPoModeIDs adds the "po_modes" edge to the PortChannelInterface entity by IDs.
func (nimuo *NetInterfaceModeUpdateOne) AddPoModeIDs(ids ...int) *NetInterfaceModeUpdateOne {
	nimuo.mutation.AddPoModeIDs(ids...)
	return nimuo
}

// AddPoModes adds the "po_modes" edges to the PortChannelInterface entity.
func (nimuo *NetInterfaceModeUpdateOne) AddPoModes(p ...*PortChannelInterface) *NetInterfaceModeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nimuo.AddPoModeIDs(ids...)
}

// Mutation returns the NetInterfaceModeMutation object of the builder.
func (nimuo *NetInterfaceModeUpdateOne) Mutation() *NetInterfaceModeMutation {
	return nimuo.mutation
}

// ClearModes clears all "modes" edges to the NetInterface entity.
func (nimuo *NetInterfaceModeUpdateOne) ClearModes() *NetInterfaceModeUpdateOne {
	nimuo.mutation.ClearModes()
	return nimuo
}

// RemoveModeIDs removes the "modes" edge to NetInterface entities by IDs.
func (nimuo *NetInterfaceModeUpdateOne) RemoveModeIDs(ids ...int) *NetInterfaceModeUpdateOne {
	nimuo.mutation.RemoveModeIDs(ids...)
	return nimuo
}

// RemoveModes removes "modes" edges to NetInterface entities.
func (nimuo *NetInterfaceModeUpdateOne) RemoveModes(n ...*NetInterface) *NetInterfaceModeUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nimuo.RemoveModeIDs(ids...)
}

// ClearPoModes clears all "po_modes" edges to the PortChannelInterface entity.
func (nimuo *NetInterfaceModeUpdateOne) ClearPoModes() *NetInterfaceModeUpdateOne {
	nimuo.mutation.ClearPoModes()
	return nimuo
}

// RemovePoModeIDs removes the "po_modes" edge to PortChannelInterface entities by IDs.
func (nimuo *NetInterfaceModeUpdateOne) RemovePoModeIDs(ids ...int) *NetInterfaceModeUpdateOne {
	nimuo.mutation.RemovePoModeIDs(ids...)
	return nimuo
}

// RemovePoModes removes "po_modes" edges to PortChannelInterface entities.
func (nimuo *NetInterfaceModeUpdateOne) RemovePoModes(p ...*PortChannelInterface) *NetInterfaceModeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nimuo.RemovePoModeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nimuo *NetInterfaceModeUpdateOne) Select(field string, fields ...string) *NetInterfaceModeUpdateOne {
	nimuo.fields = append([]string{field}, fields...)
	return nimuo
}

// Save executes the query and returns the updated NetInterfaceMode entity.
func (nimuo *NetInterfaceModeUpdateOne) Save(ctx context.Context) (*NetInterfaceMode, error) {
	var (
		err  error
		node *NetInterfaceMode
	)
	if len(nimuo.hooks) == 0 {
		if err = nimuo.check(); err != nil {
			return nil, err
		}
		node, err = nimuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetInterfaceModeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nimuo.check(); err != nil {
				return nil, err
			}
			nimuo.mutation = mutation
			node, err = nimuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nimuo.hooks) - 1; i >= 0; i-- {
			mut = nimuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nimuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nimuo *NetInterfaceModeUpdateOne) SaveX(ctx context.Context) *NetInterfaceMode {
	node, err := nimuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nimuo *NetInterfaceModeUpdateOne) Exec(ctx context.Context) error {
	_, err := nimuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nimuo *NetInterfaceModeUpdateOne) ExecX(ctx context.Context) {
	if err := nimuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nimuo *NetInterfaceModeUpdateOne) check() error {
	if v, ok := nimuo.mutation.InterfaceMode(); ok {
		if err := netinterfacemode.InterfaceModeValidator(v); err != nil {
			return &ValidationError{Name: "interface_mode", err: fmt.Errorf("ent: validator failed for field \"interface_mode\": %w", err)}
		}
	}
	return nil
}

func (nimuo *NetInterfaceModeUpdateOne) sqlSave(ctx context.Context) (_node *NetInterfaceMode, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   netinterfacemode.Table,
			Columns: netinterfacemode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: netinterfacemode.FieldID,
			},
		},
	}
	id, ok := nimuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing NetInterfaceMode.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := nimuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, netinterfacemode.FieldID)
		for _, f := range fields {
			if !netinterfacemode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != netinterfacemode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nimuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nimuo.mutation.InterfaceMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: netinterfacemode.FieldInterfaceMode,
		})
	}
	if nimuo.mutation.ModesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacemode.ModesTable,
			Columns: []string{netinterfacemode.ModesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nimuo.mutation.RemovedModesIDs(); len(nodes) > 0 && !nimuo.mutation.ModesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacemode.ModesTable,
			Columns: []string{netinterfacemode.ModesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nimuo.mutation.ModesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacemode.ModesTable,
			Columns: []string{netinterfacemode.ModesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nimuo.mutation.PoModesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacemode.PoModesTable,
			Columns: []string{netinterfacemode.PoModesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portchannelinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nimuo.mutation.RemovedPoModesIDs(); len(nodes) > 0 && !nimuo.mutation.PoModesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacemode.PoModesTable,
			Columns: []string{netinterfacemode.PoModesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portchannelinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nimuo.mutation.PoModesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacemode.PoModesTable,
			Columns: []string{netinterfacemode.PoModesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portchannelinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NetInterfaceMode{config: nimuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nimuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{netinterfacemode.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
