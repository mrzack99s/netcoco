// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/device"
	"github.com/mrzack99s/netcoco/ent/ipstaticroutingtable"
	"github.com/mrzack99s/netcoco/ent/netinterface"
	"github.com/mrzack99s/netcoco/ent/predicate"
)

// IPStaticRoutingTableUpdate is the builder for updating IPStaticRoutingTable entities.
type IPStaticRoutingTableUpdate struct {
	config
	hooks    []Hook
	mutation *IPStaticRoutingTableMutation
}

// Where adds a new predicate for the IPStaticRoutingTableUpdate builder.
func (isrtu *IPStaticRoutingTableUpdate) Where(ps ...predicate.IPStaticRoutingTable) *IPStaticRoutingTableUpdate {
	isrtu.mutation.predicates = append(isrtu.mutation.predicates, ps...)
	return isrtu
}

// SetNetworkAddress sets the "network_address" field.
func (isrtu *IPStaticRoutingTableUpdate) SetNetworkAddress(s string) *IPStaticRoutingTableUpdate {
	isrtu.mutation.SetNetworkAddress(s)
	return isrtu
}

// SetSubnetMask sets the "subnet_mask" field.
func (isrtu *IPStaticRoutingTableUpdate) SetSubnetMask(s string) *IPStaticRoutingTableUpdate {
	isrtu.mutation.SetSubnetMask(s)
	return isrtu
}

// SetNextHop sets the "next_hop" field.
func (isrtu *IPStaticRoutingTableUpdate) SetNextHop(s string) *IPStaticRoutingTableUpdate {
	isrtu.mutation.SetNextHop(s)
	return isrtu
}

// SetBrdInterface sets the "brd_interface" field.
func (isrtu *IPStaticRoutingTableUpdate) SetBrdInterface(b bool) *IPStaticRoutingTableUpdate {
	isrtu.mutation.SetBrdInterface(b)
	return isrtu
}

// SetNillableBrdInterface sets the "brd_interface" field if the given value is not nil.
func (isrtu *IPStaticRoutingTableUpdate) SetNillableBrdInterface(b *bool) *IPStaticRoutingTableUpdate {
	if b != nil {
		isrtu.SetBrdInterface(*b)
	}
	return isrtu
}

// SetOnDeviceID sets the "on_device" edge to the Device entity by ID.
func (isrtu *IPStaticRoutingTableUpdate) SetOnDeviceID(id int) *IPStaticRoutingTableUpdate {
	isrtu.mutation.SetOnDeviceID(id)
	return isrtu
}

// SetNillableOnDeviceID sets the "on_device" edge to the Device entity by ID if the given value is not nil.
func (isrtu *IPStaticRoutingTableUpdate) SetNillableOnDeviceID(id *int) *IPStaticRoutingTableUpdate {
	if id != nil {
		isrtu = isrtu.SetOnDeviceID(*id)
	}
	return isrtu
}

// SetOnDevice sets the "on_device" edge to the Device entity.
func (isrtu *IPStaticRoutingTableUpdate) SetOnDevice(d *Device) *IPStaticRoutingTableUpdate {
	return isrtu.SetOnDeviceID(d.ID)
}

// SetOnInterfaceID sets the "on_interface" edge to the NetInterface entity by ID.
func (isrtu *IPStaticRoutingTableUpdate) SetOnInterfaceID(id int) *IPStaticRoutingTableUpdate {
	isrtu.mutation.SetOnInterfaceID(id)
	return isrtu
}

// SetNillableOnInterfaceID sets the "on_interface" edge to the NetInterface entity by ID if the given value is not nil.
func (isrtu *IPStaticRoutingTableUpdate) SetNillableOnInterfaceID(id *int) *IPStaticRoutingTableUpdate {
	if id != nil {
		isrtu = isrtu.SetOnInterfaceID(*id)
	}
	return isrtu
}

// SetOnInterface sets the "on_interface" edge to the NetInterface entity.
func (isrtu *IPStaticRoutingTableUpdate) SetOnInterface(n *NetInterface) *IPStaticRoutingTableUpdate {
	return isrtu.SetOnInterfaceID(n.ID)
}

// Mutation returns the IPStaticRoutingTableMutation object of the builder.
func (isrtu *IPStaticRoutingTableUpdate) Mutation() *IPStaticRoutingTableMutation {
	return isrtu.mutation
}

// ClearOnDevice clears the "on_device" edge to the Device entity.
func (isrtu *IPStaticRoutingTableUpdate) ClearOnDevice() *IPStaticRoutingTableUpdate {
	isrtu.mutation.ClearOnDevice()
	return isrtu
}

// ClearOnInterface clears the "on_interface" edge to the NetInterface entity.
func (isrtu *IPStaticRoutingTableUpdate) ClearOnInterface() *IPStaticRoutingTableUpdate {
	isrtu.mutation.ClearOnInterface()
	return isrtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (isrtu *IPStaticRoutingTableUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(isrtu.hooks) == 0 {
		if err = isrtu.check(); err != nil {
			return 0, err
		}
		affected, err = isrtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IPStaticRoutingTableMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = isrtu.check(); err != nil {
				return 0, err
			}
			isrtu.mutation = mutation
			affected, err = isrtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(isrtu.hooks) - 1; i >= 0; i-- {
			mut = isrtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, isrtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (isrtu *IPStaticRoutingTableUpdate) SaveX(ctx context.Context) int {
	affected, err := isrtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (isrtu *IPStaticRoutingTableUpdate) Exec(ctx context.Context) error {
	_, err := isrtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isrtu *IPStaticRoutingTableUpdate) ExecX(ctx context.Context) {
	if err := isrtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (isrtu *IPStaticRoutingTableUpdate) check() error {
	if v, ok := isrtu.mutation.NetworkAddress(); ok {
		if err := ipstaticroutingtable.NetworkAddressValidator(v); err != nil {
			return &ValidationError{Name: "network_address", err: fmt.Errorf("ent: validator failed for field \"network_address\": %w", err)}
		}
	}
	if v, ok := isrtu.mutation.SubnetMask(); ok {
		if err := ipstaticroutingtable.SubnetMaskValidator(v); err != nil {
			return &ValidationError{Name: "subnet_mask", err: fmt.Errorf("ent: validator failed for field \"subnet_mask\": %w", err)}
		}
	}
	if v, ok := isrtu.mutation.NextHop(); ok {
		if err := ipstaticroutingtable.NextHopValidator(v); err != nil {
			return &ValidationError{Name: "next_hop", err: fmt.Errorf("ent: validator failed for field \"next_hop\": %w", err)}
		}
	}
	return nil
}

func (isrtu *IPStaticRoutingTableUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ipstaticroutingtable.Table,
			Columns: ipstaticroutingtable.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ipstaticroutingtable.FieldID,
			},
		},
	}
	if ps := isrtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := isrtu.mutation.NetworkAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ipstaticroutingtable.FieldNetworkAddress,
		})
	}
	if value, ok := isrtu.mutation.SubnetMask(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ipstaticroutingtable.FieldSubnetMask,
		})
	}
	if value, ok := isrtu.mutation.NextHop(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ipstaticroutingtable.FieldNextHop,
		})
	}
	if value, ok := isrtu.mutation.BrdInterface(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: ipstaticroutingtable.FieldBrdInterface,
		})
	}
	if isrtu.mutation.OnDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipstaticroutingtable.OnDeviceTable,
			Columns: []string{ipstaticroutingtable.OnDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isrtu.mutation.OnDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipstaticroutingtable.OnDeviceTable,
			Columns: []string{ipstaticroutingtable.OnDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if isrtu.mutation.OnInterfaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipstaticroutingtable.OnInterfaceTable,
			Columns: []string{ipstaticroutingtable.OnInterfaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isrtu.mutation.OnInterfaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipstaticroutingtable.OnInterfaceTable,
			Columns: []string{ipstaticroutingtable.OnInterfaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, isrtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipstaticroutingtable.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// IPStaticRoutingTableUpdateOne is the builder for updating a single IPStaticRoutingTable entity.
type IPStaticRoutingTableUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IPStaticRoutingTableMutation
}

// SetNetworkAddress sets the "network_address" field.
func (isrtuo *IPStaticRoutingTableUpdateOne) SetNetworkAddress(s string) *IPStaticRoutingTableUpdateOne {
	isrtuo.mutation.SetNetworkAddress(s)
	return isrtuo
}

// SetSubnetMask sets the "subnet_mask" field.
func (isrtuo *IPStaticRoutingTableUpdateOne) SetSubnetMask(s string) *IPStaticRoutingTableUpdateOne {
	isrtuo.mutation.SetSubnetMask(s)
	return isrtuo
}

// SetNextHop sets the "next_hop" field.
func (isrtuo *IPStaticRoutingTableUpdateOne) SetNextHop(s string) *IPStaticRoutingTableUpdateOne {
	isrtuo.mutation.SetNextHop(s)
	return isrtuo
}

// SetBrdInterface sets the "brd_interface" field.
func (isrtuo *IPStaticRoutingTableUpdateOne) SetBrdInterface(b bool) *IPStaticRoutingTableUpdateOne {
	isrtuo.mutation.SetBrdInterface(b)
	return isrtuo
}

// SetNillableBrdInterface sets the "brd_interface" field if the given value is not nil.
func (isrtuo *IPStaticRoutingTableUpdateOne) SetNillableBrdInterface(b *bool) *IPStaticRoutingTableUpdateOne {
	if b != nil {
		isrtuo.SetBrdInterface(*b)
	}
	return isrtuo
}

// SetOnDeviceID sets the "on_device" edge to the Device entity by ID.
func (isrtuo *IPStaticRoutingTableUpdateOne) SetOnDeviceID(id int) *IPStaticRoutingTableUpdateOne {
	isrtuo.mutation.SetOnDeviceID(id)
	return isrtuo
}

// SetNillableOnDeviceID sets the "on_device" edge to the Device entity by ID if the given value is not nil.
func (isrtuo *IPStaticRoutingTableUpdateOne) SetNillableOnDeviceID(id *int) *IPStaticRoutingTableUpdateOne {
	if id != nil {
		isrtuo = isrtuo.SetOnDeviceID(*id)
	}
	return isrtuo
}

// SetOnDevice sets the "on_device" edge to the Device entity.
func (isrtuo *IPStaticRoutingTableUpdateOne) SetOnDevice(d *Device) *IPStaticRoutingTableUpdateOne {
	return isrtuo.SetOnDeviceID(d.ID)
}

// SetOnInterfaceID sets the "on_interface" edge to the NetInterface entity by ID.
func (isrtuo *IPStaticRoutingTableUpdateOne) SetOnInterfaceID(id int) *IPStaticRoutingTableUpdateOne {
	isrtuo.mutation.SetOnInterfaceID(id)
	return isrtuo
}

// SetNillableOnInterfaceID sets the "on_interface" edge to the NetInterface entity by ID if the given value is not nil.
func (isrtuo *IPStaticRoutingTableUpdateOne) SetNillableOnInterfaceID(id *int) *IPStaticRoutingTableUpdateOne {
	if id != nil {
		isrtuo = isrtuo.SetOnInterfaceID(*id)
	}
	return isrtuo
}

// SetOnInterface sets the "on_interface" edge to the NetInterface entity.
func (isrtuo *IPStaticRoutingTableUpdateOne) SetOnInterface(n *NetInterface) *IPStaticRoutingTableUpdateOne {
	return isrtuo.SetOnInterfaceID(n.ID)
}

// Mutation returns the IPStaticRoutingTableMutation object of the builder.
func (isrtuo *IPStaticRoutingTableUpdateOne) Mutation() *IPStaticRoutingTableMutation {
	return isrtuo.mutation
}

// ClearOnDevice clears the "on_device" edge to the Device entity.
func (isrtuo *IPStaticRoutingTableUpdateOne) ClearOnDevice() *IPStaticRoutingTableUpdateOne {
	isrtuo.mutation.ClearOnDevice()
	return isrtuo
}

// ClearOnInterface clears the "on_interface" edge to the NetInterface entity.
func (isrtuo *IPStaticRoutingTableUpdateOne) ClearOnInterface() *IPStaticRoutingTableUpdateOne {
	isrtuo.mutation.ClearOnInterface()
	return isrtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (isrtuo *IPStaticRoutingTableUpdateOne) Select(field string, fields ...string) *IPStaticRoutingTableUpdateOne {
	isrtuo.fields = append([]string{field}, fields...)
	return isrtuo
}

// Save executes the query and returns the updated IPStaticRoutingTable entity.
func (isrtuo *IPStaticRoutingTableUpdateOne) Save(ctx context.Context) (*IPStaticRoutingTable, error) {
	var (
		err  error
		node *IPStaticRoutingTable
	)
	if len(isrtuo.hooks) == 0 {
		if err = isrtuo.check(); err != nil {
			return nil, err
		}
		node, err = isrtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IPStaticRoutingTableMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = isrtuo.check(); err != nil {
				return nil, err
			}
			isrtuo.mutation = mutation
			node, err = isrtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(isrtuo.hooks) - 1; i >= 0; i-- {
			mut = isrtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, isrtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (isrtuo *IPStaticRoutingTableUpdateOne) SaveX(ctx context.Context) *IPStaticRoutingTable {
	node, err := isrtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (isrtuo *IPStaticRoutingTableUpdateOne) Exec(ctx context.Context) error {
	_, err := isrtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isrtuo *IPStaticRoutingTableUpdateOne) ExecX(ctx context.Context) {
	if err := isrtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (isrtuo *IPStaticRoutingTableUpdateOne) check() error {
	if v, ok := isrtuo.mutation.NetworkAddress(); ok {
		if err := ipstaticroutingtable.NetworkAddressValidator(v); err != nil {
			return &ValidationError{Name: "network_address", err: fmt.Errorf("ent: validator failed for field \"network_address\": %w", err)}
		}
	}
	if v, ok := isrtuo.mutation.SubnetMask(); ok {
		if err := ipstaticroutingtable.SubnetMaskValidator(v); err != nil {
			return &ValidationError{Name: "subnet_mask", err: fmt.Errorf("ent: validator failed for field \"subnet_mask\": %w", err)}
		}
	}
	if v, ok := isrtuo.mutation.NextHop(); ok {
		if err := ipstaticroutingtable.NextHopValidator(v); err != nil {
			return &ValidationError{Name: "next_hop", err: fmt.Errorf("ent: validator failed for field \"next_hop\": %w", err)}
		}
	}
	return nil
}

func (isrtuo *IPStaticRoutingTableUpdateOne) sqlSave(ctx context.Context) (_node *IPStaticRoutingTable, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ipstaticroutingtable.Table,
			Columns: ipstaticroutingtable.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ipstaticroutingtable.FieldID,
			},
		},
	}
	id, ok := isrtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing IPStaticRoutingTable.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := isrtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ipstaticroutingtable.FieldID)
		for _, f := range fields {
			if !ipstaticroutingtable.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ipstaticroutingtable.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := isrtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := isrtuo.mutation.NetworkAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ipstaticroutingtable.FieldNetworkAddress,
		})
	}
	if value, ok := isrtuo.mutation.SubnetMask(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ipstaticroutingtable.FieldSubnetMask,
		})
	}
	if value, ok := isrtuo.mutation.NextHop(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ipstaticroutingtable.FieldNextHop,
		})
	}
	if value, ok := isrtuo.mutation.BrdInterface(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: ipstaticroutingtable.FieldBrdInterface,
		})
	}
	if isrtuo.mutation.OnDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipstaticroutingtable.OnDeviceTable,
			Columns: []string{ipstaticroutingtable.OnDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isrtuo.mutation.OnDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipstaticroutingtable.OnDeviceTable,
			Columns: []string{ipstaticroutingtable.OnDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if isrtuo.mutation.OnInterfaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipstaticroutingtable.OnInterfaceTable,
			Columns: []string{ipstaticroutingtable.OnInterfaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isrtuo.mutation.OnInterfaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipstaticroutingtable.OnInterfaceTable,
			Columns: []string{ipstaticroutingtable.OnInterfaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IPStaticRoutingTable{config: isrtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, isrtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipstaticroutingtable.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
