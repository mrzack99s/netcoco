// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/netinterface"
	"github.com/mrzack99s/netcoco/ent/netinterfacemode"
	"github.com/mrzack99s/netcoco/ent/predicate"
)

// NetInterfaceModeQuery is the builder for querying NetInterfaceMode entities.
type NetInterfaceModeQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.NetInterfaceMode
	// eager-loading edges.
	withModes *NetInterfaceQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NetInterfaceModeQuery builder.
func (nimq *NetInterfaceModeQuery) Where(ps ...predicate.NetInterfaceMode) *NetInterfaceModeQuery {
	nimq.predicates = append(nimq.predicates, ps...)
	return nimq
}

// Limit adds a limit step to the query.
func (nimq *NetInterfaceModeQuery) Limit(limit int) *NetInterfaceModeQuery {
	nimq.limit = &limit
	return nimq
}

// Offset adds an offset step to the query.
func (nimq *NetInterfaceModeQuery) Offset(offset int) *NetInterfaceModeQuery {
	nimq.offset = &offset
	return nimq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (nimq *NetInterfaceModeQuery) Unique(unique bool) *NetInterfaceModeQuery {
	nimq.unique = &unique
	return nimq
}

// Order adds an order step to the query.
func (nimq *NetInterfaceModeQuery) Order(o ...OrderFunc) *NetInterfaceModeQuery {
	nimq.order = append(nimq.order, o...)
	return nimq
}

// QueryModes chains the current query on the "modes" edge.
func (nimq *NetInterfaceModeQuery) QueryModes() *NetInterfaceQuery {
	query := &NetInterfaceQuery{config: nimq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nimq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nimq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(netinterfacemode.Table, netinterfacemode.FieldID, selector),
			sqlgraph.To(netinterface.Table, netinterface.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, netinterfacemode.ModesTable, netinterfacemode.ModesColumn),
		)
		fromU = sqlgraph.SetNeighbors(nimq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NetInterfaceMode entity from the query.
// Returns a *NotFoundError when no NetInterfaceMode was found.
func (nimq *NetInterfaceModeQuery) First(ctx context.Context) (*NetInterfaceMode, error) {
	nodes, err := nimq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{netinterfacemode.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (nimq *NetInterfaceModeQuery) FirstX(ctx context.Context) *NetInterfaceMode {
	node, err := nimq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NetInterfaceMode ID from the query.
// Returns a *NotFoundError when no NetInterfaceMode ID was found.
func (nimq *NetInterfaceModeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nimq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{netinterfacemode.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (nimq *NetInterfaceModeQuery) FirstIDX(ctx context.Context) int {
	id, err := nimq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NetInterfaceMode entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one NetInterfaceMode entity is not found.
// Returns a *NotFoundError when no NetInterfaceMode entities are found.
func (nimq *NetInterfaceModeQuery) Only(ctx context.Context) (*NetInterfaceMode, error) {
	nodes, err := nimq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{netinterfacemode.Label}
	default:
		return nil, &NotSingularError{netinterfacemode.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (nimq *NetInterfaceModeQuery) OnlyX(ctx context.Context) *NetInterfaceMode {
	node, err := nimq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NetInterfaceMode ID in the query.
// Returns a *NotSingularError when exactly one NetInterfaceMode ID is not found.
// Returns a *NotFoundError when no entities are found.
func (nimq *NetInterfaceModeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nimq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{netinterfacemode.Label}
	default:
		err = &NotSingularError{netinterfacemode.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (nimq *NetInterfaceModeQuery) OnlyIDX(ctx context.Context) int {
	id, err := nimq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NetInterfaceModes.
func (nimq *NetInterfaceModeQuery) All(ctx context.Context) ([]*NetInterfaceMode, error) {
	if err := nimq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return nimq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (nimq *NetInterfaceModeQuery) AllX(ctx context.Context) []*NetInterfaceMode {
	nodes, err := nimq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NetInterfaceMode IDs.
func (nimq *NetInterfaceModeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := nimq.Select(netinterfacemode.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (nimq *NetInterfaceModeQuery) IDsX(ctx context.Context) []int {
	ids, err := nimq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (nimq *NetInterfaceModeQuery) Count(ctx context.Context) (int, error) {
	if err := nimq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return nimq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (nimq *NetInterfaceModeQuery) CountX(ctx context.Context) int {
	count, err := nimq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (nimq *NetInterfaceModeQuery) Exist(ctx context.Context) (bool, error) {
	if err := nimq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return nimq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (nimq *NetInterfaceModeQuery) ExistX(ctx context.Context) bool {
	exist, err := nimq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NetInterfaceModeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (nimq *NetInterfaceModeQuery) Clone() *NetInterfaceModeQuery {
	if nimq == nil {
		return nil
	}
	return &NetInterfaceModeQuery{
		config:     nimq.config,
		limit:      nimq.limit,
		offset:     nimq.offset,
		order:      append([]OrderFunc{}, nimq.order...),
		predicates: append([]predicate.NetInterfaceMode{}, nimq.predicates...),
		withModes:  nimq.withModes.Clone(),
		// clone intermediate query.
		sql:  nimq.sql.Clone(),
		path: nimq.path,
	}
}

// WithModes tells the query-builder to eager-load the nodes that are connected to
// the "modes" edge. The optional arguments are used to configure the query builder of the edge.
func (nimq *NetInterfaceModeQuery) WithModes(opts ...func(*NetInterfaceQuery)) *NetInterfaceModeQuery {
	query := &NetInterfaceQuery{config: nimq.config}
	for _, opt := range opts {
		opt(query)
	}
	nimq.withModes = query
	return nimq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		InterfaceMode string `json:"interface_mode,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NetInterfaceMode.Query().
//		GroupBy(netinterfacemode.FieldInterfaceMode).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (nimq *NetInterfaceModeQuery) GroupBy(field string, fields ...string) *NetInterfaceModeGroupBy {
	group := &NetInterfaceModeGroupBy{config: nimq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := nimq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return nimq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		InterfaceMode string `json:"interface_mode,omitempty"`
//	}
//
//	client.NetInterfaceMode.Query().
//		Select(netinterfacemode.FieldInterfaceMode).
//		Scan(ctx, &v)
//
func (nimq *NetInterfaceModeQuery) Select(field string, fields ...string) *NetInterfaceModeSelect {
	nimq.fields = append([]string{field}, fields...)
	return &NetInterfaceModeSelect{NetInterfaceModeQuery: nimq}
}

func (nimq *NetInterfaceModeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range nimq.fields {
		if !netinterfacemode.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if nimq.path != nil {
		prev, err := nimq.path(ctx)
		if err != nil {
			return err
		}
		nimq.sql = prev
	}
	return nil
}

func (nimq *NetInterfaceModeQuery) sqlAll(ctx context.Context) ([]*NetInterfaceMode, error) {
	var (
		nodes       = []*NetInterfaceMode{}
		_spec       = nimq.querySpec()
		loadedTypes = [1]bool{
			nimq.withModes != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &NetInterfaceMode{config: nimq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, nimq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := nimq.withModes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*NetInterfaceMode)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Modes = []*NetInterface{}
		}
		query.withFKs = true
		query.Where(predicate.NetInterface(func(s *sql.Selector) {
			s.Where(sql.InValues(netinterfacemode.ModesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.net_interface_mode_modes
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "net_interface_mode_modes" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "net_interface_mode_modes" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Modes = append(node.Edges.Modes, n)
		}
	}

	return nodes, nil
}

func (nimq *NetInterfaceModeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := nimq.querySpec()
	return sqlgraph.CountNodes(ctx, nimq.driver, _spec)
}

func (nimq *NetInterfaceModeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := nimq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (nimq *NetInterfaceModeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   netinterfacemode.Table,
			Columns: netinterfacemode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: netinterfacemode.FieldID,
			},
		},
		From:   nimq.sql,
		Unique: true,
	}
	if unique := nimq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := nimq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, netinterfacemode.FieldID)
		for i := range fields {
			if fields[i] != netinterfacemode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := nimq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := nimq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := nimq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := nimq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (nimq *NetInterfaceModeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(nimq.driver.Dialect())
	t1 := builder.Table(netinterfacemode.Table)
	selector := builder.Select(t1.Columns(netinterfacemode.Columns...)...).From(t1)
	if nimq.sql != nil {
		selector = nimq.sql
		selector.Select(selector.Columns(netinterfacemode.Columns...)...)
	}
	for _, p := range nimq.predicates {
		p(selector)
	}
	for _, p := range nimq.order {
		p(selector)
	}
	if offset := nimq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := nimq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NetInterfaceModeGroupBy is the group-by builder for NetInterfaceMode entities.
type NetInterfaceModeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (nimgb *NetInterfaceModeGroupBy) Aggregate(fns ...AggregateFunc) *NetInterfaceModeGroupBy {
	nimgb.fns = append(nimgb.fns, fns...)
	return nimgb
}

// Scan applies the group-by query and scans the result into the given value.
func (nimgb *NetInterfaceModeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := nimgb.path(ctx)
	if err != nil {
		return err
	}
	nimgb.sql = query
	return nimgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (nimgb *NetInterfaceModeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := nimgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (nimgb *NetInterfaceModeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(nimgb.fields) > 1 {
		return nil, errors.New("ent: NetInterfaceModeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := nimgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (nimgb *NetInterfaceModeGroupBy) StringsX(ctx context.Context) []string {
	v, err := nimgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (nimgb *NetInterfaceModeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = nimgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{netinterfacemode.Label}
	default:
		err = fmt.Errorf("ent: NetInterfaceModeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (nimgb *NetInterfaceModeGroupBy) StringX(ctx context.Context) string {
	v, err := nimgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (nimgb *NetInterfaceModeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(nimgb.fields) > 1 {
		return nil, errors.New("ent: NetInterfaceModeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := nimgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (nimgb *NetInterfaceModeGroupBy) IntsX(ctx context.Context) []int {
	v, err := nimgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (nimgb *NetInterfaceModeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = nimgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{netinterfacemode.Label}
	default:
		err = fmt.Errorf("ent: NetInterfaceModeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (nimgb *NetInterfaceModeGroupBy) IntX(ctx context.Context) int {
	v, err := nimgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (nimgb *NetInterfaceModeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(nimgb.fields) > 1 {
		return nil, errors.New("ent: NetInterfaceModeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := nimgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (nimgb *NetInterfaceModeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := nimgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (nimgb *NetInterfaceModeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = nimgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{netinterfacemode.Label}
	default:
		err = fmt.Errorf("ent: NetInterfaceModeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (nimgb *NetInterfaceModeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := nimgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (nimgb *NetInterfaceModeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(nimgb.fields) > 1 {
		return nil, errors.New("ent: NetInterfaceModeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := nimgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (nimgb *NetInterfaceModeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := nimgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (nimgb *NetInterfaceModeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = nimgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{netinterfacemode.Label}
	default:
		err = fmt.Errorf("ent: NetInterfaceModeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (nimgb *NetInterfaceModeGroupBy) BoolX(ctx context.Context) bool {
	v, err := nimgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (nimgb *NetInterfaceModeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range nimgb.fields {
		if !netinterfacemode.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := nimgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nimgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (nimgb *NetInterfaceModeGroupBy) sqlQuery() *sql.Selector {
	selector := nimgb.sql
	columns := make([]string, 0, len(nimgb.fields)+len(nimgb.fns))
	columns = append(columns, nimgb.fields...)
	for _, fn := range nimgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(nimgb.fields...)
}

// NetInterfaceModeSelect is the builder for selecting fields of NetInterfaceMode entities.
type NetInterfaceModeSelect struct {
	*NetInterfaceModeQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (nims *NetInterfaceModeSelect) Scan(ctx context.Context, v interface{}) error {
	if err := nims.prepareQuery(ctx); err != nil {
		return err
	}
	nims.sql = nims.NetInterfaceModeQuery.sqlQuery(ctx)
	return nims.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (nims *NetInterfaceModeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := nims.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (nims *NetInterfaceModeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(nims.fields) > 1 {
		return nil, errors.New("ent: NetInterfaceModeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := nims.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (nims *NetInterfaceModeSelect) StringsX(ctx context.Context) []string {
	v, err := nims.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (nims *NetInterfaceModeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = nims.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{netinterfacemode.Label}
	default:
		err = fmt.Errorf("ent: NetInterfaceModeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (nims *NetInterfaceModeSelect) StringX(ctx context.Context) string {
	v, err := nims.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (nims *NetInterfaceModeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(nims.fields) > 1 {
		return nil, errors.New("ent: NetInterfaceModeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := nims.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (nims *NetInterfaceModeSelect) IntsX(ctx context.Context) []int {
	v, err := nims.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (nims *NetInterfaceModeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = nims.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{netinterfacemode.Label}
	default:
		err = fmt.Errorf("ent: NetInterfaceModeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (nims *NetInterfaceModeSelect) IntX(ctx context.Context) int {
	v, err := nims.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (nims *NetInterfaceModeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(nims.fields) > 1 {
		return nil, errors.New("ent: NetInterfaceModeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := nims.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (nims *NetInterfaceModeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := nims.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (nims *NetInterfaceModeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = nims.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{netinterfacemode.Label}
	default:
		err = fmt.Errorf("ent: NetInterfaceModeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (nims *NetInterfaceModeSelect) Float64X(ctx context.Context) float64 {
	v, err := nims.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (nims *NetInterfaceModeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(nims.fields) > 1 {
		return nil, errors.New("ent: NetInterfaceModeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := nims.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (nims *NetInterfaceModeSelect) BoolsX(ctx context.Context) []bool {
	v, err := nims.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (nims *NetInterfaceModeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = nims.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{netinterfacemode.Label}
	default:
		err = fmt.Errorf("ent: NetInterfaceModeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (nims *NetInterfaceModeSelect) BoolX(ctx context.Context) bool {
	v, err := nims.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (nims *NetInterfaceModeSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := nims.sqlQuery().Query()
	if err := nims.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (nims *NetInterfaceModeSelect) sqlQuery() sql.Querier {
	selector := nims.sql
	selector.Select(selector.Columns(nims.fields...)...)
	return selector
}
