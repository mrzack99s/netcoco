// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/device"
	"github.com/mrzack99s/netcoco/ent/netinterface"
	"github.com/mrzack99s/netcoco/ent/predicate"
	"github.com/mrzack99s/netcoco/ent/vlan"
)

// VlanUpdate is the builder for updating Vlan entities.
type VlanUpdate struct {
	config
	hooks    []Hook
	mutation *VlanMutation
}

// Where adds a new predicate for the VlanUpdate builder.
func (vu *VlanUpdate) Where(ps ...predicate.Vlan) *VlanUpdate {
	vu.mutation.predicates = append(vu.mutation.predicates, ps...)
	return vu
}

// SetVlanID sets the "vlan_id" field.
func (vu *VlanUpdate) SetVlanID(i int) *VlanUpdate {
	vu.mutation.ResetVlanID()
	vu.mutation.SetVlanID(i)
	return vu
}

// AddVlanID adds i to the "vlan_id" field.
func (vu *VlanUpdate) AddVlanID(i int) *VlanUpdate {
	vu.mutation.AddVlanID(i)
	return vu
}

// AddVlanIDs adds the "vlans" edge to the NetInterface entity by IDs.
func (vu *VlanUpdate) AddVlanIDs(ids ...int) *VlanUpdate {
	vu.mutation.AddVlanIDs(ids...)
	return vu
}

// AddVlans adds the "vlans" edges to the NetInterface entity.
func (vu *VlanUpdate) AddVlans(n ...*NetInterface) *VlanUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return vu.AddVlanIDs(ids...)
}

// AddNativeVlanIDs adds the "native_vlan" edge to the NetInterface entity by IDs.
func (vu *VlanUpdate) AddNativeVlanIDs(ids ...int) *VlanUpdate {
	vu.mutation.AddNativeVlanIDs(ids...)
	return vu
}

// AddNativeVlan adds the "native_vlan" edges to the NetInterface entity.
func (vu *VlanUpdate) AddNativeVlan(n ...*NetInterface) *VlanUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return vu.AddNativeVlanIDs(ids...)
}

// AddOnDeviceIDs adds the "on_device" edge to the Device entity by IDs.
func (vu *VlanUpdate) AddOnDeviceIDs(ids ...int) *VlanUpdate {
	vu.mutation.AddOnDeviceIDs(ids...)
	return vu
}

// AddOnDevice adds the "on_device" edges to the Device entity.
func (vu *VlanUpdate) AddOnDevice(d ...*Device) *VlanUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return vu.AddOnDeviceIDs(ids...)
}

// Mutation returns the VlanMutation object of the builder.
func (vu *VlanUpdate) Mutation() *VlanMutation {
	return vu.mutation
}

// ClearVlans clears all "vlans" edges to the NetInterface entity.
func (vu *VlanUpdate) ClearVlans() *VlanUpdate {
	vu.mutation.ClearVlans()
	return vu
}

// RemoveVlanIDs removes the "vlans" edge to NetInterface entities by IDs.
func (vu *VlanUpdate) RemoveVlanIDs(ids ...int) *VlanUpdate {
	vu.mutation.RemoveVlanIDs(ids...)
	return vu
}

// RemoveVlans removes "vlans" edges to NetInterface entities.
func (vu *VlanUpdate) RemoveVlans(n ...*NetInterface) *VlanUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return vu.RemoveVlanIDs(ids...)
}

// ClearNativeVlan clears all "native_vlan" edges to the NetInterface entity.
func (vu *VlanUpdate) ClearNativeVlan() *VlanUpdate {
	vu.mutation.ClearNativeVlan()
	return vu
}

// RemoveNativeVlanIDs removes the "native_vlan" edge to NetInterface entities by IDs.
func (vu *VlanUpdate) RemoveNativeVlanIDs(ids ...int) *VlanUpdate {
	vu.mutation.RemoveNativeVlanIDs(ids...)
	return vu
}

// RemoveNativeVlan removes "native_vlan" edges to NetInterface entities.
func (vu *VlanUpdate) RemoveNativeVlan(n ...*NetInterface) *VlanUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return vu.RemoveNativeVlanIDs(ids...)
}

// ClearOnDevice clears all "on_device" edges to the Device entity.
func (vu *VlanUpdate) ClearOnDevice() *VlanUpdate {
	vu.mutation.ClearOnDevice()
	return vu
}

// RemoveOnDeviceIDs removes the "on_device" edge to Device entities by IDs.
func (vu *VlanUpdate) RemoveOnDeviceIDs(ids ...int) *VlanUpdate {
	vu.mutation.RemoveOnDeviceIDs(ids...)
	return vu
}

// RemoveOnDevice removes "on_device" edges to Device entities.
func (vu *VlanUpdate) RemoveOnDevice(d ...*Device) *VlanUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return vu.RemoveOnDeviceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VlanUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vu.hooks) == 0 {
		if err = vu.check(); err != nil {
			return 0, err
		}
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VlanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vu.check(); err != nil {
				return 0, err
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VlanUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VlanUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VlanUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VlanUpdate) check() error {
	if v, ok := vu.mutation.VlanID(); ok {
		if err := vlan.VlanIDValidator(v); err != nil {
			return &ValidationError{Name: "vlan_id", err: fmt.Errorf("ent: validator failed for field \"vlan_id\": %w", err)}
		}
	}
	return nil
}

func (vu *VlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vlan.Table,
			Columns: vlan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vlan.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.VlanID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vlan.FieldVlanID,
		})
	}
	if value, ok := vu.mutation.AddedVlanID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vlan.FieldVlanID,
		})
	}
	if vu.mutation.VlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vlan.VlansTable,
			Columns: vlan.VlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedVlansIDs(); len(nodes) > 0 && !vu.mutation.VlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vlan.VlansTable,
			Columns: vlan.VlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.VlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vlan.VlansTable,
			Columns: vlan.VlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.NativeVlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vlan.NativeVlanTable,
			Columns: []string{vlan.NativeVlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedNativeVlanIDs(); len(nodes) > 0 && !vu.mutation.NativeVlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vlan.NativeVlanTable,
			Columns: []string{vlan.NativeVlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.NativeVlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vlan.NativeVlanTable,
			Columns: []string{vlan.NativeVlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.OnDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vlan.OnDeviceTable,
			Columns: vlan.OnDevicePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedOnDeviceIDs(); len(nodes) > 0 && !vu.mutation.OnDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vlan.OnDeviceTable,
			Columns: vlan.OnDevicePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.OnDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vlan.OnDeviceTable,
			Columns: vlan.OnDevicePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vlan.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// VlanUpdateOne is the builder for updating a single Vlan entity.
type VlanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VlanMutation
}

// SetVlanID sets the "vlan_id" field.
func (vuo *VlanUpdateOne) SetVlanID(i int) *VlanUpdateOne {
	vuo.mutation.ResetVlanID()
	vuo.mutation.SetVlanID(i)
	return vuo
}

// AddVlanID adds i to the "vlan_id" field.
func (vuo *VlanUpdateOne) AddVlanID(i int) *VlanUpdateOne {
	vuo.mutation.AddVlanID(i)
	return vuo
}

// AddVlanIDs adds the "vlans" edge to the NetInterface entity by IDs.
func (vuo *VlanUpdateOne) AddVlanIDs(ids ...int) *VlanUpdateOne {
	vuo.mutation.AddVlanIDs(ids...)
	return vuo
}

// AddVlans adds the "vlans" edges to the NetInterface entity.
func (vuo *VlanUpdateOne) AddVlans(n ...*NetInterface) *VlanUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return vuo.AddVlanIDs(ids...)
}

// AddNativeVlanIDs adds the "native_vlan" edge to the NetInterface entity by IDs.
func (vuo *VlanUpdateOne) AddNativeVlanIDs(ids ...int) *VlanUpdateOne {
	vuo.mutation.AddNativeVlanIDs(ids...)
	return vuo
}

// AddNativeVlan adds the "native_vlan" edges to the NetInterface entity.
func (vuo *VlanUpdateOne) AddNativeVlan(n ...*NetInterface) *VlanUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return vuo.AddNativeVlanIDs(ids...)
}

// AddOnDeviceIDs adds the "on_device" edge to the Device entity by IDs.
func (vuo *VlanUpdateOne) AddOnDeviceIDs(ids ...int) *VlanUpdateOne {
	vuo.mutation.AddOnDeviceIDs(ids...)
	return vuo
}

// AddOnDevice adds the "on_device" edges to the Device entity.
func (vuo *VlanUpdateOne) AddOnDevice(d ...*Device) *VlanUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return vuo.AddOnDeviceIDs(ids...)
}

// Mutation returns the VlanMutation object of the builder.
func (vuo *VlanUpdateOne) Mutation() *VlanMutation {
	return vuo.mutation
}

// ClearVlans clears all "vlans" edges to the NetInterface entity.
func (vuo *VlanUpdateOne) ClearVlans() *VlanUpdateOne {
	vuo.mutation.ClearVlans()
	return vuo
}

// RemoveVlanIDs removes the "vlans" edge to NetInterface entities by IDs.
func (vuo *VlanUpdateOne) RemoveVlanIDs(ids ...int) *VlanUpdateOne {
	vuo.mutation.RemoveVlanIDs(ids...)
	return vuo
}

// RemoveVlans removes "vlans" edges to NetInterface entities.
func (vuo *VlanUpdateOne) RemoveVlans(n ...*NetInterface) *VlanUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return vuo.RemoveVlanIDs(ids...)
}

// ClearNativeVlan clears all "native_vlan" edges to the NetInterface entity.
func (vuo *VlanUpdateOne) ClearNativeVlan() *VlanUpdateOne {
	vuo.mutation.ClearNativeVlan()
	return vuo
}

// RemoveNativeVlanIDs removes the "native_vlan" edge to NetInterface entities by IDs.
func (vuo *VlanUpdateOne) RemoveNativeVlanIDs(ids ...int) *VlanUpdateOne {
	vuo.mutation.RemoveNativeVlanIDs(ids...)
	return vuo
}

// RemoveNativeVlan removes "native_vlan" edges to NetInterface entities.
func (vuo *VlanUpdateOne) RemoveNativeVlan(n ...*NetInterface) *VlanUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return vuo.RemoveNativeVlanIDs(ids...)
}

// ClearOnDevice clears all "on_device" edges to the Device entity.
func (vuo *VlanUpdateOne) ClearOnDevice() *VlanUpdateOne {
	vuo.mutation.ClearOnDevice()
	return vuo
}

// RemoveOnDeviceIDs removes the "on_device" edge to Device entities by IDs.
func (vuo *VlanUpdateOne) RemoveOnDeviceIDs(ids ...int) *VlanUpdateOne {
	vuo.mutation.RemoveOnDeviceIDs(ids...)
	return vuo
}

// RemoveOnDevice removes "on_device" edges to Device entities.
func (vuo *VlanUpdateOne) RemoveOnDevice(d ...*Device) *VlanUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return vuo.RemoveOnDeviceIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VlanUpdateOne) Select(field string, fields ...string) *VlanUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vlan entity.
func (vuo *VlanUpdateOne) Save(ctx context.Context) (*Vlan, error) {
	var (
		err  error
		node *Vlan
	)
	if len(vuo.hooks) == 0 {
		if err = vuo.check(); err != nil {
			return nil, err
		}
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VlanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vuo.check(); err != nil {
				return nil, err
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VlanUpdateOne) SaveX(ctx context.Context) *Vlan {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VlanUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VlanUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VlanUpdateOne) check() error {
	if v, ok := vuo.mutation.VlanID(); ok {
		if err := vlan.VlanIDValidator(v); err != nil {
			return &ValidationError{Name: "vlan_id", err: fmt.Errorf("ent: validator failed for field \"vlan_id\": %w", err)}
		}
	}
	return nil
}

func (vuo *VlanUpdateOne) sqlSave(ctx context.Context) (_node *Vlan, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vlan.Table,
			Columns: vlan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vlan.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Vlan.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vlan.FieldID)
		for _, f := range fields {
			if !vlan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vlan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.VlanID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vlan.FieldVlanID,
		})
	}
	if value, ok := vuo.mutation.AddedVlanID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vlan.FieldVlanID,
		})
	}
	if vuo.mutation.VlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vlan.VlansTable,
			Columns: vlan.VlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedVlansIDs(); len(nodes) > 0 && !vuo.mutation.VlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vlan.VlansTable,
			Columns: vlan.VlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.VlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vlan.VlansTable,
			Columns: vlan.VlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.NativeVlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vlan.NativeVlanTable,
			Columns: []string{vlan.NativeVlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedNativeVlanIDs(); len(nodes) > 0 && !vuo.mutation.NativeVlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vlan.NativeVlanTable,
			Columns: []string{vlan.NativeVlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.NativeVlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vlan.NativeVlanTable,
			Columns: []string{vlan.NativeVlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.OnDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vlan.OnDeviceTable,
			Columns: vlan.OnDevicePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedOnDeviceIDs(); len(nodes) > 0 && !vuo.mutation.OnDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vlan.OnDeviceTable,
			Columns: vlan.OnDevicePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.OnDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vlan.OnDeviceTable,
			Columns: vlan.OnDevicePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vlan{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vlan.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
