// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/mrzack99s/netcoco/ent/device"
	"github.com/mrzack99s/netcoco/ent/netinterfacemode"
	"github.com/mrzack99s/netcoco/ent/portchannelinterface"
	"github.com/mrzack99s/netcoco/ent/vlan"
)

// PortChannelInterface is the model entity for the PortChannelInterface schema.
type PortChannelInterface struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PoInterfaceID holds the value of the "po_interface_id" field.
	PoInterfaceID int `json:"po_interface_id,omitempty"`
	// PoInterfaceShutdown holds the value of the "po_interface_shutdown" field.
	PoInterfaceShutdown bool `json:"po_interface_shutdown,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PortChannelInterfaceQuery when eager-loading is set.
	Edges                       PortChannelInterfaceEdges `json:"edges"`
	device_po_interfaces        *int
	net_interface_mode_po_modes *int
	vlan_po_native_vlan         *int
}

// PortChannelInterfaceEdges holds the relations/edges for other nodes in the graph.
type PortChannelInterfaceEdges struct {
	// Mode holds the value of the mode edge.
	Mode *NetInterfaceMode `json:"mode,omitempty"`
	// HaveVlans holds the value of the have_vlans edge.
	HaveVlans []*Vlan `json:"have_vlans,omitempty"`
	// NativeOnVlan holds the value of the native_on_vlan edge.
	NativeOnVlan *Vlan `json:"native_on_vlan,omitempty"`
	// OnDevice holds the value of the on_device edge.
	OnDevice *Device `json:"on_device,omitempty"`
	// Interfaces holds the value of the interfaces edge.
	Interfaces []*NetInterface `json:"interfaces,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ModeOrErr returns the Mode value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PortChannelInterfaceEdges) ModeOrErr() (*NetInterfaceMode, error) {
	if e.loadedTypes[0] {
		if e.Mode == nil {
			// The edge mode was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: netinterfacemode.Label}
		}
		return e.Mode, nil
	}
	return nil, &NotLoadedError{edge: "mode"}
}

// HaveVlansOrErr returns the HaveVlans value or an error if the edge
// was not loaded in eager-loading.
func (e PortChannelInterfaceEdges) HaveVlansOrErr() ([]*Vlan, error) {
	if e.loadedTypes[1] {
		return e.HaveVlans, nil
	}
	return nil, &NotLoadedError{edge: "have_vlans"}
}

// NativeOnVlanOrErr returns the NativeOnVlan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PortChannelInterfaceEdges) NativeOnVlanOrErr() (*Vlan, error) {
	if e.loadedTypes[2] {
		if e.NativeOnVlan == nil {
			// The edge native_on_vlan was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: vlan.Label}
		}
		return e.NativeOnVlan, nil
	}
	return nil, &NotLoadedError{edge: "native_on_vlan"}
}

// OnDeviceOrErr returns the OnDevice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PortChannelInterfaceEdges) OnDeviceOrErr() (*Device, error) {
	if e.loadedTypes[3] {
		if e.OnDevice == nil {
			// The edge on_device was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: device.Label}
		}
		return e.OnDevice, nil
	}
	return nil, &NotLoadedError{edge: "on_device"}
}

// InterfacesOrErr returns the Interfaces value or an error if the edge
// was not loaded in eager-loading.
func (e PortChannelInterfaceEdges) InterfacesOrErr() ([]*NetInterface, error) {
	if e.loadedTypes[4] {
		return e.Interfaces, nil
	}
	return nil, &NotLoadedError{edge: "interfaces"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PortChannelInterface) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case portchannelinterface.FieldPoInterfaceShutdown:
			values[i] = new(sql.NullBool)
		case portchannelinterface.FieldID, portchannelinterface.FieldPoInterfaceID:
			values[i] = new(sql.NullInt64)
		case portchannelinterface.ForeignKeys[0]: // device_po_interfaces
			values[i] = new(sql.NullInt64)
		case portchannelinterface.ForeignKeys[1]: // net_interface_mode_po_modes
			values[i] = new(sql.NullInt64)
		case portchannelinterface.ForeignKeys[2]: // vlan_po_native_vlan
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PortChannelInterface", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PortChannelInterface fields.
func (pci *PortChannelInterface) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case portchannelinterface.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pci.ID = int(value.Int64)
		case portchannelinterface.FieldPoInterfaceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field po_interface_id", values[i])
			} else if value.Valid {
				pci.PoInterfaceID = int(value.Int64)
			}
		case portchannelinterface.FieldPoInterfaceShutdown:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field po_interface_shutdown", values[i])
			} else if value.Valid {
				pci.PoInterfaceShutdown = value.Bool
			}
		case portchannelinterface.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field device_po_interfaces", value)
			} else if value.Valid {
				pci.device_po_interfaces = new(int)
				*pci.device_po_interfaces = int(value.Int64)
			}
		case portchannelinterface.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field net_interface_mode_po_modes", value)
			} else if value.Valid {
				pci.net_interface_mode_po_modes = new(int)
				*pci.net_interface_mode_po_modes = int(value.Int64)
			}
		case portchannelinterface.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vlan_po_native_vlan", value)
			} else if value.Valid {
				pci.vlan_po_native_vlan = new(int)
				*pci.vlan_po_native_vlan = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMode queries the "mode" edge of the PortChannelInterface entity.
func (pci *PortChannelInterface) QueryMode() *NetInterfaceModeQuery {
	return (&PortChannelInterfaceClient{config: pci.config}).QueryMode(pci)
}

// QueryHaveVlans queries the "have_vlans" edge of the PortChannelInterface entity.
func (pci *PortChannelInterface) QueryHaveVlans() *VlanQuery {
	return (&PortChannelInterfaceClient{config: pci.config}).QueryHaveVlans(pci)
}

// QueryNativeOnVlan queries the "native_on_vlan" edge of the PortChannelInterface entity.
func (pci *PortChannelInterface) QueryNativeOnVlan() *VlanQuery {
	return (&PortChannelInterfaceClient{config: pci.config}).QueryNativeOnVlan(pci)
}

// QueryOnDevice queries the "on_device" edge of the PortChannelInterface entity.
func (pci *PortChannelInterface) QueryOnDevice() *DeviceQuery {
	return (&PortChannelInterfaceClient{config: pci.config}).QueryOnDevice(pci)
}

// QueryInterfaces queries the "interfaces" edge of the PortChannelInterface entity.
func (pci *PortChannelInterface) QueryInterfaces() *NetInterfaceQuery {
	return (&PortChannelInterfaceClient{config: pci.config}).QueryInterfaces(pci)
}

// Update returns a builder for updating this PortChannelInterface.
// Note that you need to call PortChannelInterface.Unwrap() before calling this method if this PortChannelInterface
// was returned from a transaction, and the transaction was committed or rolled back.
func (pci *PortChannelInterface) Update() *PortChannelInterfaceUpdateOne {
	return (&PortChannelInterfaceClient{config: pci.config}).UpdateOne(pci)
}

// Unwrap unwraps the PortChannelInterface entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pci *PortChannelInterface) Unwrap() *PortChannelInterface {
	tx, ok := pci.config.driver.(*txDriver)
	if !ok {
		panic("ent: PortChannelInterface is not a transactional entity")
	}
	pci.config.driver = tx.drv
	return pci
}

// String implements the fmt.Stringer.
func (pci *PortChannelInterface) String() string {
	var builder strings.Builder
	builder.WriteString("PortChannelInterface(")
	builder.WriteString(fmt.Sprintf("id=%v", pci.ID))
	builder.WriteString(", po_interface_id=")
	builder.WriteString(fmt.Sprintf("%v", pci.PoInterfaceID))
	builder.WriteString(", po_interface_shutdown=")
	builder.WriteString(fmt.Sprintf("%v", pci.PoInterfaceShutdown))
	builder.WriteByte(')')
	return builder.String()
}

// PortChannelInterfaces is a parsable slice of PortChannelInterface.
type PortChannelInterfaces []*PortChannelInterface

func (pci PortChannelInterfaces) config(cfg config) {
	for _i := range pci {
		pci[_i].config = cfg
	}
}
