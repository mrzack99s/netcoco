// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/device"
	"github.com/mrzack99s/netcoco/ent/ipaddress"
	"github.com/mrzack99s/netcoco/ent/netinterface"
	"github.com/mrzack99s/netcoco/ent/netinterfacelayer"
	"github.com/mrzack99s/netcoco/ent/netinterfacemode"
	"github.com/mrzack99s/netcoco/ent/portchannelinterface"
	"github.com/mrzack99s/netcoco/ent/predicate"
	"github.com/mrzack99s/netcoco/ent/vlan"
)

// PortChannelInterfaceQuery is the builder for querying PortChannelInterface entities.
type PortChannelInterfaceQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.PortChannelInterface
	// eager-loading edges.
	withMode         *NetInterfaceModeQuery
	withOnLayer      *NetInterfaceLayerQuery
	withHaveVlans    *VlanQuery
	withNativeOnVlan *VlanQuery
	withOnDevice     *DeviceQuery
	withOnIPAddress  *IPAddressQuery
	withInterfaces   *NetInterfaceQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PortChannelInterfaceQuery builder.
func (pciq *PortChannelInterfaceQuery) Where(ps ...predicate.PortChannelInterface) *PortChannelInterfaceQuery {
	pciq.predicates = append(pciq.predicates, ps...)
	return pciq
}

// Limit adds a limit step to the query.
func (pciq *PortChannelInterfaceQuery) Limit(limit int) *PortChannelInterfaceQuery {
	pciq.limit = &limit
	return pciq
}

// Offset adds an offset step to the query.
func (pciq *PortChannelInterfaceQuery) Offset(offset int) *PortChannelInterfaceQuery {
	pciq.offset = &offset
	return pciq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pciq *PortChannelInterfaceQuery) Unique(unique bool) *PortChannelInterfaceQuery {
	pciq.unique = &unique
	return pciq
}

// Order adds an order step to the query.
func (pciq *PortChannelInterfaceQuery) Order(o ...OrderFunc) *PortChannelInterfaceQuery {
	pciq.order = append(pciq.order, o...)
	return pciq
}

// QueryMode chains the current query on the "mode" edge.
func (pciq *PortChannelInterfaceQuery) QueryMode() *NetInterfaceModeQuery {
	query := &NetInterfaceModeQuery{config: pciq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(portchannelinterface.Table, portchannelinterface.FieldID, selector),
			sqlgraph.To(netinterfacemode.Table, netinterfacemode.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, portchannelinterface.ModeTable, portchannelinterface.ModeColumn),
		)
		fromU = sqlgraph.SetNeighbors(pciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOnLayer chains the current query on the "on_layer" edge.
func (pciq *PortChannelInterfaceQuery) QueryOnLayer() *NetInterfaceLayerQuery {
	query := &NetInterfaceLayerQuery{config: pciq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(portchannelinterface.Table, portchannelinterface.FieldID, selector),
			sqlgraph.To(netinterfacelayer.Table, netinterfacelayer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, portchannelinterface.OnLayerTable, portchannelinterface.OnLayerColumn),
		)
		fromU = sqlgraph.SetNeighbors(pciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHaveVlans chains the current query on the "have_vlans" edge.
func (pciq *PortChannelInterfaceQuery) QueryHaveVlans() *VlanQuery {
	query := &VlanQuery{config: pciq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(portchannelinterface.Table, portchannelinterface.FieldID, selector),
			sqlgraph.To(vlan.Table, vlan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, portchannelinterface.HaveVlansTable, portchannelinterface.HaveVlansPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNativeOnVlan chains the current query on the "native_on_vlan" edge.
func (pciq *PortChannelInterfaceQuery) QueryNativeOnVlan() *VlanQuery {
	query := &VlanQuery{config: pciq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(portchannelinterface.Table, portchannelinterface.FieldID, selector),
			sqlgraph.To(vlan.Table, vlan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, portchannelinterface.NativeOnVlanTable, portchannelinterface.NativeOnVlanColumn),
		)
		fromU = sqlgraph.SetNeighbors(pciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOnDevice chains the current query on the "on_device" edge.
func (pciq *PortChannelInterfaceQuery) QueryOnDevice() *DeviceQuery {
	query := &DeviceQuery{config: pciq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(portchannelinterface.Table, portchannelinterface.FieldID, selector),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, portchannelinterface.OnDeviceTable, portchannelinterface.OnDeviceColumn),
		)
		fromU = sqlgraph.SetNeighbors(pciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOnIPAddress chains the current query on the "on_ip_address" edge.
func (pciq *PortChannelInterfaceQuery) QueryOnIPAddress() *IPAddressQuery {
	query := &IPAddressQuery{config: pciq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(portchannelinterface.Table, portchannelinterface.FieldID, selector),
			sqlgraph.To(ipaddress.Table, ipaddress.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, portchannelinterface.OnIPAddressTable, portchannelinterface.OnIPAddressColumn),
		)
		fromU = sqlgraph.SetNeighbors(pciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInterfaces chains the current query on the "interfaces" edge.
func (pciq *PortChannelInterfaceQuery) QueryInterfaces() *NetInterfaceQuery {
	query := &NetInterfaceQuery{config: pciq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(portchannelinterface.Table, portchannelinterface.FieldID, selector),
			sqlgraph.To(netinterface.Table, netinterface.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, portchannelinterface.InterfacesTable, portchannelinterface.InterfacesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PortChannelInterface entity from the query.
// Returns a *NotFoundError when no PortChannelInterface was found.
func (pciq *PortChannelInterfaceQuery) First(ctx context.Context) (*PortChannelInterface, error) {
	nodes, err := pciq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{portchannelinterface.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pciq *PortChannelInterfaceQuery) FirstX(ctx context.Context) *PortChannelInterface {
	node, err := pciq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PortChannelInterface ID from the query.
// Returns a *NotFoundError when no PortChannelInterface ID was found.
func (pciq *PortChannelInterfaceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pciq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{portchannelinterface.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pciq *PortChannelInterfaceQuery) FirstIDX(ctx context.Context) int {
	id, err := pciq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PortChannelInterface entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one PortChannelInterface entity is not found.
// Returns a *NotFoundError when no PortChannelInterface entities are found.
func (pciq *PortChannelInterfaceQuery) Only(ctx context.Context) (*PortChannelInterface, error) {
	nodes, err := pciq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{portchannelinterface.Label}
	default:
		return nil, &NotSingularError{portchannelinterface.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pciq *PortChannelInterfaceQuery) OnlyX(ctx context.Context) *PortChannelInterface {
	node, err := pciq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PortChannelInterface ID in the query.
// Returns a *NotSingularError when exactly one PortChannelInterface ID is not found.
// Returns a *NotFoundError when no entities are found.
func (pciq *PortChannelInterfaceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pciq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{portchannelinterface.Label}
	default:
		err = &NotSingularError{portchannelinterface.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pciq *PortChannelInterfaceQuery) OnlyIDX(ctx context.Context) int {
	id, err := pciq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PortChannelInterfaces.
func (pciq *PortChannelInterfaceQuery) All(ctx context.Context) ([]*PortChannelInterface, error) {
	if err := pciq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pciq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pciq *PortChannelInterfaceQuery) AllX(ctx context.Context) []*PortChannelInterface {
	nodes, err := pciq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PortChannelInterface IDs.
func (pciq *PortChannelInterfaceQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := pciq.Select(portchannelinterface.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pciq *PortChannelInterfaceQuery) IDsX(ctx context.Context) []int {
	ids, err := pciq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pciq *PortChannelInterfaceQuery) Count(ctx context.Context) (int, error) {
	if err := pciq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pciq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pciq *PortChannelInterfaceQuery) CountX(ctx context.Context) int {
	count, err := pciq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pciq *PortChannelInterfaceQuery) Exist(ctx context.Context) (bool, error) {
	if err := pciq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pciq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pciq *PortChannelInterfaceQuery) ExistX(ctx context.Context) bool {
	exist, err := pciq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PortChannelInterfaceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pciq *PortChannelInterfaceQuery) Clone() *PortChannelInterfaceQuery {
	if pciq == nil {
		return nil
	}
	return &PortChannelInterfaceQuery{
		config:           pciq.config,
		limit:            pciq.limit,
		offset:           pciq.offset,
		order:            append([]OrderFunc{}, pciq.order...),
		predicates:       append([]predicate.PortChannelInterface{}, pciq.predicates...),
		withMode:         pciq.withMode.Clone(),
		withOnLayer:      pciq.withOnLayer.Clone(),
		withHaveVlans:    pciq.withHaveVlans.Clone(),
		withNativeOnVlan: pciq.withNativeOnVlan.Clone(),
		withOnDevice:     pciq.withOnDevice.Clone(),
		withOnIPAddress:  pciq.withOnIPAddress.Clone(),
		withInterfaces:   pciq.withInterfaces.Clone(),
		// clone intermediate query.
		sql:  pciq.sql.Clone(),
		path: pciq.path,
	}
}

// WithMode tells the query-builder to eager-load the nodes that are connected to
// the "mode" edge. The optional arguments are used to configure the query builder of the edge.
func (pciq *PortChannelInterfaceQuery) WithMode(opts ...func(*NetInterfaceModeQuery)) *PortChannelInterfaceQuery {
	query := &NetInterfaceModeQuery{config: pciq.config}
	for _, opt := range opts {
		opt(query)
	}
	pciq.withMode = query
	return pciq
}

// WithOnLayer tells the query-builder to eager-load the nodes that are connected to
// the "on_layer" edge. The optional arguments are used to configure the query builder of the edge.
func (pciq *PortChannelInterfaceQuery) WithOnLayer(opts ...func(*NetInterfaceLayerQuery)) *PortChannelInterfaceQuery {
	query := &NetInterfaceLayerQuery{config: pciq.config}
	for _, opt := range opts {
		opt(query)
	}
	pciq.withOnLayer = query
	return pciq
}

// WithHaveVlans tells the query-builder to eager-load the nodes that are connected to
// the "have_vlans" edge. The optional arguments are used to configure the query builder of the edge.
func (pciq *PortChannelInterfaceQuery) WithHaveVlans(opts ...func(*VlanQuery)) *PortChannelInterfaceQuery {
	query := &VlanQuery{config: pciq.config}
	for _, opt := range opts {
		opt(query)
	}
	pciq.withHaveVlans = query
	return pciq
}

// WithNativeOnVlan tells the query-builder to eager-load the nodes that are connected to
// the "native_on_vlan" edge. The optional arguments are used to configure the query builder of the edge.
func (pciq *PortChannelInterfaceQuery) WithNativeOnVlan(opts ...func(*VlanQuery)) *PortChannelInterfaceQuery {
	query := &VlanQuery{config: pciq.config}
	for _, opt := range opts {
		opt(query)
	}
	pciq.withNativeOnVlan = query
	return pciq
}

// WithOnDevice tells the query-builder to eager-load the nodes that are connected to
// the "on_device" edge. The optional arguments are used to configure the query builder of the edge.
func (pciq *PortChannelInterfaceQuery) WithOnDevice(opts ...func(*DeviceQuery)) *PortChannelInterfaceQuery {
	query := &DeviceQuery{config: pciq.config}
	for _, opt := range opts {
		opt(query)
	}
	pciq.withOnDevice = query
	return pciq
}

// WithOnIPAddress tells the query-builder to eager-load the nodes that are connected to
// the "on_ip_address" edge. The optional arguments are used to configure the query builder of the edge.
func (pciq *PortChannelInterfaceQuery) WithOnIPAddress(opts ...func(*IPAddressQuery)) *PortChannelInterfaceQuery {
	query := &IPAddressQuery{config: pciq.config}
	for _, opt := range opts {
		opt(query)
	}
	pciq.withOnIPAddress = query
	return pciq
}

// WithInterfaces tells the query-builder to eager-load the nodes that are connected to
// the "interfaces" edge. The optional arguments are used to configure the query builder of the edge.
func (pciq *PortChannelInterfaceQuery) WithInterfaces(opts ...func(*NetInterfaceQuery)) *PortChannelInterfaceQuery {
	query := &NetInterfaceQuery{config: pciq.config}
	for _, opt := range opts {
		opt(query)
	}
	pciq.withInterfaces = query
	return pciq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PoInterfaceID int `json:"po_interface_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PortChannelInterface.Query().
//		GroupBy(portchannelinterface.FieldPoInterfaceID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (pciq *PortChannelInterfaceQuery) GroupBy(field string, fields ...string) *PortChannelInterfaceGroupBy {
	group := &PortChannelInterfaceGroupBy{config: pciq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pciq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PoInterfaceID int `json:"po_interface_id,omitempty"`
//	}
//
//	client.PortChannelInterface.Query().
//		Select(portchannelinterface.FieldPoInterfaceID).
//		Scan(ctx, &v)
//
func (pciq *PortChannelInterfaceQuery) Select(field string, fields ...string) *PortChannelInterfaceSelect {
	pciq.fields = append([]string{field}, fields...)
	return &PortChannelInterfaceSelect{PortChannelInterfaceQuery: pciq}
}

func (pciq *PortChannelInterfaceQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pciq.fields {
		if !portchannelinterface.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pciq.path != nil {
		prev, err := pciq.path(ctx)
		if err != nil {
			return err
		}
		pciq.sql = prev
	}
	return nil
}

func (pciq *PortChannelInterfaceQuery) sqlAll(ctx context.Context) ([]*PortChannelInterface, error) {
	var (
		nodes       = []*PortChannelInterface{}
		withFKs     = pciq.withFKs
		_spec       = pciq.querySpec()
		loadedTypes = [7]bool{
			pciq.withMode != nil,
			pciq.withOnLayer != nil,
			pciq.withHaveVlans != nil,
			pciq.withNativeOnVlan != nil,
			pciq.withOnDevice != nil,
			pciq.withOnIPAddress != nil,
			pciq.withInterfaces != nil,
		}
	)
	if pciq.withMode != nil || pciq.withOnLayer != nil || pciq.withNativeOnVlan != nil || pciq.withOnDevice != nil || pciq.withOnIPAddress != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, portchannelinterface.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &PortChannelInterface{config: pciq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, pciq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := pciq.withMode; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*PortChannelInterface)
		for i := range nodes {
			if nodes[i].net_interface_mode_po_modes == nil {
				continue
			}
			fk := *nodes[i].net_interface_mode_po_modes
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(netinterfacemode.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "net_interface_mode_po_modes" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Mode = n
			}
		}
	}

	if query := pciq.withOnLayer; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*PortChannelInterface)
		for i := range nodes {
			if nodes[i].net_interface_layer_po_layers == nil {
				continue
			}
			fk := *nodes[i].net_interface_layer_po_layers
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(netinterfacelayer.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "net_interface_layer_po_layers" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.OnLayer = n
			}
		}
	}

	if query := pciq.withHaveVlans; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*PortChannelInterface, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.HaveVlans = []*Vlan{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*PortChannelInterface)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   portchannelinterface.HaveVlansTable,
				Columns: portchannelinterface.HaveVlansPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(portchannelinterface.HaveVlansPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, pciq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "have_vlans": %w`, err)
		}
		query.Where(vlan.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "have_vlans" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.HaveVlans = append(nodes[i].Edges.HaveVlans, n)
			}
		}
	}

	if query := pciq.withNativeOnVlan; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*PortChannelInterface)
		for i := range nodes {
			if nodes[i].vlan_po_native_vlan == nil {
				continue
			}
			fk := *nodes[i].vlan_po_native_vlan
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(vlan.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "vlan_po_native_vlan" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.NativeOnVlan = n
			}
		}
	}

	if query := pciq.withOnDevice; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*PortChannelInterface)
		for i := range nodes {
			if nodes[i].device_po_interfaces == nil {
				continue
			}
			fk := *nodes[i].device_po_interfaces
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(device.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "device_po_interfaces" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.OnDevice = n
			}
		}
	}

	if query := pciq.withOnIPAddress; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*PortChannelInterface)
		for i := range nodes {
			if nodes[i].ip_address_po_interfaces == nil {
				continue
			}
			fk := *nodes[i].ip_address_po_interfaces
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(ipaddress.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "ip_address_po_interfaces" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.OnIPAddress = n
			}
		}
	}

	if query := pciq.withInterfaces; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*PortChannelInterface)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Interfaces = []*NetInterface{}
		}
		query.withFKs = true
		query.Where(predicate.NetInterface(func(s *sql.Selector) {
			s.Where(sql.InValues(portchannelinterface.InterfacesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.port_channel_interface_interfaces
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "port_channel_interface_interfaces" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "port_channel_interface_interfaces" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Interfaces = append(node.Edges.Interfaces, n)
		}
	}

	return nodes, nil
}

func (pciq *PortChannelInterfaceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pciq.querySpec()
	return sqlgraph.CountNodes(ctx, pciq.driver, _spec)
}

func (pciq *PortChannelInterfaceQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := pciq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (pciq *PortChannelInterfaceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   portchannelinterface.Table,
			Columns: portchannelinterface.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: portchannelinterface.FieldID,
			},
		},
		From:   pciq.sql,
		Unique: true,
	}
	if unique := pciq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pciq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, portchannelinterface.FieldID)
		for i := range fields {
			if fields[i] != portchannelinterface.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pciq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pciq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pciq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pciq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pciq *PortChannelInterfaceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pciq.driver.Dialect())
	t1 := builder.Table(portchannelinterface.Table)
	selector := builder.Select(t1.Columns(portchannelinterface.Columns...)...).From(t1)
	if pciq.sql != nil {
		selector = pciq.sql
		selector.Select(selector.Columns(portchannelinterface.Columns...)...)
	}
	for _, p := range pciq.predicates {
		p(selector)
	}
	for _, p := range pciq.order {
		p(selector)
	}
	if offset := pciq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pciq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PortChannelInterfaceGroupBy is the group-by builder for PortChannelInterface entities.
type PortChannelInterfaceGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pcigb *PortChannelInterfaceGroupBy) Aggregate(fns ...AggregateFunc) *PortChannelInterfaceGroupBy {
	pcigb.fns = append(pcigb.fns, fns...)
	return pcigb
}

// Scan applies the group-by query and scans the result into the given value.
func (pcigb *PortChannelInterfaceGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pcigb.path(ctx)
	if err != nil {
		return err
	}
	pcigb.sql = query
	return pcigb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pcigb *PortChannelInterfaceGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := pcigb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (pcigb *PortChannelInterfaceGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(pcigb.fields) > 1 {
		return nil, errors.New("ent: PortChannelInterfaceGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := pcigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pcigb *PortChannelInterfaceGroupBy) StringsX(ctx context.Context) []string {
	v, err := pcigb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pcigb *PortChannelInterfaceGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pcigb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{portchannelinterface.Label}
	default:
		err = fmt.Errorf("ent: PortChannelInterfaceGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pcigb *PortChannelInterfaceGroupBy) StringX(ctx context.Context) string {
	v, err := pcigb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (pcigb *PortChannelInterfaceGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(pcigb.fields) > 1 {
		return nil, errors.New("ent: PortChannelInterfaceGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := pcigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pcigb *PortChannelInterfaceGroupBy) IntsX(ctx context.Context) []int {
	v, err := pcigb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pcigb *PortChannelInterfaceGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pcigb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{portchannelinterface.Label}
	default:
		err = fmt.Errorf("ent: PortChannelInterfaceGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pcigb *PortChannelInterfaceGroupBy) IntX(ctx context.Context) int {
	v, err := pcigb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (pcigb *PortChannelInterfaceGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(pcigb.fields) > 1 {
		return nil, errors.New("ent: PortChannelInterfaceGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := pcigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pcigb *PortChannelInterfaceGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := pcigb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pcigb *PortChannelInterfaceGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pcigb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{portchannelinterface.Label}
	default:
		err = fmt.Errorf("ent: PortChannelInterfaceGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pcigb *PortChannelInterfaceGroupBy) Float64X(ctx context.Context) float64 {
	v, err := pcigb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (pcigb *PortChannelInterfaceGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(pcigb.fields) > 1 {
		return nil, errors.New("ent: PortChannelInterfaceGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := pcigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pcigb *PortChannelInterfaceGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := pcigb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pcigb *PortChannelInterfaceGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pcigb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{portchannelinterface.Label}
	default:
		err = fmt.Errorf("ent: PortChannelInterfaceGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pcigb *PortChannelInterfaceGroupBy) BoolX(ctx context.Context) bool {
	v, err := pcigb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pcigb *PortChannelInterfaceGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pcigb.fields {
		if !portchannelinterface.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pcigb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pcigb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pcigb *PortChannelInterfaceGroupBy) sqlQuery() *sql.Selector {
	selector := pcigb.sql
	columns := make([]string, 0, len(pcigb.fields)+len(pcigb.fns))
	columns = append(columns, pcigb.fields...)
	for _, fn := range pcigb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(pcigb.fields...)
}

// PortChannelInterfaceSelect is the builder for selecting fields of PortChannelInterface entities.
type PortChannelInterfaceSelect struct {
	*PortChannelInterfaceQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (pcis *PortChannelInterfaceSelect) Scan(ctx context.Context, v interface{}) error {
	if err := pcis.prepareQuery(ctx); err != nil {
		return err
	}
	pcis.sql = pcis.PortChannelInterfaceQuery.sqlQuery(ctx)
	return pcis.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pcis *PortChannelInterfaceSelect) ScanX(ctx context.Context, v interface{}) {
	if err := pcis.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (pcis *PortChannelInterfaceSelect) Strings(ctx context.Context) ([]string, error) {
	if len(pcis.fields) > 1 {
		return nil, errors.New("ent: PortChannelInterfaceSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := pcis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pcis *PortChannelInterfaceSelect) StringsX(ctx context.Context) []string {
	v, err := pcis.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (pcis *PortChannelInterfaceSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pcis.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{portchannelinterface.Label}
	default:
		err = fmt.Errorf("ent: PortChannelInterfaceSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pcis *PortChannelInterfaceSelect) StringX(ctx context.Context) string {
	v, err := pcis.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (pcis *PortChannelInterfaceSelect) Ints(ctx context.Context) ([]int, error) {
	if len(pcis.fields) > 1 {
		return nil, errors.New("ent: PortChannelInterfaceSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := pcis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pcis *PortChannelInterfaceSelect) IntsX(ctx context.Context) []int {
	v, err := pcis.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (pcis *PortChannelInterfaceSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pcis.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{portchannelinterface.Label}
	default:
		err = fmt.Errorf("ent: PortChannelInterfaceSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pcis *PortChannelInterfaceSelect) IntX(ctx context.Context) int {
	v, err := pcis.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (pcis *PortChannelInterfaceSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(pcis.fields) > 1 {
		return nil, errors.New("ent: PortChannelInterfaceSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := pcis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pcis *PortChannelInterfaceSelect) Float64sX(ctx context.Context) []float64 {
	v, err := pcis.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (pcis *PortChannelInterfaceSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pcis.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{portchannelinterface.Label}
	default:
		err = fmt.Errorf("ent: PortChannelInterfaceSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pcis *PortChannelInterfaceSelect) Float64X(ctx context.Context) float64 {
	v, err := pcis.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (pcis *PortChannelInterfaceSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(pcis.fields) > 1 {
		return nil, errors.New("ent: PortChannelInterfaceSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := pcis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pcis *PortChannelInterfaceSelect) BoolsX(ctx context.Context) []bool {
	v, err := pcis.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (pcis *PortChannelInterfaceSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pcis.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{portchannelinterface.Label}
	default:
		err = fmt.Errorf("ent: PortChannelInterfaceSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pcis *PortChannelInterfaceSelect) BoolX(ctx context.Context) bool {
	v, err := pcis.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pcis *PortChannelInterfaceSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := pcis.sqlQuery().Query()
	if err := pcis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pcis *PortChannelInterfaceSelect) sqlQuery() sql.Querier {
	selector := pcis.sql
	selector.Select(selector.Columns(pcis.fields...)...)
	return selector
}
