// Code generated by entc, DO NOT EDIT.

package nettopologydevicemap

const (
	// Label holds the string label denoting the nettopologydevicemap type in the database.
	Label = "net_topology_device_map"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPositionX holds the string denoting the position_x field in the database.
	FieldPositionX = "position_x"
	// FieldPositionY holds the string denoting the position_y field in the database.
	FieldPositionY = "position_y"
	// EdgeOnTopology holds the string denoting the on_topology edge name in mutations.
	EdgeOnTopology = "on_topology"
	// EdgeDevice holds the string denoting the device edge name in mutations.
	EdgeDevice = "device"
	// EdgeEdge holds the string denoting the edge edge name in mutations.
	EdgeEdge = "edge"
	// Table holds the table name of the nettopologydevicemap in the database.
	Table = "net_topology_device_maps"
	// OnTopologyTable is the table the holds the on_topology relation/edge.
	OnTopologyTable = "net_topology_device_maps"
	// OnTopologyInverseTable is the table name for the NetTopology entity.
	// It exists in this package in order to avoid circular dependency with the "nettopology" package.
	OnTopologyInverseTable = "net_topologies"
	// OnTopologyColumn is the table column denoting the on_topology relation/edge.
	OnTopologyColumn = "net_topology_topology"
	// DeviceTable is the table the holds the device relation/edge.
	DeviceTable = "net_topology_device_maps"
	// DeviceInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DeviceInverseTable = "devices"
	// DeviceColumn is the table column denoting the device relation/edge.
	DeviceColumn = "device_in_topology"
	// EdgeTable is the table the holds the edge relation/edge. The primary key declared below.
	EdgeTable = "net_topology_device_map_edge"
)

// Columns holds all SQL columns for nettopologydevicemap fields.
var Columns = []string{
	FieldID,
	FieldPositionX,
	FieldPositionY,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "net_topology_device_maps"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"device_in_topology",
	"net_topology_topology",
}

var (
	// EdgePrimaryKey and EdgeColumn2 are the table columns denoting the
	// primary key for the edge relation (M2M).
	EdgePrimaryKey = []string{"net_topology_device_map_id", "edge_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPositionX holds the default value on creation for the "position_x" field.
	DefaultPositionX int
	// DefaultPositionY holds the default value on creation for the "position_y" field.
	DefaultPositionY int
)
