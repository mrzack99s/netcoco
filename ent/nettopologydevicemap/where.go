// Code generated by entc, DO NOT EDIT.

package nettopologydevicemap

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mrzack99s/netcoco/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PositionX applies equality check predicate on the "position_x" field. It's identical to PositionXEQ.
func PositionX(v int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPositionX), v))
	})
}

// PositionY applies equality check predicate on the "position_y" field. It's identical to PositionYEQ.
func PositionY(v int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPositionY), v))
	})
}

// PositionXEQ applies the EQ predicate on the "position_x" field.
func PositionXEQ(v int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPositionX), v))
	})
}

// PositionXNEQ applies the NEQ predicate on the "position_x" field.
func PositionXNEQ(v int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPositionX), v))
	})
}

// PositionXIn applies the In predicate on the "position_x" field.
func PositionXIn(vs ...int) predicate.NetTopologyDeviceMap {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPositionX), v...))
	})
}

// PositionXNotIn applies the NotIn predicate on the "position_x" field.
func PositionXNotIn(vs ...int) predicate.NetTopologyDeviceMap {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPositionX), v...))
	})
}

// PositionXGT applies the GT predicate on the "position_x" field.
func PositionXGT(v int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPositionX), v))
	})
}

// PositionXGTE applies the GTE predicate on the "position_x" field.
func PositionXGTE(v int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPositionX), v))
	})
}

// PositionXLT applies the LT predicate on the "position_x" field.
func PositionXLT(v int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPositionX), v))
	})
}

// PositionXLTE applies the LTE predicate on the "position_x" field.
func PositionXLTE(v int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPositionX), v))
	})
}

// PositionYEQ applies the EQ predicate on the "position_y" field.
func PositionYEQ(v int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPositionY), v))
	})
}

// PositionYNEQ applies the NEQ predicate on the "position_y" field.
func PositionYNEQ(v int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPositionY), v))
	})
}

// PositionYIn applies the In predicate on the "position_y" field.
func PositionYIn(vs ...int) predicate.NetTopologyDeviceMap {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPositionY), v...))
	})
}

// PositionYNotIn applies the NotIn predicate on the "position_y" field.
func PositionYNotIn(vs ...int) predicate.NetTopologyDeviceMap {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPositionY), v...))
	})
}

// PositionYGT applies the GT predicate on the "position_y" field.
func PositionYGT(v int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPositionY), v))
	})
}

// PositionYGTE applies the GTE predicate on the "position_y" field.
func PositionYGTE(v int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPositionY), v))
	})
}

// PositionYLT applies the LT predicate on the "position_y" field.
func PositionYLT(v int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPositionY), v))
	})
}

// PositionYLTE applies the LTE predicate on the "position_y" field.
func PositionYLTE(v int) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPositionY), v))
	})
}

// HasOnTopology applies the HasEdge predicate on the "on_topology" edge.
func HasOnTopology() predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OnTopologyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OnTopologyTable, OnTopologyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOnTopologyWith applies the HasEdge predicate on the "on_topology" edge with a given conditions (other predicates).
func HasOnTopologyWith(preds ...predicate.NetTopology) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OnTopologyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OnTopologyTable, OnTopologyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDevice applies the HasEdge predicate on the "device" edge.
func HasDevice() predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeviceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeviceTable, DeviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceWith applies the HasEdge predicate on the "device" edge with a given conditions (other predicates).
func HasDeviceWith(preds ...predicate.Device) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeviceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeviceTable, DeviceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEdge applies the HasEdge predicate on the "edge" edge.
func HasEdge() predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EdgeTable, EdgePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgeWith applies the HasEdge predicate on the "edge" edge with a given conditions (other predicates).
func HasEdgeWith(preds ...predicate.NetTopologyDeviceMap) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EdgeTable, EdgePrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NetTopologyDeviceMap) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NetTopologyDeviceMap) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NetTopologyDeviceMap) predicate.NetTopologyDeviceMap {
	return predicate.NetTopologyDeviceMap(func(s *sql.Selector) {
		p(s.Not())
	})
}
