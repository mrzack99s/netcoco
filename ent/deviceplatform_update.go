// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/device"
	"github.com/mrzack99s/netcoco/ent/deviceplatform"
	"github.com/mrzack99s/netcoco/ent/predicate"
)

// DevicePlatformUpdate is the builder for updating DevicePlatform entities.
type DevicePlatformUpdate struct {
	config
	hooks    []Hook
	mutation *DevicePlatformMutation
}

// Where adds a new predicate for the DevicePlatformUpdate builder.
func (dpu *DevicePlatformUpdate) Where(ps ...predicate.DevicePlatform) *DevicePlatformUpdate {
	dpu.mutation.predicates = append(dpu.mutation.predicates, ps...)
	return dpu
}

// SetDevicePlatformName sets the "device_platform_name" field.
func (dpu *DevicePlatformUpdate) SetDevicePlatformName(s string) *DevicePlatformUpdate {
	dpu.mutation.SetDevicePlatformName(s)
	return dpu
}

// AddPlatformIDs adds the "platforms" edge to the Device entity by IDs.
func (dpu *DevicePlatformUpdate) AddPlatformIDs(ids ...int) *DevicePlatformUpdate {
	dpu.mutation.AddPlatformIDs(ids...)
	return dpu
}

// AddPlatforms adds the "platforms" edges to the Device entity.
func (dpu *DevicePlatformUpdate) AddPlatforms(d ...*Device) *DevicePlatformUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dpu.AddPlatformIDs(ids...)
}

// Mutation returns the DevicePlatformMutation object of the builder.
func (dpu *DevicePlatformUpdate) Mutation() *DevicePlatformMutation {
	return dpu.mutation
}

// ClearPlatforms clears all "platforms" edges to the Device entity.
func (dpu *DevicePlatformUpdate) ClearPlatforms() *DevicePlatformUpdate {
	dpu.mutation.ClearPlatforms()
	return dpu
}

// RemovePlatformIDs removes the "platforms" edge to Device entities by IDs.
func (dpu *DevicePlatformUpdate) RemovePlatformIDs(ids ...int) *DevicePlatformUpdate {
	dpu.mutation.RemovePlatformIDs(ids...)
	return dpu
}

// RemovePlatforms removes "platforms" edges to Device entities.
func (dpu *DevicePlatformUpdate) RemovePlatforms(d ...*Device) *DevicePlatformUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dpu.RemovePlatformIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dpu *DevicePlatformUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dpu.hooks) == 0 {
		if err = dpu.check(); err != nil {
			return 0, err
		}
		affected, err = dpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DevicePlatformMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpu.check(); err != nil {
				return 0, err
			}
			dpu.mutation = mutation
			affected, err = dpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dpu.hooks) - 1; i >= 0; i-- {
			mut = dpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dpu *DevicePlatformUpdate) SaveX(ctx context.Context) int {
	affected, err := dpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dpu *DevicePlatformUpdate) Exec(ctx context.Context) error {
	_, err := dpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpu *DevicePlatformUpdate) ExecX(ctx context.Context) {
	if err := dpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpu *DevicePlatformUpdate) check() error {
	if v, ok := dpu.mutation.DevicePlatformName(); ok {
		if err := deviceplatform.DevicePlatformNameValidator(v); err != nil {
			return &ValidationError{Name: "device_platform_name", err: fmt.Errorf("ent: validator failed for field \"device_platform_name\": %w", err)}
		}
	}
	return nil
}

func (dpu *DevicePlatformUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deviceplatform.Table,
			Columns: deviceplatform.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deviceplatform.FieldID,
			},
		},
	}
	if ps := dpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpu.mutation.DevicePlatformName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deviceplatform.FieldDevicePlatformName,
		})
	}
	if dpu.mutation.PlatformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceplatform.PlatformsTable,
			Columns: []string{deviceplatform.PlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.RemovedPlatformsIDs(); len(nodes) > 0 && !dpu.mutation.PlatformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceplatform.PlatformsTable,
			Columns: []string{deviceplatform.PlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.PlatformsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceplatform.PlatformsTable,
			Columns: []string{deviceplatform.PlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deviceplatform.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DevicePlatformUpdateOne is the builder for updating a single DevicePlatform entity.
type DevicePlatformUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DevicePlatformMutation
}

// SetDevicePlatformName sets the "device_platform_name" field.
func (dpuo *DevicePlatformUpdateOne) SetDevicePlatformName(s string) *DevicePlatformUpdateOne {
	dpuo.mutation.SetDevicePlatformName(s)
	return dpuo
}

// AddPlatformIDs adds the "platforms" edge to the Device entity by IDs.
func (dpuo *DevicePlatformUpdateOne) AddPlatformIDs(ids ...int) *DevicePlatformUpdateOne {
	dpuo.mutation.AddPlatformIDs(ids...)
	return dpuo
}

// AddPlatforms adds the "platforms" edges to the Device entity.
func (dpuo *DevicePlatformUpdateOne) AddPlatforms(d ...*Device) *DevicePlatformUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dpuo.AddPlatformIDs(ids...)
}

// Mutation returns the DevicePlatformMutation object of the builder.
func (dpuo *DevicePlatformUpdateOne) Mutation() *DevicePlatformMutation {
	return dpuo.mutation
}

// ClearPlatforms clears all "platforms" edges to the Device entity.
func (dpuo *DevicePlatformUpdateOne) ClearPlatforms() *DevicePlatformUpdateOne {
	dpuo.mutation.ClearPlatforms()
	return dpuo
}

// RemovePlatformIDs removes the "platforms" edge to Device entities by IDs.
func (dpuo *DevicePlatformUpdateOne) RemovePlatformIDs(ids ...int) *DevicePlatformUpdateOne {
	dpuo.mutation.RemovePlatformIDs(ids...)
	return dpuo
}

// RemovePlatforms removes "platforms" edges to Device entities.
func (dpuo *DevicePlatformUpdateOne) RemovePlatforms(d ...*Device) *DevicePlatformUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dpuo.RemovePlatformIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dpuo *DevicePlatformUpdateOne) Select(field string, fields ...string) *DevicePlatformUpdateOne {
	dpuo.fields = append([]string{field}, fields...)
	return dpuo
}

// Save executes the query and returns the updated DevicePlatform entity.
func (dpuo *DevicePlatformUpdateOne) Save(ctx context.Context) (*DevicePlatform, error) {
	var (
		err  error
		node *DevicePlatform
	)
	if len(dpuo.hooks) == 0 {
		if err = dpuo.check(); err != nil {
			return nil, err
		}
		node, err = dpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DevicePlatformMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpuo.check(); err != nil {
				return nil, err
			}
			dpuo.mutation = mutation
			node, err = dpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dpuo.hooks) - 1; i >= 0; i-- {
			mut = dpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dpuo *DevicePlatformUpdateOne) SaveX(ctx context.Context) *DevicePlatform {
	node, err := dpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dpuo *DevicePlatformUpdateOne) Exec(ctx context.Context) error {
	_, err := dpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpuo *DevicePlatformUpdateOne) ExecX(ctx context.Context) {
	if err := dpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpuo *DevicePlatformUpdateOne) check() error {
	if v, ok := dpuo.mutation.DevicePlatformName(); ok {
		if err := deviceplatform.DevicePlatformNameValidator(v); err != nil {
			return &ValidationError{Name: "device_platform_name", err: fmt.Errorf("ent: validator failed for field \"device_platform_name\": %w", err)}
		}
	}
	return nil
}

func (dpuo *DevicePlatformUpdateOne) sqlSave(ctx context.Context) (_node *DevicePlatform, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deviceplatform.Table,
			Columns: deviceplatform.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deviceplatform.FieldID,
			},
		},
	}
	id, ok := dpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DevicePlatform.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := dpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deviceplatform.FieldID)
		for _, f := range fields {
			if !deviceplatform.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deviceplatform.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpuo.mutation.DevicePlatformName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deviceplatform.FieldDevicePlatformName,
		})
	}
	if dpuo.mutation.PlatformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceplatform.PlatformsTable,
			Columns: []string{deviceplatform.PlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.RemovedPlatformsIDs(); len(nodes) > 0 && !dpuo.mutation.PlatformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceplatform.PlatformsTable,
			Columns: []string{deviceplatform.PlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.PlatformsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceplatform.PlatformsTable,
			Columns: []string{deviceplatform.PlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DevicePlatform{config: dpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deviceplatform.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
