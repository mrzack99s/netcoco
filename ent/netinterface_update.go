// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/device"
	"github.com/mrzack99s/netcoco/ent/netinterface"
	"github.com/mrzack99s/netcoco/ent/netinterfacemode"
	"github.com/mrzack99s/netcoco/ent/predicate"
)

// NetInterfaceUpdate is the builder for updating NetInterface entities.
type NetInterfaceUpdate struct {
	config
	hooks    []Hook
	mutation *NetInterfaceMutation
}

// Where adds a new predicate for the NetInterfaceUpdate builder.
func (niu *NetInterfaceUpdate) Where(ps ...predicate.NetInterface) *NetInterfaceUpdate {
	niu.mutation.predicates = append(niu.mutation.predicates, ps...)
	return niu
}

// SetInterfaceName sets the "interface_name" field.
func (niu *NetInterfaceUpdate) SetInterfaceName(s string) *NetInterfaceUpdate {
	niu.mutation.SetInterfaceName(s)
	return niu
}

// SetInterfaceVlan sets the "interface_vlan" field.
func (niu *NetInterfaceUpdate) SetInterfaceVlan(s string) *NetInterfaceUpdate {
	niu.mutation.SetInterfaceVlan(s)
	return niu
}

// SetNillableInterfaceVlan sets the "interface_vlan" field if the given value is not nil.
func (niu *NetInterfaceUpdate) SetNillableInterfaceVlan(s *string) *NetInterfaceUpdate {
	if s != nil {
		niu.SetInterfaceVlan(*s)
	}
	return niu
}

// SetInterfaceNativeVlan sets the "interface_native_vlan" field.
func (niu *NetInterfaceUpdate) SetInterfaceNativeVlan(s string) *NetInterfaceUpdate {
	niu.mutation.SetInterfaceNativeVlan(s)
	return niu
}

// SetNillableInterfaceNativeVlan sets the "interface_native_vlan" field if the given value is not nil.
func (niu *NetInterfaceUpdate) SetNillableInterfaceNativeVlan(s *string) *NetInterfaceUpdate {
	if s != nil {
		niu.SetInterfaceNativeVlan(*s)
	}
	return niu
}

// SetOnDeviceID sets the "on_device" edge to the Device entity by ID.
func (niu *NetInterfaceUpdate) SetOnDeviceID(id int) *NetInterfaceUpdate {
	niu.mutation.SetOnDeviceID(id)
	return niu
}

// SetNillableOnDeviceID sets the "on_device" edge to the Device entity by ID if the given value is not nil.
func (niu *NetInterfaceUpdate) SetNillableOnDeviceID(id *int) *NetInterfaceUpdate {
	if id != nil {
		niu = niu.SetOnDeviceID(*id)
	}
	return niu
}

// SetOnDevice sets the "on_device" edge to the Device entity.
func (niu *NetInterfaceUpdate) SetOnDevice(d *Device) *NetInterfaceUpdate {
	return niu.SetOnDeviceID(d.ID)
}

// SetModeID sets the "mode" edge to the NetInterfaceMode entity by ID.
func (niu *NetInterfaceUpdate) SetModeID(id int) *NetInterfaceUpdate {
	niu.mutation.SetModeID(id)
	return niu
}

// SetNillableModeID sets the "mode" edge to the NetInterfaceMode entity by ID if the given value is not nil.
func (niu *NetInterfaceUpdate) SetNillableModeID(id *int) *NetInterfaceUpdate {
	if id != nil {
		niu = niu.SetModeID(*id)
	}
	return niu
}

// SetMode sets the "mode" edge to the NetInterfaceMode entity.
func (niu *NetInterfaceUpdate) SetMode(n *NetInterfaceMode) *NetInterfaceUpdate {
	return niu.SetModeID(n.ID)
}

// Mutation returns the NetInterfaceMutation object of the builder.
func (niu *NetInterfaceUpdate) Mutation() *NetInterfaceMutation {
	return niu.mutation
}

// ClearOnDevice clears the "on_device" edge to the Device entity.
func (niu *NetInterfaceUpdate) ClearOnDevice() *NetInterfaceUpdate {
	niu.mutation.ClearOnDevice()
	return niu
}

// ClearMode clears the "mode" edge to the NetInterfaceMode entity.
func (niu *NetInterfaceUpdate) ClearMode() *NetInterfaceUpdate {
	niu.mutation.ClearMode()
	return niu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (niu *NetInterfaceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(niu.hooks) == 0 {
		if err = niu.check(); err != nil {
			return 0, err
		}
		affected, err = niu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetInterfaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = niu.check(); err != nil {
				return 0, err
			}
			niu.mutation = mutation
			affected, err = niu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(niu.hooks) - 1; i >= 0; i-- {
			mut = niu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, niu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (niu *NetInterfaceUpdate) SaveX(ctx context.Context) int {
	affected, err := niu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (niu *NetInterfaceUpdate) Exec(ctx context.Context) error {
	_, err := niu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (niu *NetInterfaceUpdate) ExecX(ctx context.Context) {
	if err := niu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (niu *NetInterfaceUpdate) check() error {
	if v, ok := niu.mutation.InterfaceName(); ok {
		if err := netinterface.InterfaceNameValidator(v); err != nil {
			return &ValidationError{Name: "interface_name", err: fmt.Errorf("ent: validator failed for field \"interface_name\": %w", err)}
		}
	}
	return nil
}

func (niu *NetInterfaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   netinterface.Table,
			Columns: netinterface.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: netinterface.FieldID,
			},
		},
	}
	if ps := niu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := niu.mutation.InterfaceName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: netinterface.FieldInterfaceName,
		})
	}
	if value, ok := niu.mutation.InterfaceVlan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: netinterface.FieldInterfaceVlan,
		})
	}
	if value, ok := niu.mutation.InterfaceNativeVlan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: netinterface.FieldInterfaceNativeVlan,
		})
	}
	if niu.mutation.OnDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   netinterface.OnDeviceTable,
			Columns: []string{netinterface.OnDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := niu.mutation.OnDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   netinterface.OnDeviceTable,
			Columns: []string{netinterface.OnDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if niu.mutation.ModeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   netinterface.ModeTable,
			Columns: []string{netinterface.ModeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterfacemode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := niu.mutation.ModeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   netinterface.ModeTable,
			Columns: []string{netinterface.ModeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterfacemode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, niu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{netinterface.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// NetInterfaceUpdateOne is the builder for updating a single NetInterface entity.
type NetInterfaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NetInterfaceMutation
}

// SetInterfaceName sets the "interface_name" field.
func (niuo *NetInterfaceUpdateOne) SetInterfaceName(s string) *NetInterfaceUpdateOne {
	niuo.mutation.SetInterfaceName(s)
	return niuo
}

// SetInterfaceVlan sets the "interface_vlan" field.
func (niuo *NetInterfaceUpdateOne) SetInterfaceVlan(s string) *NetInterfaceUpdateOne {
	niuo.mutation.SetInterfaceVlan(s)
	return niuo
}

// SetNillableInterfaceVlan sets the "interface_vlan" field if the given value is not nil.
func (niuo *NetInterfaceUpdateOne) SetNillableInterfaceVlan(s *string) *NetInterfaceUpdateOne {
	if s != nil {
		niuo.SetInterfaceVlan(*s)
	}
	return niuo
}

// SetInterfaceNativeVlan sets the "interface_native_vlan" field.
func (niuo *NetInterfaceUpdateOne) SetInterfaceNativeVlan(s string) *NetInterfaceUpdateOne {
	niuo.mutation.SetInterfaceNativeVlan(s)
	return niuo
}

// SetNillableInterfaceNativeVlan sets the "interface_native_vlan" field if the given value is not nil.
func (niuo *NetInterfaceUpdateOne) SetNillableInterfaceNativeVlan(s *string) *NetInterfaceUpdateOne {
	if s != nil {
		niuo.SetInterfaceNativeVlan(*s)
	}
	return niuo
}

// SetOnDeviceID sets the "on_device" edge to the Device entity by ID.
func (niuo *NetInterfaceUpdateOne) SetOnDeviceID(id int) *NetInterfaceUpdateOne {
	niuo.mutation.SetOnDeviceID(id)
	return niuo
}

// SetNillableOnDeviceID sets the "on_device" edge to the Device entity by ID if the given value is not nil.
func (niuo *NetInterfaceUpdateOne) SetNillableOnDeviceID(id *int) *NetInterfaceUpdateOne {
	if id != nil {
		niuo = niuo.SetOnDeviceID(*id)
	}
	return niuo
}

// SetOnDevice sets the "on_device" edge to the Device entity.
func (niuo *NetInterfaceUpdateOne) SetOnDevice(d *Device) *NetInterfaceUpdateOne {
	return niuo.SetOnDeviceID(d.ID)
}

// SetModeID sets the "mode" edge to the NetInterfaceMode entity by ID.
func (niuo *NetInterfaceUpdateOne) SetModeID(id int) *NetInterfaceUpdateOne {
	niuo.mutation.SetModeID(id)
	return niuo
}

// SetNillableModeID sets the "mode" edge to the NetInterfaceMode entity by ID if the given value is not nil.
func (niuo *NetInterfaceUpdateOne) SetNillableModeID(id *int) *NetInterfaceUpdateOne {
	if id != nil {
		niuo = niuo.SetModeID(*id)
	}
	return niuo
}

// SetMode sets the "mode" edge to the NetInterfaceMode entity.
func (niuo *NetInterfaceUpdateOne) SetMode(n *NetInterfaceMode) *NetInterfaceUpdateOne {
	return niuo.SetModeID(n.ID)
}

// Mutation returns the NetInterfaceMutation object of the builder.
func (niuo *NetInterfaceUpdateOne) Mutation() *NetInterfaceMutation {
	return niuo.mutation
}

// ClearOnDevice clears the "on_device" edge to the Device entity.
func (niuo *NetInterfaceUpdateOne) ClearOnDevice() *NetInterfaceUpdateOne {
	niuo.mutation.ClearOnDevice()
	return niuo
}

// ClearMode clears the "mode" edge to the NetInterfaceMode entity.
func (niuo *NetInterfaceUpdateOne) ClearMode() *NetInterfaceUpdateOne {
	niuo.mutation.ClearMode()
	return niuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (niuo *NetInterfaceUpdateOne) Select(field string, fields ...string) *NetInterfaceUpdateOne {
	niuo.fields = append([]string{field}, fields...)
	return niuo
}

// Save executes the query and returns the updated NetInterface entity.
func (niuo *NetInterfaceUpdateOne) Save(ctx context.Context) (*NetInterface, error) {
	var (
		err  error
		node *NetInterface
	)
	if len(niuo.hooks) == 0 {
		if err = niuo.check(); err != nil {
			return nil, err
		}
		node, err = niuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetInterfaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = niuo.check(); err != nil {
				return nil, err
			}
			niuo.mutation = mutation
			node, err = niuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(niuo.hooks) - 1; i >= 0; i-- {
			mut = niuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, niuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (niuo *NetInterfaceUpdateOne) SaveX(ctx context.Context) *NetInterface {
	node, err := niuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (niuo *NetInterfaceUpdateOne) Exec(ctx context.Context) error {
	_, err := niuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (niuo *NetInterfaceUpdateOne) ExecX(ctx context.Context) {
	if err := niuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (niuo *NetInterfaceUpdateOne) check() error {
	if v, ok := niuo.mutation.InterfaceName(); ok {
		if err := netinterface.InterfaceNameValidator(v); err != nil {
			return &ValidationError{Name: "interface_name", err: fmt.Errorf("ent: validator failed for field \"interface_name\": %w", err)}
		}
	}
	return nil
}

func (niuo *NetInterfaceUpdateOne) sqlSave(ctx context.Context) (_node *NetInterface, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   netinterface.Table,
			Columns: netinterface.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: netinterface.FieldID,
			},
		},
	}
	id, ok := niuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing NetInterface.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := niuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, netinterface.FieldID)
		for _, f := range fields {
			if !netinterface.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != netinterface.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := niuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := niuo.mutation.InterfaceName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: netinterface.FieldInterfaceName,
		})
	}
	if value, ok := niuo.mutation.InterfaceVlan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: netinterface.FieldInterfaceVlan,
		})
	}
	if value, ok := niuo.mutation.InterfaceNativeVlan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: netinterface.FieldInterfaceNativeVlan,
		})
	}
	if niuo.mutation.OnDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   netinterface.OnDeviceTable,
			Columns: []string{netinterface.OnDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := niuo.mutation.OnDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   netinterface.OnDeviceTable,
			Columns: []string{netinterface.OnDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if niuo.mutation.ModeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   netinterface.ModeTable,
			Columns: []string{netinterface.ModeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterfacemode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := niuo.mutation.ModeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   netinterface.ModeTable,
			Columns: []string{netinterface.ModeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterfacemode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NetInterface{config: niuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, niuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{netinterface.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
