// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/mrzack99s/netcoco/ent/deviceplatform"
)

// DevicePlatform is the model entity for the DevicePlatform schema.
type DevicePlatform struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DevicePlatformName holds the value of the "device_platform_name" field.
	DevicePlatformName string `json:"device_platform_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DevicePlatformQuery when eager-loading is set.
	Edges DevicePlatformEdges `json:"edges"`
}

// DevicePlatformEdges holds the relations/edges for other nodes in the graph.
type DevicePlatformEdges struct {
	// Platforms holds the value of the platforms edge.
	Platforms []*Device `json:"platforms,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlatformsOrErr returns the Platforms value or an error if the edge
// was not loaded in eager-loading.
func (e DevicePlatformEdges) PlatformsOrErr() ([]*Device, error) {
	if e.loadedTypes[0] {
		return e.Platforms, nil
	}
	return nil, &NotLoadedError{edge: "platforms"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DevicePlatform) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case deviceplatform.FieldID:
			values[i] = new(sql.NullInt64)
		case deviceplatform.FieldDevicePlatformName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DevicePlatform", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DevicePlatform fields.
func (dp *DevicePlatform) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deviceplatform.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dp.ID = int(value.Int64)
		case deviceplatform.FieldDevicePlatformName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_platform_name", values[i])
			} else if value.Valid {
				dp.DevicePlatformName = value.String
			}
		}
	}
	return nil
}

// QueryPlatforms queries the "platforms" edge of the DevicePlatform entity.
func (dp *DevicePlatform) QueryPlatforms() *DeviceQuery {
	return (&DevicePlatformClient{config: dp.config}).QueryPlatforms(dp)
}

// Update returns a builder for updating this DevicePlatform.
// Note that you need to call DevicePlatform.Unwrap() before calling this method if this DevicePlatform
// was returned from a transaction, and the transaction was committed or rolled back.
func (dp *DevicePlatform) Update() *DevicePlatformUpdateOne {
	return (&DevicePlatformClient{config: dp.config}).UpdateOne(dp)
}

// Unwrap unwraps the DevicePlatform entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dp *DevicePlatform) Unwrap() *DevicePlatform {
	tx, ok := dp.config.driver.(*txDriver)
	if !ok {
		panic("ent: DevicePlatform is not a transactional entity")
	}
	dp.config.driver = tx.drv
	return dp
}

// String implements the fmt.Stringer.
func (dp *DevicePlatform) String() string {
	var builder strings.Builder
	builder.WriteString("DevicePlatform(")
	builder.WriteString(fmt.Sprintf("id=%v", dp.ID))
	builder.WriteString(", device_platform_name=")
	builder.WriteString(dp.DevicePlatformName)
	builder.WriteByte(')')
	return builder.String()
}

// DevicePlatforms is a parsable slice of DevicePlatform.
type DevicePlatforms []*DevicePlatform

func (dp DevicePlatforms) config(cfg config) {
	for _i := range dp {
		dp[_i].config = cfg
	}
}
