// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/device"
	"github.com/mrzack99s/netcoco/ent/netinterface"
	"github.com/mrzack99s/netcoco/ent/netinterfacemode"
	"github.com/mrzack99s/netcoco/ent/portchannelinterface"
	"github.com/mrzack99s/netcoco/ent/predicate"
	"github.com/mrzack99s/netcoco/ent/vlan"
)

// PortChannelInterfaceUpdate is the builder for updating PortChannelInterface entities.
type PortChannelInterfaceUpdate struct {
	config
	hooks    []Hook
	mutation *PortChannelInterfaceMutation
}

// Where adds a new predicate for the PortChannelInterfaceUpdate builder.
func (pciu *PortChannelInterfaceUpdate) Where(ps ...predicate.PortChannelInterface) *PortChannelInterfaceUpdate {
	pciu.mutation.predicates = append(pciu.mutation.predicates, ps...)
	return pciu
}

// SetPoInterfaceID sets the "po_interface_id" field.
func (pciu *PortChannelInterfaceUpdate) SetPoInterfaceID(i int) *PortChannelInterfaceUpdate {
	pciu.mutation.ResetPoInterfaceID()
	pciu.mutation.SetPoInterfaceID(i)
	return pciu
}

// AddPoInterfaceID adds i to the "po_interface_id" field.
func (pciu *PortChannelInterfaceUpdate) AddPoInterfaceID(i int) *PortChannelInterfaceUpdate {
	pciu.mutation.AddPoInterfaceID(i)
	return pciu
}

// SetPoInterfaceShutdown sets the "po_interface_shutdown" field.
func (pciu *PortChannelInterfaceUpdate) SetPoInterfaceShutdown(b bool) *PortChannelInterfaceUpdate {
	pciu.mutation.SetPoInterfaceShutdown(b)
	return pciu
}

// SetNillablePoInterfaceShutdown sets the "po_interface_shutdown" field if the given value is not nil.
func (pciu *PortChannelInterfaceUpdate) SetNillablePoInterfaceShutdown(b *bool) *PortChannelInterfaceUpdate {
	if b != nil {
		pciu.SetPoInterfaceShutdown(*b)
	}
	return pciu
}

// SetModeID sets the "mode" edge to the NetInterfaceMode entity by ID.
func (pciu *PortChannelInterfaceUpdate) SetModeID(id int) *PortChannelInterfaceUpdate {
	pciu.mutation.SetModeID(id)
	return pciu
}

// SetNillableModeID sets the "mode" edge to the NetInterfaceMode entity by ID if the given value is not nil.
func (pciu *PortChannelInterfaceUpdate) SetNillableModeID(id *int) *PortChannelInterfaceUpdate {
	if id != nil {
		pciu = pciu.SetModeID(*id)
	}
	return pciu
}

// SetMode sets the "mode" edge to the NetInterfaceMode entity.
func (pciu *PortChannelInterfaceUpdate) SetMode(n *NetInterfaceMode) *PortChannelInterfaceUpdate {
	return pciu.SetModeID(n.ID)
}

// AddHaveVlanIDs adds the "have_vlans" edge to the Vlan entity by IDs.
func (pciu *PortChannelInterfaceUpdate) AddHaveVlanIDs(ids ...int) *PortChannelInterfaceUpdate {
	pciu.mutation.AddHaveVlanIDs(ids...)
	return pciu
}

// AddHaveVlans adds the "have_vlans" edges to the Vlan entity.
func (pciu *PortChannelInterfaceUpdate) AddHaveVlans(v ...*Vlan) *PortChannelInterfaceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pciu.AddHaveVlanIDs(ids...)
}

// SetNativeOnVlanID sets the "native_on_vlan" edge to the Vlan entity by ID.
func (pciu *PortChannelInterfaceUpdate) SetNativeOnVlanID(id int) *PortChannelInterfaceUpdate {
	pciu.mutation.SetNativeOnVlanID(id)
	return pciu
}

// SetNillableNativeOnVlanID sets the "native_on_vlan" edge to the Vlan entity by ID if the given value is not nil.
func (pciu *PortChannelInterfaceUpdate) SetNillableNativeOnVlanID(id *int) *PortChannelInterfaceUpdate {
	if id != nil {
		pciu = pciu.SetNativeOnVlanID(*id)
	}
	return pciu
}

// SetNativeOnVlan sets the "native_on_vlan" edge to the Vlan entity.
func (pciu *PortChannelInterfaceUpdate) SetNativeOnVlan(v *Vlan) *PortChannelInterfaceUpdate {
	return pciu.SetNativeOnVlanID(v.ID)
}

// SetOnDeviceID sets the "on_device" edge to the Device entity by ID.
func (pciu *PortChannelInterfaceUpdate) SetOnDeviceID(id int) *PortChannelInterfaceUpdate {
	pciu.mutation.SetOnDeviceID(id)
	return pciu
}

// SetNillableOnDeviceID sets the "on_device" edge to the Device entity by ID if the given value is not nil.
func (pciu *PortChannelInterfaceUpdate) SetNillableOnDeviceID(id *int) *PortChannelInterfaceUpdate {
	if id != nil {
		pciu = pciu.SetOnDeviceID(*id)
	}
	return pciu
}

// SetOnDevice sets the "on_device" edge to the Device entity.
func (pciu *PortChannelInterfaceUpdate) SetOnDevice(d *Device) *PortChannelInterfaceUpdate {
	return pciu.SetOnDeviceID(d.ID)
}

// AddInterfaceIDs adds the "interfaces" edge to the NetInterface entity by IDs.
func (pciu *PortChannelInterfaceUpdate) AddInterfaceIDs(ids ...int) *PortChannelInterfaceUpdate {
	pciu.mutation.AddInterfaceIDs(ids...)
	return pciu
}

// AddInterfaces adds the "interfaces" edges to the NetInterface entity.
func (pciu *PortChannelInterfaceUpdate) AddInterfaces(n ...*NetInterface) *PortChannelInterfaceUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pciu.AddInterfaceIDs(ids...)
}

// Mutation returns the PortChannelInterfaceMutation object of the builder.
func (pciu *PortChannelInterfaceUpdate) Mutation() *PortChannelInterfaceMutation {
	return pciu.mutation
}

// ClearMode clears the "mode" edge to the NetInterfaceMode entity.
func (pciu *PortChannelInterfaceUpdate) ClearMode() *PortChannelInterfaceUpdate {
	pciu.mutation.ClearMode()
	return pciu
}

// ClearHaveVlans clears all "have_vlans" edges to the Vlan entity.
func (pciu *PortChannelInterfaceUpdate) ClearHaveVlans() *PortChannelInterfaceUpdate {
	pciu.mutation.ClearHaveVlans()
	return pciu
}

// RemoveHaveVlanIDs removes the "have_vlans" edge to Vlan entities by IDs.
func (pciu *PortChannelInterfaceUpdate) RemoveHaveVlanIDs(ids ...int) *PortChannelInterfaceUpdate {
	pciu.mutation.RemoveHaveVlanIDs(ids...)
	return pciu
}

// RemoveHaveVlans removes "have_vlans" edges to Vlan entities.
func (pciu *PortChannelInterfaceUpdate) RemoveHaveVlans(v ...*Vlan) *PortChannelInterfaceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pciu.RemoveHaveVlanIDs(ids...)
}

// ClearNativeOnVlan clears the "native_on_vlan" edge to the Vlan entity.
func (pciu *PortChannelInterfaceUpdate) ClearNativeOnVlan() *PortChannelInterfaceUpdate {
	pciu.mutation.ClearNativeOnVlan()
	return pciu
}

// ClearOnDevice clears the "on_device" edge to the Device entity.
func (pciu *PortChannelInterfaceUpdate) ClearOnDevice() *PortChannelInterfaceUpdate {
	pciu.mutation.ClearOnDevice()
	return pciu
}

// ClearInterfaces clears all "interfaces" edges to the NetInterface entity.
func (pciu *PortChannelInterfaceUpdate) ClearInterfaces() *PortChannelInterfaceUpdate {
	pciu.mutation.ClearInterfaces()
	return pciu
}

// RemoveInterfaceIDs removes the "interfaces" edge to NetInterface entities by IDs.
func (pciu *PortChannelInterfaceUpdate) RemoveInterfaceIDs(ids ...int) *PortChannelInterfaceUpdate {
	pciu.mutation.RemoveInterfaceIDs(ids...)
	return pciu
}

// RemoveInterfaces removes "interfaces" edges to NetInterface entities.
func (pciu *PortChannelInterfaceUpdate) RemoveInterfaces(n ...*NetInterface) *PortChannelInterfaceUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pciu.RemoveInterfaceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pciu *PortChannelInterfaceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pciu.hooks) == 0 {
		if err = pciu.check(); err != nil {
			return 0, err
		}
		affected, err = pciu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PortChannelInterfaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pciu.check(); err != nil {
				return 0, err
			}
			pciu.mutation = mutation
			affected, err = pciu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pciu.hooks) - 1; i >= 0; i-- {
			mut = pciu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pciu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pciu *PortChannelInterfaceUpdate) SaveX(ctx context.Context) int {
	affected, err := pciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pciu *PortChannelInterfaceUpdate) Exec(ctx context.Context) error {
	_, err := pciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pciu *PortChannelInterfaceUpdate) ExecX(ctx context.Context) {
	if err := pciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pciu *PortChannelInterfaceUpdate) check() error {
	if v, ok := pciu.mutation.PoInterfaceID(); ok {
		if err := portchannelinterface.PoInterfaceIDValidator(v); err != nil {
			return &ValidationError{Name: "po_interface_id", err: fmt.Errorf("ent: validator failed for field \"po_interface_id\": %w", err)}
		}
	}
	return nil
}

func (pciu *PortChannelInterfaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   portchannelinterface.Table,
			Columns: portchannelinterface.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: portchannelinterface.FieldID,
			},
		},
	}
	if ps := pciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pciu.mutation.PoInterfaceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: portchannelinterface.FieldPoInterfaceID,
		})
	}
	if value, ok := pciu.mutation.AddedPoInterfaceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: portchannelinterface.FieldPoInterfaceID,
		})
	}
	if value, ok := pciu.mutation.PoInterfaceShutdown(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: portchannelinterface.FieldPoInterfaceShutdown,
		})
	}
	if pciu.mutation.ModeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portchannelinterface.ModeTable,
			Columns: []string{portchannelinterface.ModeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterfacemode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pciu.mutation.ModeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portchannelinterface.ModeTable,
			Columns: []string{portchannelinterface.ModeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterfacemode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pciu.mutation.HaveVlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   portchannelinterface.HaveVlansTable,
			Columns: portchannelinterface.HaveVlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pciu.mutation.RemovedHaveVlansIDs(); len(nodes) > 0 && !pciu.mutation.HaveVlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   portchannelinterface.HaveVlansTable,
			Columns: portchannelinterface.HaveVlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pciu.mutation.HaveVlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   portchannelinterface.HaveVlansTable,
			Columns: portchannelinterface.HaveVlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pciu.mutation.NativeOnVlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portchannelinterface.NativeOnVlanTable,
			Columns: []string{portchannelinterface.NativeOnVlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pciu.mutation.NativeOnVlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portchannelinterface.NativeOnVlanTable,
			Columns: []string{portchannelinterface.NativeOnVlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pciu.mutation.OnDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portchannelinterface.OnDeviceTable,
			Columns: []string{portchannelinterface.OnDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pciu.mutation.OnDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portchannelinterface.OnDeviceTable,
			Columns: []string{portchannelinterface.OnDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pciu.mutation.InterfacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portchannelinterface.InterfacesTable,
			Columns: []string{portchannelinterface.InterfacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pciu.mutation.RemovedInterfacesIDs(); len(nodes) > 0 && !pciu.mutation.InterfacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portchannelinterface.InterfacesTable,
			Columns: []string{portchannelinterface.InterfacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pciu.mutation.InterfacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portchannelinterface.InterfacesTable,
			Columns: []string{portchannelinterface.InterfacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portchannelinterface.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PortChannelInterfaceUpdateOne is the builder for updating a single PortChannelInterface entity.
type PortChannelInterfaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PortChannelInterfaceMutation
}

// SetPoInterfaceID sets the "po_interface_id" field.
func (pciuo *PortChannelInterfaceUpdateOne) SetPoInterfaceID(i int) *PortChannelInterfaceUpdateOne {
	pciuo.mutation.ResetPoInterfaceID()
	pciuo.mutation.SetPoInterfaceID(i)
	return pciuo
}

// AddPoInterfaceID adds i to the "po_interface_id" field.
func (pciuo *PortChannelInterfaceUpdateOne) AddPoInterfaceID(i int) *PortChannelInterfaceUpdateOne {
	pciuo.mutation.AddPoInterfaceID(i)
	return pciuo
}

// SetPoInterfaceShutdown sets the "po_interface_shutdown" field.
func (pciuo *PortChannelInterfaceUpdateOne) SetPoInterfaceShutdown(b bool) *PortChannelInterfaceUpdateOne {
	pciuo.mutation.SetPoInterfaceShutdown(b)
	return pciuo
}

// SetNillablePoInterfaceShutdown sets the "po_interface_shutdown" field if the given value is not nil.
func (pciuo *PortChannelInterfaceUpdateOne) SetNillablePoInterfaceShutdown(b *bool) *PortChannelInterfaceUpdateOne {
	if b != nil {
		pciuo.SetPoInterfaceShutdown(*b)
	}
	return pciuo
}

// SetModeID sets the "mode" edge to the NetInterfaceMode entity by ID.
func (pciuo *PortChannelInterfaceUpdateOne) SetModeID(id int) *PortChannelInterfaceUpdateOne {
	pciuo.mutation.SetModeID(id)
	return pciuo
}

// SetNillableModeID sets the "mode" edge to the NetInterfaceMode entity by ID if the given value is not nil.
func (pciuo *PortChannelInterfaceUpdateOne) SetNillableModeID(id *int) *PortChannelInterfaceUpdateOne {
	if id != nil {
		pciuo = pciuo.SetModeID(*id)
	}
	return pciuo
}

// SetMode sets the "mode" edge to the NetInterfaceMode entity.
func (pciuo *PortChannelInterfaceUpdateOne) SetMode(n *NetInterfaceMode) *PortChannelInterfaceUpdateOne {
	return pciuo.SetModeID(n.ID)
}

// AddHaveVlanIDs adds the "have_vlans" edge to the Vlan entity by IDs.
func (pciuo *PortChannelInterfaceUpdateOne) AddHaveVlanIDs(ids ...int) *PortChannelInterfaceUpdateOne {
	pciuo.mutation.AddHaveVlanIDs(ids...)
	return pciuo
}

// AddHaveVlans adds the "have_vlans" edges to the Vlan entity.
func (pciuo *PortChannelInterfaceUpdateOne) AddHaveVlans(v ...*Vlan) *PortChannelInterfaceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pciuo.AddHaveVlanIDs(ids...)
}

// SetNativeOnVlanID sets the "native_on_vlan" edge to the Vlan entity by ID.
func (pciuo *PortChannelInterfaceUpdateOne) SetNativeOnVlanID(id int) *PortChannelInterfaceUpdateOne {
	pciuo.mutation.SetNativeOnVlanID(id)
	return pciuo
}

// SetNillableNativeOnVlanID sets the "native_on_vlan" edge to the Vlan entity by ID if the given value is not nil.
func (pciuo *PortChannelInterfaceUpdateOne) SetNillableNativeOnVlanID(id *int) *PortChannelInterfaceUpdateOne {
	if id != nil {
		pciuo = pciuo.SetNativeOnVlanID(*id)
	}
	return pciuo
}

// SetNativeOnVlan sets the "native_on_vlan" edge to the Vlan entity.
func (pciuo *PortChannelInterfaceUpdateOne) SetNativeOnVlan(v *Vlan) *PortChannelInterfaceUpdateOne {
	return pciuo.SetNativeOnVlanID(v.ID)
}

// SetOnDeviceID sets the "on_device" edge to the Device entity by ID.
func (pciuo *PortChannelInterfaceUpdateOne) SetOnDeviceID(id int) *PortChannelInterfaceUpdateOne {
	pciuo.mutation.SetOnDeviceID(id)
	return pciuo
}

// SetNillableOnDeviceID sets the "on_device" edge to the Device entity by ID if the given value is not nil.
func (pciuo *PortChannelInterfaceUpdateOne) SetNillableOnDeviceID(id *int) *PortChannelInterfaceUpdateOne {
	if id != nil {
		pciuo = pciuo.SetOnDeviceID(*id)
	}
	return pciuo
}

// SetOnDevice sets the "on_device" edge to the Device entity.
func (pciuo *PortChannelInterfaceUpdateOne) SetOnDevice(d *Device) *PortChannelInterfaceUpdateOne {
	return pciuo.SetOnDeviceID(d.ID)
}

// AddInterfaceIDs adds the "interfaces" edge to the NetInterface entity by IDs.
func (pciuo *PortChannelInterfaceUpdateOne) AddInterfaceIDs(ids ...int) *PortChannelInterfaceUpdateOne {
	pciuo.mutation.AddInterfaceIDs(ids...)
	return pciuo
}

// AddInterfaces adds the "interfaces" edges to the NetInterface entity.
func (pciuo *PortChannelInterfaceUpdateOne) AddInterfaces(n ...*NetInterface) *PortChannelInterfaceUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pciuo.AddInterfaceIDs(ids...)
}

// Mutation returns the PortChannelInterfaceMutation object of the builder.
func (pciuo *PortChannelInterfaceUpdateOne) Mutation() *PortChannelInterfaceMutation {
	return pciuo.mutation
}

// ClearMode clears the "mode" edge to the NetInterfaceMode entity.
func (pciuo *PortChannelInterfaceUpdateOne) ClearMode() *PortChannelInterfaceUpdateOne {
	pciuo.mutation.ClearMode()
	return pciuo
}

// ClearHaveVlans clears all "have_vlans" edges to the Vlan entity.
func (pciuo *PortChannelInterfaceUpdateOne) ClearHaveVlans() *PortChannelInterfaceUpdateOne {
	pciuo.mutation.ClearHaveVlans()
	return pciuo
}

// RemoveHaveVlanIDs removes the "have_vlans" edge to Vlan entities by IDs.
func (pciuo *PortChannelInterfaceUpdateOne) RemoveHaveVlanIDs(ids ...int) *PortChannelInterfaceUpdateOne {
	pciuo.mutation.RemoveHaveVlanIDs(ids...)
	return pciuo
}

// RemoveHaveVlans removes "have_vlans" edges to Vlan entities.
func (pciuo *PortChannelInterfaceUpdateOne) RemoveHaveVlans(v ...*Vlan) *PortChannelInterfaceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pciuo.RemoveHaveVlanIDs(ids...)
}

// ClearNativeOnVlan clears the "native_on_vlan" edge to the Vlan entity.
func (pciuo *PortChannelInterfaceUpdateOne) ClearNativeOnVlan() *PortChannelInterfaceUpdateOne {
	pciuo.mutation.ClearNativeOnVlan()
	return pciuo
}

// ClearOnDevice clears the "on_device" edge to the Device entity.
func (pciuo *PortChannelInterfaceUpdateOne) ClearOnDevice() *PortChannelInterfaceUpdateOne {
	pciuo.mutation.ClearOnDevice()
	return pciuo
}

// ClearInterfaces clears all "interfaces" edges to the NetInterface entity.
func (pciuo *PortChannelInterfaceUpdateOne) ClearInterfaces() *PortChannelInterfaceUpdateOne {
	pciuo.mutation.ClearInterfaces()
	return pciuo
}

// RemoveInterfaceIDs removes the "interfaces" edge to NetInterface entities by IDs.
func (pciuo *PortChannelInterfaceUpdateOne) RemoveInterfaceIDs(ids ...int) *PortChannelInterfaceUpdateOne {
	pciuo.mutation.RemoveInterfaceIDs(ids...)
	return pciuo
}

// RemoveInterfaces removes "interfaces" edges to NetInterface entities.
func (pciuo *PortChannelInterfaceUpdateOne) RemoveInterfaces(n ...*NetInterface) *PortChannelInterfaceUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pciuo.RemoveInterfaceIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pciuo *PortChannelInterfaceUpdateOne) Select(field string, fields ...string) *PortChannelInterfaceUpdateOne {
	pciuo.fields = append([]string{field}, fields...)
	return pciuo
}

// Save executes the query and returns the updated PortChannelInterface entity.
func (pciuo *PortChannelInterfaceUpdateOne) Save(ctx context.Context) (*PortChannelInterface, error) {
	var (
		err  error
		node *PortChannelInterface
	)
	if len(pciuo.hooks) == 0 {
		if err = pciuo.check(); err != nil {
			return nil, err
		}
		node, err = pciuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PortChannelInterfaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pciuo.check(); err != nil {
				return nil, err
			}
			pciuo.mutation = mutation
			node, err = pciuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pciuo.hooks) - 1; i >= 0; i-- {
			mut = pciuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pciuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pciuo *PortChannelInterfaceUpdateOne) SaveX(ctx context.Context) *PortChannelInterface {
	node, err := pciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pciuo *PortChannelInterfaceUpdateOne) Exec(ctx context.Context) error {
	_, err := pciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pciuo *PortChannelInterfaceUpdateOne) ExecX(ctx context.Context) {
	if err := pciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pciuo *PortChannelInterfaceUpdateOne) check() error {
	if v, ok := pciuo.mutation.PoInterfaceID(); ok {
		if err := portchannelinterface.PoInterfaceIDValidator(v); err != nil {
			return &ValidationError{Name: "po_interface_id", err: fmt.Errorf("ent: validator failed for field \"po_interface_id\": %w", err)}
		}
	}
	return nil
}

func (pciuo *PortChannelInterfaceUpdateOne) sqlSave(ctx context.Context) (_node *PortChannelInterface, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   portchannelinterface.Table,
			Columns: portchannelinterface.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: portchannelinterface.FieldID,
			},
		},
	}
	id, ok := pciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PortChannelInterface.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, portchannelinterface.FieldID)
		for _, f := range fields {
			if !portchannelinterface.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != portchannelinterface.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pciuo.mutation.PoInterfaceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: portchannelinterface.FieldPoInterfaceID,
		})
	}
	if value, ok := pciuo.mutation.AddedPoInterfaceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: portchannelinterface.FieldPoInterfaceID,
		})
	}
	if value, ok := pciuo.mutation.PoInterfaceShutdown(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: portchannelinterface.FieldPoInterfaceShutdown,
		})
	}
	if pciuo.mutation.ModeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portchannelinterface.ModeTable,
			Columns: []string{portchannelinterface.ModeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterfacemode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pciuo.mutation.ModeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portchannelinterface.ModeTable,
			Columns: []string{portchannelinterface.ModeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterfacemode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pciuo.mutation.HaveVlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   portchannelinterface.HaveVlansTable,
			Columns: portchannelinterface.HaveVlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pciuo.mutation.RemovedHaveVlansIDs(); len(nodes) > 0 && !pciuo.mutation.HaveVlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   portchannelinterface.HaveVlansTable,
			Columns: portchannelinterface.HaveVlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pciuo.mutation.HaveVlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   portchannelinterface.HaveVlansTable,
			Columns: portchannelinterface.HaveVlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pciuo.mutation.NativeOnVlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portchannelinterface.NativeOnVlanTable,
			Columns: []string{portchannelinterface.NativeOnVlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pciuo.mutation.NativeOnVlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portchannelinterface.NativeOnVlanTable,
			Columns: []string{portchannelinterface.NativeOnVlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pciuo.mutation.OnDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portchannelinterface.OnDeviceTable,
			Columns: []string{portchannelinterface.OnDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pciuo.mutation.OnDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portchannelinterface.OnDeviceTable,
			Columns: []string{portchannelinterface.OnDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pciuo.mutation.InterfacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portchannelinterface.InterfacesTable,
			Columns: []string{portchannelinterface.InterfacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pciuo.mutation.RemovedInterfacesIDs(); len(nodes) > 0 && !pciuo.mutation.InterfacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portchannelinterface.InterfacesTable,
			Columns: []string{portchannelinterface.InterfacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pciuo.mutation.InterfacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portchannelinterface.InterfacesTable,
			Columns: []string{portchannelinterface.InterfacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PortChannelInterface{config: pciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portchannelinterface.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
