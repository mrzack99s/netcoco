// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/mrzack99s/netcoco/ent/device"
	"github.com/mrzack99s/netcoco/ent/nettopology"
	"github.com/mrzack99s/netcoco/ent/nettopologydevicemap"
)

// NetTopologyDeviceMap is the model entity for the NetTopologyDeviceMap schema.
type NetTopologyDeviceMap struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PositionX holds the value of the "position_x" field.
	PositionX int `json:"position_x,omitempty"`
	// PositionY holds the value of the "position_y" field.
	PositionY int `json:"position_y,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NetTopologyDeviceMapQuery when eager-loading is set.
	Edges                 NetTopologyDeviceMapEdges `json:"edges"`
	device_in_topology    *int
	net_topology_topology *int
}

// NetTopologyDeviceMapEdges holds the relations/edges for other nodes in the graph.
type NetTopologyDeviceMapEdges struct {
	// OnTopology holds the value of the on_topology edge.
	OnTopology *NetTopology `json:"on_topology,omitempty"`
	// Device holds the value of the device edge.
	Device *Device `json:"device,omitempty"`
	// Edge holds the value of the edge edge.
	Edge []*NetTopologyDeviceMap `json:"edge,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OnTopologyOrErr returns the OnTopology value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NetTopologyDeviceMapEdges) OnTopologyOrErr() (*NetTopology, error) {
	if e.loadedTypes[0] {
		if e.OnTopology == nil {
			// The edge on_topology was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: nettopology.Label}
		}
		return e.OnTopology, nil
	}
	return nil, &NotLoadedError{edge: "on_topology"}
}

// DeviceOrErr returns the Device value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NetTopologyDeviceMapEdges) DeviceOrErr() (*Device, error) {
	if e.loadedTypes[1] {
		if e.Device == nil {
			// The edge device was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: device.Label}
		}
		return e.Device, nil
	}
	return nil, &NotLoadedError{edge: "device"}
}

// EdgeOrErr returns the Edge value or an error if the edge
// was not loaded in eager-loading.
func (e NetTopologyDeviceMapEdges) EdgeOrErr() ([]*NetTopologyDeviceMap, error) {
	if e.loadedTypes[2] {
		return e.Edge, nil
	}
	return nil, &NotLoadedError{edge: "edge"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NetTopologyDeviceMap) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case nettopologydevicemap.FieldID, nettopologydevicemap.FieldPositionX, nettopologydevicemap.FieldPositionY:
			values[i] = new(sql.NullInt64)
		case nettopologydevicemap.ForeignKeys[0]: // device_in_topology
			values[i] = new(sql.NullInt64)
		case nettopologydevicemap.ForeignKeys[1]: // net_topology_topology
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NetTopologyDeviceMap", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NetTopologyDeviceMap fields.
func (ntdm *NetTopologyDeviceMap) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nettopologydevicemap.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ntdm.ID = int(value.Int64)
		case nettopologydevicemap.FieldPositionX:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field position_x", values[i])
			} else if value.Valid {
				ntdm.PositionX = int(value.Int64)
			}
		case nettopologydevicemap.FieldPositionY:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field position_y", values[i])
			} else if value.Valid {
				ntdm.PositionY = int(value.Int64)
			}
		case nettopologydevicemap.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field device_in_topology", value)
			} else if value.Valid {
				ntdm.device_in_topology = new(int)
				*ntdm.device_in_topology = int(value.Int64)
			}
		case nettopologydevicemap.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field net_topology_topology", value)
			} else if value.Valid {
				ntdm.net_topology_topology = new(int)
				*ntdm.net_topology_topology = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOnTopology queries the "on_topology" edge of the NetTopologyDeviceMap entity.
func (ntdm *NetTopologyDeviceMap) QueryOnTopology() *NetTopologyQuery {
	return (&NetTopologyDeviceMapClient{config: ntdm.config}).QueryOnTopology(ntdm)
}

// QueryDevice queries the "device" edge of the NetTopologyDeviceMap entity.
func (ntdm *NetTopologyDeviceMap) QueryDevice() *DeviceQuery {
	return (&NetTopologyDeviceMapClient{config: ntdm.config}).QueryDevice(ntdm)
}

// QueryEdge queries the "edge" edge of the NetTopologyDeviceMap entity.
func (ntdm *NetTopologyDeviceMap) QueryEdge() *NetTopologyDeviceMapQuery {
	return (&NetTopologyDeviceMapClient{config: ntdm.config}).QueryEdge(ntdm)
}

// Update returns a builder for updating this NetTopologyDeviceMap.
// Note that you need to call NetTopologyDeviceMap.Unwrap() before calling this method if this NetTopologyDeviceMap
// was returned from a transaction, and the transaction was committed or rolled back.
func (ntdm *NetTopologyDeviceMap) Update() *NetTopologyDeviceMapUpdateOne {
	return (&NetTopologyDeviceMapClient{config: ntdm.config}).UpdateOne(ntdm)
}

// Unwrap unwraps the NetTopologyDeviceMap entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ntdm *NetTopologyDeviceMap) Unwrap() *NetTopologyDeviceMap {
	tx, ok := ntdm.config.driver.(*txDriver)
	if !ok {
		panic("ent: NetTopologyDeviceMap is not a transactional entity")
	}
	ntdm.config.driver = tx.drv
	return ntdm
}

// String implements the fmt.Stringer.
func (ntdm *NetTopologyDeviceMap) String() string {
	var builder strings.Builder
	builder.WriteString("NetTopologyDeviceMap(")
	builder.WriteString(fmt.Sprintf("id=%v", ntdm.ID))
	builder.WriteString(", position_x=")
	builder.WriteString(fmt.Sprintf("%v", ntdm.PositionX))
	builder.WriteString(", position_y=")
	builder.WriteString(fmt.Sprintf("%v", ntdm.PositionY))
	builder.WriteByte(')')
	return builder.String()
}

// NetTopologyDeviceMaps is a parsable slice of NetTopologyDeviceMap.
type NetTopologyDeviceMaps []*NetTopologyDeviceMap

func (ntdm NetTopologyDeviceMaps) config(cfg config) {
	for _i := range ntdm {
		ntdm[_i].config = cfg
	}
}
