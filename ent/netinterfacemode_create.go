// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/netinterface"
	"github.com/mrzack99s/netcoco/ent/netinterfacemode"
	"github.com/mrzack99s/netcoco/ent/portchannelinterface"
)

// NetInterfaceModeCreate is the builder for creating a NetInterfaceMode entity.
type NetInterfaceModeCreate struct {
	config
	mutation *NetInterfaceModeMutation
	hooks    []Hook
}

// SetInterfaceMode sets the "interface_mode" field.
func (nimc *NetInterfaceModeCreate) SetInterfaceMode(s string) *NetInterfaceModeCreate {
	nimc.mutation.SetInterfaceMode(s)
	return nimc
}

// AddModeIDs adds the "modes" edge to the NetInterface entity by IDs.
func (nimc *NetInterfaceModeCreate) AddModeIDs(ids ...int) *NetInterfaceModeCreate {
	nimc.mutation.AddModeIDs(ids...)
	return nimc
}

// AddModes adds the "modes" edges to the NetInterface entity.
func (nimc *NetInterfaceModeCreate) AddModes(n ...*NetInterface) *NetInterfaceModeCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nimc.AddModeIDs(ids...)
}

// AddPoModeIDs adds the "po_modes" edge to the PortChannelInterface entity by IDs.
func (nimc *NetInterfaceModeCreate) AddPoModeIDs(ids ...int) *NetInterfaceModeCreate {
	nimc.mutation.AddPoModeIDs(ids...)
	return nimc
}

// AddPoModes adds the "po_modes" edges to the PortChannelInterface entity.
func (nimc *NetInterfaceModeCreate) AddPoModes(p ...*PortChannelInterface) *NetInterfaceModeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nimc.AddPoModeIDs(ids...)
}

// Mutation returns the NetInterfaceModeMutation object of the builder.
func (nimc *NetInterfaceModeCreate) Mutation() *NetInterfaceModeMutation {
	return nimc.mutation
}

// Save creates the NetInterfaceMode in the database.
func (nimc *NetInterfaceModeCreate) Save(ctx context.Context) (*NetInterfaceMode, error) {
	var (
		err  error
		node *NetInterfaceMode
	)
	if len(nimc.hooks) == 0 {
		if err = nimc.check(); err != nil {
			return nil, err
		}
		node, err = nimc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetInterfaceModeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nimc.check(); err != nil {
				return nil, err
			}
			nimc.mutation = mutation
			node, err = nimc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nimc.hooks) - 1; i >= 0; i-- {
			mut = nimc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nimc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nimc *NetInterfaceModeCreate) SaveX(ctx context.Context) *NetInterfaceMode {
	v, err := nimc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (nimc *NetInterfaceModeCreate) check() error {
	if _, ok := nimc.mutation.InterfaceMode(); !ok {
		return &ValidationError{Name: "interface_mode", err: errors.New("ent: missing required field \"interface_mode\"")}
	}
	if v, ok := nimc.mutation.InterfaceMode(); ok {
		if err := netinterfacemode.InterfaceModeValidator(v); err != nil {
			return &ValidationError{Name: "interface_mode", err: fmt.Errorf("ent: validator failed for field \"interface_mode\": %w", err)}
		}
	}
	return nil
}

func (nimc *NetInterfaceModeCreate) sqlSave(ctx context.Context) (*NetInterfaceMode, error) {
	_node, _spec := nimc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nimc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (nimc *NetInterfaceModeCreate) createSpec() (*NetInterfaceMode, *sqlgraph.CreateSpec) {
	var (
		_node = &NetInterfaceMode{config: nimc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: netinterfacemode.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: netinterfacemode.FieldID,
			},
		}
	)
	if value, ok := nimc.mutation.InterfaceMode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: netinterfacemode.FieldInterfaceMode,
		})
		_node.InterfaceMode = value
	}
	if nodes := nimc.mutation.ModesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacemode.ModesTable,
			Columns: []string{netinterfacemode.ModesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nimc.mutation.PoModesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacemode.PoModesTable,
			Columns: []string{netinterfacemode.PoModesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portchannelinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NetInterfaceModeCreateBulk is the builder for creating many NetInterfaceMode entities in bulk.
type NetInterfaceModeCreateBulk struct {
	config
	builders []*NetInterfaceModeCreate
}

// Save creates the NetInterfaceMode entities in the database.
func (nimcb *NetInterfaceModeCreateBulk) Save(ctx context.Context) ([]*NetInterfaceMode, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nimcb.builders))
	nodes := make([]*NetInterfaceMode, len(nimcb.builders))
	mutators := make([]Mutator, len(nimcb.builders))
	for i := range nimcb.builders {
		func(i int, root context.Context) {
			builder := nimcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NetInterfaceModeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nimcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nimcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nimcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nimcb *NetInterfaceModeCreateBulk) SaveX(ctx context.Context) []*NetInterfaceMode {
	v, err := nimcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
