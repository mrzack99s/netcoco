// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/device"
	"github.com/mrzack99s/netcoco/ent/netinterface"
	"github.com/mrzack99s/netcoco/ent/netinterfacemode"
	"github.com/mrzack99s/netcoco/ent/portchannelinterface"
	"github.com/mrzack99s/netcoco/ent/vlan"
)

// PortChannelInterfaceCreate is the builder for creating a PortChannelInterface entity.
type PortChannelInterfaceCreate struct {
	config
	mutation *PortChannelInterfaceMutation
	hooks    []Hook
}

// SetPoInterfaceID sets the "po_interface_id" field.
func (pcic *PortChannelInterfaceCreate) SetPoInterfaceID(i int) *PortChannelInterfaceCreate {
	pcic.mutation.SetPoInterfaceID(i)
	return pcic
}

// SetPoInterfaceShutdown sets the "po_interface_shutdown" field.
func (pcic *PortChannelInterfaceCreate) SetPoInterfaceShutdown(b bool) *PortChannelInterfaceCreate {
	pcic.mutation.SetPoInterfaceShutdown(b)
	return pcic
}

// SetNillablePoInterfaceShutdown sets the "po_interface_shutdown" field if the given value is not nil.
func (pcic *PortChannelInterfaceCreate) SetNillablePoInterfaceShutdown(b *bool) *PortChannelInterfaceCreate {
	if b != nil {
		pcic.SetPoInterfaceShutdown(*b)
	}
	return pcic
}

// SetModeID sets the "mode" edge to the NetInterfaceMode entity by ID.
func (pcic *PortChannelInterfaceCreate) SetModeID(id int) *PortChannelInterfaceCreate {
	pcic.mutation.SetModeID(id)
	return pcic
}

// SetNillableModeID sets the "mode" edge to the NetInterfaceMode entity by ID if the given value is not nil.
func (pcic *PortChannelInterfaceCreate) SetNillableModeID(id *int) *PortChannelInterfaceCreate {
	if id != nil {
		pcic = pcic.SetModeID(*id)
	}
	return pcic
}

// SetMode sets the "mode" edge to the NetInterfaceMode entity.
func (pcic *PortChannelInterfaceCreate) SetMode(n *NetInterfaceMode) *PortChannelInterfaceCreate {
	return pcic.SetModeID(n.ID)
}

// AddHaveVlanIDs adds the "have_vlans" edge to the Vlan entity by IDs.
func (pcic *PortChannelInterfaceCreate) AddHaveVlanIDs(ids ...int) *PortChannelInterfaceCreate {
	pcic.mutation.AddHaveVlanIDs(ids...)
	return pcic
}

// AddHaveVlans adds the "have_vlans" edges to the Vlan entity.
func (pcic *PortChannelInterfaceCreate) AddHaveVlans(v ...*Vlan) *PortChannelInterfaceCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pcic.AddHaveVlanIDs(ids...)
}

// SetNativeOnVlanID sets the "native_on_vlan" edge to the Vlan entity by ID.
func (pcic *PortChannelInterfaceCreate) SetNativeOnVlanID(id int) *PortChannelInterfaceCreate {
	pcic.mutation.SetNativeOnVlanID(id)
	return pcic
}

// SetNillableNativeOnVlanID sets the "native_on_vlan" edge to the Vlan entity by ID if the given value is not nil.
func (pcic *PortChannelInterfaceCreate) SetNillableNativeOnVlanID(id *int) *PortChannelInterfaceCreate {
	if id != nil {
		pcic = pcic.SetNativeOnVlanID(*id)
	}
	return pcic
}

// SetNativeOnVlan sets the "native_on_vlan" edge to the Vlan entity.
func (pcic *PortChannelInterfaceCreate) SetNativeOnVlan(v *Vlan) *PortChannelInterfaceCreate {
	return pcic.SetNativeOnVlanID(v.ID)
}

// SetOnDeviceID sets the "on_device" edge to the Device entity by ID.
func (pcic *PortChannelInterfaceCreate) SetOnDeviceID(id int) *PortChannelInterfaceCreate {
	pcic.mutation.SetOnDeviceID(id)
	return pcic
}

// SetNillableOnDeviceID sets the "on_device" edge to the Device entity by ID if the given value is not nil.
func (pcic *PortChannelInterfaceCreate) SetNillableOnDeviceID(id *int) *PortChannelInterfaceCreate {
	if id != nil {
		pcic = pcic.SetOnDeviceID(*id)
	}
	return pcic
}

// SetOnDevice sets the "on_device" edge to the Device entity.
func (pcic *PortChannelInterfaceCreate) SetOnDevice(d *Device) *PortChannelInterfaceCreate {
	return pcic.SetOnDeviceID(d.ID)
}

// AddInterfaceIDs adds the "interfaces" edge to the NetInterface entity by IDs.
func (pcic *PortChannelInterfaceCreate) AddInterfaceIDs(ids ...int) *PortChannelInterfaceCreate {
	pcic.mutation.AddInterfaceIDs(ids...)
	return pcic
}

// AddInterfaces adds the "interfaces" edges to the NetInterface entity.
func (pcic *PortChannelInterfaceCreate) AddInterfaces(n ...*NetInterface) *PortChannelInterfaceCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pcic.AddInterfaceIDs(ids...)
}

// Mutation returns the PortChannelInterfaceMutation object of the builder.
func (pcic *PortChannelInterfaceCreate) Mutation() *PortChannelInterfaceMutation {
	return pcic.mutation
}

// Save creates the PortChannelInterface in the database.
func (pcic *PortChannelInterfaceCreate) Save(ctx context.Context) (*PortChannelInterface, error) {
	var (
		err  error
		node *PortChannelInterface
	)
	pcic.defaults()
	if len(pcic.hooks) == 0 {
		if err = pcic.check(); err != nil {
			return nil, err
		}
		node, err = pcic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PortChannelInterfaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcic.check(); err != nil {
				return nil, err
			}
			pcic.mutation = mutation
			node, err = pcic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pcic.hooks) - 1; i >= 0; i-- {
			mut = pcic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pcic *PortChannelInterfaceCreate) SaveX(ctx context.Context) *PortChannelInterface {
	v, err := pcic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pcic *PortChannelInterfaceCreate) defaults() {
	if _, ok := pcic.mutation.PoInterfaceShutdown(); !ok {
		v := portchannelinterface.DefaultPoInterfaceShutdown
		pcic.mutation.SetPoInterfaceShutdown(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcic *PortChannelInterfaceCreate) check() error {
	if _, ok := pcic.mutation.PoInterfaceID(); !ok {
		return &ValidationError{Name: "po_interface_id", err: errors.New("ent: missing required field \"po_interface_id\"")}
	}
	if v, ok := pcic.mutation.PoInterfaceID(); ok {
		if err := portchannelinterface.PoInterfaceIDValidator(v); err != nil {
			return &ValidationError{Name: "po_interface_id", err: fmt.Errorf("ent: validator failed for field \"po_interface_id\": %w", err)}
		}
	}
	if _, ok := pcic.mutation.PoInterfaceShutdown(); !ok {
		return &ValidationError{Name: "po_interface_shutdown", err: errors.New("ent: missing required field \"po_interface_shutdown\"")}
	}
	return nil
}

func (pcic *PortChannelInterfaceCreate) sqlSave(ctx context.Context) (*PortChannelInterface, error) {
	_node, _spec := pcic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pcic *PortChannelInterfaceCreate) createSpec() (*PortChannelInterface, *sqlgraph.CreateSpec) {
	var (
		_node = &PortChannelInterface{config: pcic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: portchannelinterface.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: portchannelinterface.FieldID,
			},
		}
	)
	if value, ok := pcic.mutation.PoInterfaceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: portchannelinterface.FieldPoInterfaceID,
		})
		_node.PoInterfaceID = value
	}
	if value, ok := pcic.mutation.PoInterfaceShutdown(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: portchannelinterface.FieldPoInterfaceShutdown,
		})
		_node.PoInterfaceShutdown = value
	}
	if nodes := pcic.mutation.ModeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portchannelinterface.ModeTable,
			Columns: []string{portchannelinterface.ModeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterfacemode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.net_interface_mode_po_modes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcic.mutation.HaveVlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   portchannelinterface.HaveVlansTable,
			Columns: portchannelinterface.HaveVlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcic.mutation.NativeOnVlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portchannelinterface.NativeOnVlanTable,
			Columns: []string{portchannelinterface.NativeOnVlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vlan_po_native_vlan = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcic.mutation.OnDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portchannelinterface.OnDeviceTable,
			Columns: []string{portchannelinterface.OnDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.device_po_interfaces = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcic.mutation.InterfacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portchannelinterface.InterfacesTable,
			Columns: []string{portchannelinterface.InterfacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PortChannelInterfaceCreateBulk is the builder for creating many PortChannelInterface entities in bulk.
type PortChannelInterfaceCreateBulk struct {
	config
	builders []*PortChannelInterfaceCreate
}

// Save creates the PortChannelInterface entities in the database.
func (pcicb *PortChannelInterfaceCreateBulk) Save(ctx context.Context) ([]*PortChannelInterface, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcicb.builders))
	nodes := make([]*PortChannelInterface, len(pcicb.builders))
	mutators := make([]Mutator, len(pcicb.builders))
	for i := range pcicb.builders {
		func(i int, root context.Context) {
			builder := pcicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PortChannelInterfaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcicb *PortChannelInterfaceCreateBulk) SaveX(ctx context.Context) []*PortChannelInterface {
	v, err := pcicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
