// Code generated by entc, DO NOT EDIT.

package devicetype

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mrzack99s/netcoco/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DeviceTypeName applies equality check predicate on the "device_type_name" field. It's identical to DeviceTypeNameEQ.
func DeviceTypeName(v string) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceTypeName), v))
	})
}

// DeviceTypeNameEQ applies the EQ predicate on the "device_type_name" field.
func DeviceTypeNameEQ(v string) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceTypeName), v))
	})
}

// DeviceTypeNameNEQ applies the NEQ predicate on the "device_type_name" field.
func DeviceTypeNameNEQ(v string) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeviceTypeName), v))
	})
}

// DeviceTypeNameIn applies the In predicate on the "device_type_name" field.
func DeviceTypeNameIn(vs ...string) predicate.DeviceType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeviceType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeviceTypeName), v...))
	})
}

// DeviceTypeNameNotIn applies the NotIn predicate on the "device_type_name" field.
func DeviceTypeNameNotIn(vs ...string) predicate.DeviceType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeviceType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeviceTypeName), v...))
	})
}

// DeviceTypeNameGT applies the GT predicate on the "device_type_name" field.
func DeviceTypeNameGT(v string) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeviceTypeName), v))
	})
}

// DeviceTypeNameGTE applies the GTE predicate on the "device_type_name" field.
func DeviceTypeNameGTE(v string) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeviceTypeName), v))
	})
}

// DeviceTypeNameLT applies the LT predicate on the "device_type_name" field.
func DeviceTypeNameLT(v string) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeviceTypeName), v))
	})
}

// DeviceTypeNameLTE applies the LTE predicate on the "device_type_name" field.
func DeviceTypeNameLTE(v string) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeviceTypeName), v))
	})
}

// DeviceTypeNameContains applies the Contains predicate on the "device_type_name" field.
func DeviceTypeNameContains(v string) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeviceTypeName), v))
	})
}

// DeviceTypeNameHasPrefix applies the HasPrefix predicate on the "device_type_name" field.
func DeviceTypeNameHasPrefix(v string) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeviceTypeName), v))
	})
}

// DeviceTypeNameHasSuffix applies the HasSuffix predicate on the "device_type_name" field.
func DeviceTypeNameHasSuffix(v string) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeviceTypeName), v))
	})
}

// DeviceTypeNameEqualFold applies the EqualFold predicate on the "device_type_name" field.
func DeviceTypeNameEqualFold(v string) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeviceTypeName), v))
	})
}

// DeviceTypeNameContainsFold applies the ContainsFold predicate on the "device_type_name" field.
func DeviceTypeNameContainsFold(v string) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeviceTypeName), v))
	})
}

// HasTypes applies the HasEdge predicate on the "types" edge.
func HasTypes() predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TypesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TypesTable, TypesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTypesWith applies the HasEdge predicate on the "types" edge with a given conditions (other predicates).
func HasTypesWith(preds ...predicate.Device) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TypesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TypesTable, TypesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DeviceType) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DeviceType) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeviceType) predicate.DeviceType {
	return predicate.DeviceType(func(s *sql.Selector) {
		p(s.Not())
	})
}
