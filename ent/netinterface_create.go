// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/device"
	"github.com/mrzack99s/netcoco/ent/netinterface"
	"github.com/mrzack99s/netcoco/ent/netinterfacemode"
	"github.com/mrzack99s/netcoco/ent/portchannelinterface"
	"github.com/mrzack99s/netcoco/ent/vlan"
)

// NetInterfaceCreate is the builder for creating a NetInterface entity.
type NetInterfaceCreate struct {
	config
	mutation *NetInterfaceMutation
	hooks    []Hook
}

// SetInterfaceName sets the "interface_name" field.
func (nic *NetInterfaceCreate) SetInterfaceName(s string) *NetInterfaceCreate {
	nic.mutation.SetInterfaceName(s)
	return nic
}

// SetInterfaceShutdown sets the "interface_shutdown" field.
func (nic *NetInterfaceCreate) SetInterfaceShutdown(b bool) *NetInterfaceCreate {
	nic.mutation.SetInterfaceShutdown(b)
	return nic
}

// SetNillableInterfaceShutdown sets the "interface_shutdown" field if the given value is not nil.
func (nic *NetInterfaceCreate) SetNillableInterfaceShutdown(b *bool) *NetInterfaceCreate {
	if b != nil {
		nic.SetInterfaceShutdown(*b)
	}
	return nic
}

// SetOnDeviceID sets the "on_device" edge to the Device entity by ID.
func (nic *NetInterfaceCreate) SetOnDeviceID(id int) *NetInterfaceCreate {
	nic.mutation.SetOnDeviceID(id)
	return nic
}

// SetNillableOnDeviceID sets the "on_device" edge to the Device entity by ID if the given value is not nil.
func (nic *NetInterfaceCreate) SetNillableOnDeviceID(id *int) *NetInterfaceCreate {
	if id != nil {
		nic = nic.SetOnDeviceID(*id)
	}
	return nic
}

// SetOnDevice sets the "on_device" edge to the Device entity.
func (nic *NetInterfaceCreate) SetOnDevice(d *Device) *NetInterfaceCreate {
	return nic.SetOnDeviceID(d.ID)
}

// SetOnPoInterfaceID sets the "on_po_interface" edge to the PortChannelInterface entity by ID.
func (nic *NetInterfaceCreate) SetOnPoInterfaceID(id int) *NetInterfaceCreate {
	nic.mutation.SetOnPoInterfaceID(id)
	return nic
}

// SetNillableOnPoInterfaceID sets the "on_po_interface" edge to the PortChannelInterface entity by ID if the given value is not nil.
func (nic *NetInterfaceCreate) SetNillableOnPoInterfaceID(id *int) *NetInterfaceCreate {
	if id != nil {
		nic = nic.SetOnPoInterfaceID(*id)
	}
	return nic
}

// SetOnPoInterface sets the "on_po_interface" edge to the PortChannelInterface entity.
func (nic *NetInterfaceCreate) SetOnPoInterface(p *PortChannelInterface) *NetInterfaceCreate {
	return nic.SetOnPoInterfaceID(p.ID)
}

// SetModeID sets the "mode" edge to the NetInterfaceMode entity by ID.
func (nic *NetInterfaceCreate) SetModeID(id int) *NetInterfaceCreate {
	nic.mutation.SetModeID(id)
	return nic
}

// SetNillableModeID sets the "mode" edge to the NetInterfaceMode entity by ID if the given value is not nil.
func (nic *NetInterfaceCreate) SetNillableModeID(id *int) *NetInterfaceCreate {
	if id != nil {
		nic = nic.SetModeID(*id)
	}
	return nic
}

// SetMode sets the "mode" edge to the NetInterfaceMode entity.
func (nic *NetInterfaceCreate) SetMode(n *NetInterfaceMode) *NetInterfaceCreate {
	return nic.SetModeID(n.ID)
}

// AddHaveVlanIDs adds the "have_vlans" edge to the Vlan entity by IDs.
func (nic *NetInterfaceCreate) AddHaveVlanIDs(ids ...int) *NetInterfaceCreate {
	nic.mutation.AddHaveVlanIDs(ids...)
	return nic
}

// AddHaveVlans adds the "have_vlans" edges to the Vlan entity.
func (nic *NetInterfaceCreate) AddHaveVlans(v ...*Vlan) *NetInterfaceCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return nic.AddHaveVlanIDs(ids...)
}

// SetNativeOnVlanID sets the "native_on_vlan" edge to the Vlan entity by ID.
func (nic *NetInterfaceCreate) SetNativeOnVlanID(id int) *NetInterfaceCreate {
	nic.mutation.SetNativeOnVlanID(id)
	return nic
}

// SetNillableNativeOnVlanID sets the "native_on_vlan" edge to the Vlan entity by ID if the given value is not nil.
func (nic *NetInterfaceCreate) SetNillableNativeOnVlanID(id *int) *NetInterfaceCreate {
	if id != nil {
		nic = nic.SetNativeOnVlanID(*id)
	}
	return nic
}

// SetNativeOnVlan sets the "native_on_vlan" edge to the Vlan entity.
func (nic *NetInterfaceCreate) SetNativeOnVlan(v *Vlan) *NetInterfaceCreate {
	return nic.SetNativeOnVlanID(v.ID)
}

// Mutation returns the NetInterfaceMutation object of the builder.
func (nic *NetInterfaceCreate) Mutation() *NetInterfaceMutation {
	return nic.mutation
}

// Save creates the NetInterface in the database.
func (nic *NetInterfaceCreate) Save(ctx context.Context) (*NetInterface, error) {
	var (
		err  error
		node *NetInterface
	)
	nic.defaults()
	if len(nic.hooks) == 0 {
		if err = nic.check(); err != nil {
			return nil, err
		}
		node, err = nic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetInterfaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nic.check(); err != nil {
				return nil, err
			}
			nic.mutation = mutation
			node, err = nic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nic.hooks) - 1; i >= 0; i-- {
			mut = nic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nic *NetInterfaceCreate) SaveX(ctx context.Context) *NetInterface {
	v, err := nic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (nic *NetInterfaceCreate) defaults() {
	if _, ok := nic.mutation.InterfaceShutdown(); !ok {
		v := netinterface.DefaultInterfaceShutdown
		nic.mutation.SetInterfaceShutdown(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nic *NetInterfaceCreate) check() error {
	if _, ok := nic.mutation.InterfaceName(); !ok {
		return &ValidationError{Name: "interface_name", err: errors.New("ent: missing required field \"interface_name\"")}
	}
	if v, ok := nic.mutation.InterfaceName(); ok {
		if err := netinterface.InterfaceNameValidator(v); err != nil {
			return &ValidationError{Name: "interface_name", err: fmt.Errorf("ent: validator failed for field \"interface_name\": %w", err)}
		}
	}
	if _, ok := nic.mutation.InterfaceShutdown(); !ok {
		return &ValidationError{Name: "interface_shutdown", err: errors.New("ent: missing required field \"interface_shutdown\"")}
	}
	return nil
}

func (nic *NetInterfaceCreate) sqlSave(ctx context.Context) (*NetInterface, error) {
	_node, _spec := nic.createSpec()
	if err := sqlgraph.CreateNode(ctx, nic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (nic *NetInterfaceCreate) createSpec() (*NetInterface, *sqlgraph.CreateSpec) {
	var (
		_node = &NetInterface{config: nic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: netinterface.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: netinterface.FieldID,
			},
		}
	)
	if value, ok := nic.mutation.InterfaceName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: netinterface.FieldInterfaceName,
		})
		_node.InterfaceName = value
	}
	if value, ok := nic.mutation.InterfaceShutdown(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: netinterface.FieldInterfaceShutdown,
		})
		_node.InterfaceShutdown = value
	}
	if nodes := nic.mutation.OnDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   netinterface.OnDeviceTable,
			Columns: []string{netinterface.OnDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.device_interfaces = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nic.mutation.OnPoInterfaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   netinterface.OnPoInterfaceTable,
			Columns: []string{netinterface.OnPoInterfaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portchannelinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.port_channel_interface_interfaces = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nic.mutation.ModeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   netinterface.ModeTable,
			Columns: []string{netinterface.ModeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterfacemode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.net_interface_mode_modes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nic.mutation.HaveVlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   netinterface.HaveVlansTable,
			Columns: netinterface.HaveVlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nic.mutation.NativeOnVlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   netinterface.NativeOnVlanTable,
			Columns: []string{netinterface.NativeOnVlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vlan_native_vlan = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NetInterfaceCreateBulk is the builder for creating many NetInterface entities in bulk.
type NetInterfaceCreateBulk struct {
	config
	builders []*NetInterfaceCreate
}

// Save creates the NetInterface entities in the database.
func (nicb *NetInterfaceCreateBulk) Save(ctx context.Context) ([]*NetInterface, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nicb.builders))
	nodes := make([]*NetInterface, len(nicb.builders))
	mutators := make([]Mutator, len(nicb.builders))
	for i := range nicb.builders {
		func(i int, root context.Context) {
			builder := nicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NetInterfaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nicb *NetInterfaceCreateBulk) SaveX(ctx context.Context) []*NetInterface {
	v, err := nicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
