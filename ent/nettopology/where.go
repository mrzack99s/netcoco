// Code generated by entc, DO NOT EDIT.

package nettopology

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mrzack99s/netcoco/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TopologyName applies equality check predicate on the "topology_name" field. It's identical to TopologyNameEQ.
func TopologyName(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTopologyName), v))
	})
}

// TopologyDescription applies equality check predicate on the "topology_description" field. It's identical to TopologyDescriptionEQ.
func TopologyDescription(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTopologyDescription), v))
	})
}

// TopologyNameEQ applies the EQ predicate on the "topology_name" field.
func TopologyNameEQ(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTopologyName), v))
	})
}

// TopologyNameNEQ applies the NEQ predicate on the "topology_name" field.
func TopologyNameNEQ(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTopologyName), v))
	})
}

// TopologyNameIn applies the In predicate on the "topology_name" field.
func TopologyNameIn(vs ...string) predicate.NetTopology {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NetTopology(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTopologyName), v...))
	})
}

// TopologyNameNotIn applies the NotIn predicate on the "topology_name" field.
func TopologyNameNotIn(vs ...string) predicate.NetTopology {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NetTopology(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTopologyName), v...))
	})
}

// TopologyNameGT applies the GT predicate on the "topology_name" field.
func TopologyNameGT(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTopologyName), v))
	})
}

// TopologyNameGTE applies the GTE predicate on the "topology_name" field.
func TopologyNameGTE(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTopologyName), v))
	})
}

// TopologyNameLT applies the LT predicate on the "topology_name" field.
func TopologyNameLT(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTopologyName), v))
	})
}

// TopologyNameLTE applies the LTE predicate on the "topology_name" field.
func TopologyNameLTE(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTopologyName), v))
	})
}

// TopologyNameContains applies the Contains predicate on the "topology_name" field.
func TopologyNameContains(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTopologyName), v))
	})
}

// TopologyNameHasPrefix applies the HasPrefix predicate on the "topology_name" field.
func TopologyNameHasPrefix(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTopologyName), v))
	})
}

// TopologyNameHasSuffix applies the HasSuffix predicate on the "topology_name" field.
func TopologyNameHasSuffix(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTopologyName), v))
	})
}

// TopologyNameEqualFold applies the EqualFold predicate on the "topology_name" field.
func TopologyNameEqualFold(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTopologyName), v))
	})
}

// TopologyNameContainsFold applies the ContainsFold predicate on the "topology_name" field.
func TopologyNameContainsFold(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTopologyName), v))
	})
}

// TopologyDescriptionEQ applies the EQ predicate on the "topology_description" field.
func TopologyDescriptionEQ(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTopologyDescription), v))
	})
}

// TopologyDescriptionNEQ applies the NEQ predicate on the "topology_description" field.
func TopologyDescriptionNEQ(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTopologyDescription), v))
	})
}

// TopologyDescriptionIn applies the In predicate on the "topology_description" field.
func TopologyDescriptionIn(vs ...string) predicate.NetTopology {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NetTopology(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTopologyDescription), v...))
	})
}

// TopologyDescriptionNotIn applies the NotIn predicate on the "topology_description" field.
func TopologyDescriptionNotIn(vs ...string) predicate.NetTopology {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NetTopology(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTopologyDescription), v...))
	})
}

// TopologyDescriptionGT applies the GT predicate on the "topology_description" field.
func TopologyDescriptionGT(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTopologyDescription), v))
	})
}

// TopologyDescriptionGTE applies the GTE predicate on the "topology_description" field.
func TopologyDescriptionGTE(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTopologyDescription), v))
	})
}

// TopologyDescriptionLT applies the LT predicate on the "topology_description" field.
func TopologyDescriptionLT(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTopologyDescription), v))
	})
}

// TopologyDescriptionLTE applies the LTE predicate on the "topology_description" field.
func TopologyDescriptionLTE(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTopologyDescription), v))
	})
}

// TopologyDescriptionContains applies the Contains predicate on the "topology_description" field.
func TopologyDescriptionContains(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTopologyDescription), v))
	})
}

// TopologyDescriptionHasPrefix applies the HasPrefix predicate on the "topology_description" field.
func TopologyDescriptionHasPrefix(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTopologyDescription), v))
	})
}

// TopologyDescriptionHasSuffix applies the HasSuffix predicate on the "topology_description" field.
func TopologyDescriptionHasSuffix(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTopologyDescription), v))
	})
}

// TopologyDescriptionEqualFold applies the EqualFold predicate on the "topology_description" field.
func TopologyDescriptionEqualFold(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTopologyDescription), v))
	})
}

// TopologyDescriptionContainsFold applies the ContainsFold predicate on the "topology_description" field.
func TopologyDescriptionContainsFold(v string) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTopologyDescription), v))
	})
}

// HasTopology applies the HasEdge predicate on the "topology" edge.
func HasTopology() predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TopologyTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TopologyTable, TopologyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTopologyWith applies the HasEdge predicate on the "topology" edge with a given conditions (other predicates).
func HasTopologyWith(preds ...predicate.NetTopologyDeviceMap) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TopologyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TopologyTable, TopologyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NetTopology) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NetTopology) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NetTopology) predicate.NetTopology {
	return predicate.NetTopology(func(s *sql.Selector) {
		p(s.Not())
	})
}
