// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/deletedvlanlog"
	"github.com/mrzack99s/netcoco/ent/device"
	"github.com/mrzack99s/netcoco/ent/deviceplatform"
	"github.com/mrzack99s/netcoco/ent/devicetype"
	"github.com/mrzack99s/netcoco/ent/netinterface"
	"github.com/mrzack99s/netcoco/ent/nettopologydevicemap"
	"github.com/mrzack99s/netcoco/ent/predicate"
	"github.com/mrzack99s/netcoco/ent/vlan"
)

// DeviceUpdate is the builder for updating Device entities.
type DeviceUpdate struct {
	config
	hooks    []Hook
	mutation *DeviceMutation
}

// Where adds a new predicate for the DeviceUpdate builder.
func (du *DeviceUpdate) Where(ps ...predicate.Device) *DeviceUpdate {
	du.mutation.predicates = append(du.mutation.predicates, ps...)
	return du
}

// SetDeviceName sets the "device_name" field.
func (du *DeviceUpdate) SetDeviceName(s string) *DeviceUpdate {
	du.mutation.SetDeviceName(s)
	return du
}

// SetDeviceHostname sets the "device_hostname" field.
func (du *DeviceUpdate) SetDeviceHostname(s string) *DeviceUpdate {
	du.mutation.SetDeviceHostname(s)
	return du
}

// SetDeviceUsername sets the "device_username" field.
func (du *DeviceUpdate) SetDeviceUsername(s string) *DeviceUpdate {
	du.mutation.SetDeviceUsername(s)
	return du
}

// SetNillableDeviceUsername sets the "device_username" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableDeviceUsername(s *string) *DeviceUpdate {
	if s != nil {
		du.SetDeviceUsername(*s)
	}
	return du
}

// ClearDeviceUsername clears the value of the "device_username" field.
func (du *DeviceUpdate) ClearDeviceUsername() *DeviceUpdate {
	du.mutation.ClearDeviceUsername()
	return du
}

// SetDevicePassword sets the "device_password" field.
func (du *DeviceUpdate) SetDevicePassword(s string) *DeviceUpdate {
	du.mutation.SetDevicePassword(s)
	return du
}

// SetNillableDevicePassword sets the "device_password" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableDevicePassword(s *string) *DeviceUpdate {
	if s != nil {
		du.SetDevicePassword(*s)
	}
	return du
}

// ClearDevicePassword clears the value of the "device_password" field.
func (du *DeviceUpdate) ClearDevicePassword() *DeviceUpdate {
	du.mutation.ClearDevicePassword()
	return du
}

// SetDeviceSecret sets the "device_secret" field.
func (du *DeviceUpdate) SetDeviceSecret(s string) *DeviceUpdate {
	du.mutation.SetDeviceSecret(s)
	return du
}

// SetNillableDeviceSecret sets the "device_secret" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableDeviceSecret(s *string) *DeviceUpdate {
	if s != nil {
		du.SetDeviceSecret(*s)
	}
	return du
}

// ClearDeviceSecret clears the value of the "device_secret" field.
func (du *DeviceUpdate) ClearDeviceSecret() *DeviceUpdate {
	du.mutation.ClearDeviceSecret()
	return du
}

// SetDeviceSSHPort sets the "device_ssh_port" field.
func (du *DeviceUpdate) SetDeviceSSHPort(i int) *DeviceUpdate {
	du.mutation.ResetDeviceSSHPort()
	du.mutation.SetDeviceSSHPort(i)
	return du
}

// SetNillableDeviceSSHPort sets the "device_ssh_port" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableDeviceSSHPort(i *int) *DeviceUpdate {
	if i != nil {
		du.SetDeviceSSHPort(*i)
	}
	return du
}

// AddDeviceSSHPort adds i to the "device_ssh_port" field.
func (du *DeviceUpdate) AddDeviceSSHPort(i int) *DeviceUpdate {
	du.mutation.AddDeviceSSHPort(i)
	return du
}

// SetDeviceCommitConfig sets the "device_commit_config" field.
func (du *DeviceUpdate) SetDeviceCommitConfig(b bool) *DeviceUpdate {
	du.mutation.SetDeviceCommitConfig(b)
	return du
}

// SetNillableDeviceCommitConfig sets the "device_commit_config" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableDeviceCommitConfig(b *bool) *DeviceUpdate {
	if b != nil {
		du.SetDeviceCommitConfig(*b)
	}
	return du
}

// SetInTypeID sets the "in_type" edge to the DeviceType entity by ID.
func (du *DeviceUpdate) SetInTypeID(id int) *DeviceUpdate {
	du.mutation.SetInTypeID(id)
	return du
}

// SetNillableInTypeID sets the "in_type" edge to the DeviceType entity by ID if the given value is not nil.
func (du *DeviceUpdate) SetNillableInTypeID(id *int) *DeviceUpdate {
	if id != nil {
		du = du.SetInTypeID(*id)
	}
	return du
}

// SetInType sets the "in_type" edge to the DeviceType entity.
func (du *DeviceUpdate) SetInType(d *DeviceType) *DeviceUpdate {
	return du.SetInTypeID(d.ID)
}

// SetInPlatformID sets the "in_platform" edge to the DevicePlatform entity by ID.
func (du *DeviceUpdate) SetInPlatformID(id int) *DeviceUpdate {
	du.mutation.SetInPlatformID(id)
	return du
}

// SetNillableInPlatformID sets the "in_platform" edge to the DevicePlatform entity by ID if the given value is not nil.
func (du *DeviceUpdate) SetNillableInPlatformID(id *int) *DeviceUpdate {
	if id != nil {
		du = du.SetInPlatformID(*id)
	}
	return du
}

// SetInPlatform sets the "in_platform" edge to the DevicePlatform entity.
func (du *DeviceUpdate) SetInPlatform(d *DevicePlatform) *DeviceUpdate {
	return du.SetInPlatformID(d.ID)
}

// AddInterfaceIDs adds the "interfaces" edge to the NetInterface entity by IDs.
func (du *DeviceUpdate) AddInterfaceIDs(ids ...int) *DeviceUpdate {
	du.mutation.AddInterfaceIDs(ids...)
	return du
}

// AddInterfaces adds the "interfaces" edges to the NetInterface entity.
func (du *DeviceUpdate) AddInterfaces(n ...*NetInterface) *DeviceUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return du.AddInterfaceIDs(ids...)
}

// AddInTopologyIDs adds the "in_topology" edge to the NetTopologyDeviceMap entity by IDs.
func (du *DeviceUpdate) AddInTopologyIDs(ids ...int) *DeviceUpdate {
	du.mutation.AddInTopologyIDs(ids...)
	return du
}

// AddInTopology adds the "in_topology" edges to the NetTopologyDeviceMap entity.
func (du *DeviceUpdate) AddInTopology(n ...*NetTopologyDeviceMap) *DeviceUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return du.AddInTopologyIDs(ids...)
}

// AddStoreVlanIDs adds the "store_vlans" edge to the Vlan entity by IDs.
func (du *DeviceUpdate) AddStoreVlanIDs(ids ...int) *DeviceUpdate {
	du.mutation.AddStoreVlanIDs(ids...)
	return du
}

// AddStoreVlans adds the "store_vlans" edges to the Vlan entity.
func (du *DeviceUpdate) AddStoreVlans(v ...*Vlan) *DeviceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return du.AddStoreVlanIDs(ids...)
}

// AddDeletedVlanIDs adds the "deleted_vlans" edge to the DeletedVlanLog entity by IDs.
func (du *DeviceUpdate) AddDeletedVlanIDs(ids ...int) *DeviceUpdate {
	du.mutation.AddDeletedVlanIDs(ids...)
	return du
}

// AddDeletedVlans adds the "deleted_vlans" edges to the DeletedVlanLog entity.
func (du *DeviceUpdate) AddDeletedVlans(d ...*DeletedVlanLog) *DeviceUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddDeletedVlanIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (du *DeviceUpdate) Mutation() *DeviceMutation {
	return du.mutation
}

// ClearInType clears the "in_type" edge to the DeviceType entity.
func (du *DeviceUpdate) ClearInType() *DeviceUpdate {
	du.mutation.ClearInType()
	return du
}

// ClearInPlatform clears the "in_platform" edge to the DevicePlatform entity.
func (du *DeviceUpdate) ClearInPlatform() *DeviceUpdate {
	du.mutation.ClearInPlatform()
	return du
}

// ClearInterfaces clears all "interfaces" edges to the NetInterface entity.
func (du *DeviceUpdate) ClearInterfaces() *DeviceUpdate {
	du.mutation.ClearInterfaces()
	return du
}

// RemoveInterfaceIDs removes the "interfaces" edge to NetInterface entities by IDs.
func (du *DeviceUpdate) RemoveInterfaceIDs(ids ...int) *DeviceUpdate {
	du.mutation.RemoveInterfaceIDs(ids...)
	return du
}

// RemoveInterfaces removes "interfaces" edges to NetInterface entities.
func (du *DeviceUpdate) RemoveInterfaces(n ...*NetInterface) *DeviceUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return du.RemoveInterfaceIDs(ids...)
}

// ClearInTopology clears all "in_topology" edges to the NetTopologyDeviceMap entity.
func (du *DeviceUpdate) ClearInTopology() *DeviceUpdate {
	du.mutation.ClearInTopology()
	return du
}

// RemoveInTopologyIDs removes the "in_topology" edge to NetTopologyDeviceMap entities by IDs.
func (du *DeviceUpdate) RemoveInTopologyIDs(ids ...int) *DeviceUpdate {
	du.mutation.RemoveInTopologyIDs(ids...)
	return du
}

// RemoveInTopology removes "in_topology" edges to NetTopologyDeviceMap entities.
func (du *DeviceUpdate) RemoveInTopology(n ...*NetTopologyDeviceMap) *DeviceUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return du.RemoveInTopologyIDs(ids...)
}

// ClearStoreVlans clears all "store_vlans" edges to the Vlan entity.
func (du *DeviceUpdate) ClearStoreVlans() *DeviceUpdate {
	du.mutation.ClearStoreVlans()
	return du
}

// RemoveStoreVlanIDs removes the "store_vlans" edge to Vlan entities by IDs.
func (du *DeviceUpdate) RemoveStoreVlanIDs(ids ...int) *DeviceUpdate {
	du.mutation.RemoveStoreVlanIDs(ids...)
	return du
}

// RemoveStoreVlans removes "store_vlans" edges to Vlan entities.
func (du *DeviceUpdate) RemoveStoreVlans(v ...*Vlan) *DeviceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return du.RemoveStoreVlanIDs(ids...)
}

// ClearDeletedVlans clears all "deleted_vlans" edges to the DeletedVlanLog entity.
func (du *DeviceUpdate) ClearDeletedVlans() *DeviceUpdate {
	du.mutation.ClearDeletedVlans()
	return du
}

// RemoveDeletedVlanIDs removes the "deleted_vlans" edge to DeletedVlanLog entities by IDs.
func (du *DeviceUpdate) RemoveDeletedVlanIDs(ids ...int) *DeviceUpdate {
	du.mutation.RemoveDeletedVlanIDs(ids...)
	return du
}

// RemoveDeletedVlans removes "deleted_vlans" edges to DeletedVlanLog entities.
func (du *DeviceUpdate) RemoveDeletedVlans(d ...*DeletedVlanLog) *DeviceUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveDeletedVlanIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeviceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeviceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeviceUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeviceUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DeviceUpdate) check() error {
	if v, ok := du.mutation.DeviceName(); ok {
		if err := device.DeviceNameValidator(v); err != nil {
			return &ValidationError{Name: "device_name", err: fmt.Errorf("ent: validator failed for field \"device_name\": %w", err)}
		}
	}
	if v, ok := du.mutation.DeviceHostname(); ok {
		if err := device.DeviceHostnameValidator(v); err != nil {
			return &ValidationError{Name: "device_hostname", err: fmt.Errorf("ent: validator failed for field \"device_hostname\": %w", err)}
		}
	}
	if v, ok := du.mutation.DeviceSSHPort(); ok {
		if err := device.DeviceSSHPortValidator(v); err != nil {
			return &ValidationError{Name: "device_ssh_port", err: fmt.Errorf("ent: validator failed for field \"device_ssh_port\": %w", err)}
		}
	}
	return nil
}

func (du *DeviceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   device.Table,
			Columns: device.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: device.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.DeviceName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldDeviceName,
		})
	}
	if value, ok := du.mutation.DeviceHostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldDeviceHostname,
		})
	}
	if value, ok := du.mutation.DeviceUsername(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldDeviceUsername,
		})
	}
	if du.mutation.DeviceUsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: device.FieldDeviceUsername,
		})
	}
	if value, ok := du.mutation.DevicePassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldDevicePassword,
		})
	}
	if du.mutation.DevicePasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: device.FieldDevicePassword,
		})
	}
	if value, ok := du.mutation.DeviceSecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldDeviceSecret,
		})
	}
	if du.mutation.DeviceSecretCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: device.FieldDeviceSecret,
		})
	}
	if value, ok := du.mutation.DeviceSSHPort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: device.FieldDeviceSSHPort,
		})
	}
	if value, ok := du.mutation.AddedDeviceSSHPort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: device.FieldDeviceSSHPort,
		})
	}
	if value, ok := du.mutation.DeviceCommitConfig(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: device.FieldDeviceCommitConfig,
		})
	}
	if du.mutation.InTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.InTypeTable,
			Columns: []string{device.InTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: devicetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.InTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.InTypeTable,
			Columns: []string{device.InTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: devicetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.InPlatformCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.InPlatformTable,
			Columns: []string{device.InPlatformColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deviceplatform.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.InPlatformIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.InPlatformTable,
			Columns: []string{device.InPlatformColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deviceplatform.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.InterfacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.InterfacesTable,
			Columns: []string{device.InterfacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedInterfacesIDs(); len(nodes) > 0 && !du.mutation.InterfacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.InterfacesTable,
			Columns: []string{device.InterfacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.InterfacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.InterfacesTable,
			Columns: []string{device.InterfacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.InTopologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.InTopologyTable,
			Columns: []string{device.InTopologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopologydevicemap.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedInTopologyIDs(); len(nodes) > 0 && !du.mutation.InTopologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.InTopologyTable,
			Columns: []string{device.InTopologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopologydevicemap.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.InTopologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.InTopologyTable,
			Columns: []string{device.InTopologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopologydevicemap.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.StoreVlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.StoreVlansTable,
			Columns: device.StoreVlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedStoreVlansIDs(); len(nodes) > 0 && !du.mutation.StoreVlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.StoreVlansTable,
			Columns: device.StoreVlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.StoreVlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.StoreVlansTable,
			Columns: device.StoreVlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DeletedVlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.DeletedVlansTable,
			Columns: []string{device.DeletedVlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deletedvlanlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedDeletedVlansIDs(); len(nodes) > 0 && !du.mutation.DeletedVlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.DeletedVlansTable,
			Columns: []string{device.DeletedVlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deletedvlanlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DeletedVlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.DeletedVlansTable,
			Columns: []string{device.DeletedVlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deletedvlanlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DeviceUpdateOne is the builder for updating a single Device entity.
type DeviceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeviceMutation
}

// SetDeviceName sets the "device_name" field.
func (duo *DeviceUpdateOne) SetDeviceName(s string) *DeviceUpdateOne {
	duo.mutation.SetDeviceName(s)
	return duo
}

// SetDeviceHostname sets the "device_hostname" field.
func (duo *DeviceUpdateOne) SetDeviceHostname(s string) *DeviceUpdateOne {
	duo.mutation.SetDeviceHostname(s)
	return duo
}

// SetDeviceUsername sets the "device_username" field.
func (duo *DeviceUpdateOne) SetDeviceUsername(s string) *DeviceUpdateOne {
	duo.mutation.SetDeviceUsername(s)
	return duo
}

// SetNillableDeviceUsername sets the "device_username" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableDeviceUsername(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetDeviceUsername(*s)
	}
	return duo
}

// ClearDeviceUsername clears the value of the "device_username" field.
func (duo *DeviceUpdateOne) ClearDeviceUsername() *DeviceUpdateOne {
	duo.mutation.ClearDeviceUsername()
	return duo
}

// SetDevicePassword sets the "device_password" field.
func (duo *DeviceUpdateOne) SetDevicePassword(s string) *DeviceUpdateOne {
	duo.mutation.SetDevicePassword(s)
	return duo
}

// SetNillableDevicePassword sets the "device_password" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableDevicePassword(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetDevicePassword(*s)
	}
	return duo
}

// ClearDevicePassword clears the value of the "device_password" field.
func (duo *DeviceUpdateOne) ClearDevicePassword() *DeviceUpdateOne {
	duo.mutation.ClearDevicePassword()
	return duo
}

// SetDeviceSecret sets the "device_secret" field.
func (duo *DeviceUpdateOne) SetDeviceSecret(s string) *DeviceUpdateOne {
	duo.mutation.SetDeviceSecret(s)
	return duo
}

// SetNillableDeviceSecret sets the "device_secret" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableDeviceSecret(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetDeviceSecret(*s)
	}
	return duo
}

// ClearDeviceSecret clears the value of the "device_secret" field.
func (duo *DeviceUpdateOne) ClearDeviceSecret() *DeviceUpdateOne {
	duo.mutation.ClearDeviceSecret()
	return duo
}

// SetDeviceSSHPort sets the "device_ssh_port" field.
func (duo *DeviceUpdateOne) SetDeviceSSHPort(i int) *DeviceUpdateOne {
	duo.mutation.ResetDeviceSSHPort()
	duo.mutation.SetDeviceSSHPort(i)
	return duo
}

// SetNillableDeviceSSHPort sets the "device_ssh_port" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableDeviceSSHPort(i *int) *DeviceUpdateOne {
	if i != nil {
		duo.SetDeviceSSHPort(*i)
	}
	return duo
}

// AddDeviceSSHPort adds i to the "device_ssh_port" field.
func (duo *DeviceUpdateOne) AddDeviceSSHPort(i int) *DeviceUpdateOne {
	duo.mutation.AddDeviceSSHPort(i)
	return duo
}

// SetDeviceCommitConfig sets the "device_commit_config" field.
func (duo *DeviceUpdateOne) SetDeviceCommitConfig(b bool) *DeviceUpdateOne {
	duo.mutation.SetDeviceCommitConfig(b)
	return duo
}

// SetNillableDeviceCommitConfig sets the "device_commit_config" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableDeviceCommitConfig(b *bool) *DeviceUpdateOne {
	if b != nil {
		duo.SetDeviceCommitConfig(*b)
	}
	return duo
}

// SetInTypeID sets the "in_type" edge to the DeviceType entity by ID.
func (duo *DeviceUpdateOne) SetInTypeID(id int) *DeviceUpdateOne {
	duo.mutation.SetInTypeID(id)
	return duo
}

// SetNillableInTypeID sets the "in_type" edge to the DeviceType entity by ID if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableInTypeID(id *int) *DeviceUpdateOne {
	if id != nil {
		duo = duo.SetInTypeID(*id)
	}
	return duo
}

// SetInType sets the "in_type" edge to the DeviceType entity.
func (duo *DeviceUpdateOne) SetInType(d *DeviceType) *DeviceUpdateOne {
	return duo.SetInTypeID(d.ID)
}

// SetInPlatformID sets the "in_platform" edge to the DevicePlatform entity by ID.
func (duo *DeviceUpdateOne) SetInPlatformID(id int) *DeviceUpdateOne {
	duo.mutation.SetInPlatformID(id)
	return duo
}

// SetNillableInPlatformID sets the "in_platform" edge to the DevicePlatform entity by ID if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableInPlatformID(id *int) *DeviceUpdateOne {
	if id != nil {
		duo = duo.SetInPlatformID(*id)
	}
	return duo
}

// SetInPlatform sets the "in_platform" edge to the DevicePlatform entity.
func (duo *DeviceUpdateOne) SetInPlatform(d *DevicePlatform) *DeviceUpdateOne {
	return duo.SetInPlatformID(d.ID)
}

// AddInterfaceIDs adds the "interfaces" edge to the NetInterface entity by IDs.
func (duo *DeviceUpdateOne) AddInterfaceIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.AddInterfaceIDs(ids...)
	return duo
}

// AddInterfaces adds the "interfaces" edges to the NetInterface entity.
func (duo *DeviceUpdateOne) AddInterfaces(n ...*NetInterface) *DeviceUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return duo.AddInterfaceIDs(ids...)
}

// AddInTopologyIDs adds the "in_topology" edge to the NetTopologyDeviceMap entity by IDs.
func (duo *DeviceUpdateOne) AddInTopologyIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.AddInTopologyIDs(ids...)
	return duo
}

// AddInTopology adds the "in_topology" edges to the NetTopologyDeviceMap entity.
func (duo *DeviceUpdateOne) AddInTopology(n ...*NetTopologyDeviceMap) *DeviceUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return duo.AddInTopologyIDs(ids...)
}

// AddStoreVlanIDs adds the "store_vlans" edge to the Vlan entity by IDs.
func (duo *DeviceUpdateOne) AddStoreVlanIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.AddStoreVlanIDs(ids...)
	return duo
}

// AddStoreVlans adds the "store_vlans" edges to the Vlan entity.
func (duo *DeviceUpdateOne) AddStoreVlans(v ...*Vlan) *DeviceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return duo.AddStoreVlanIDs(ids...)
}

// AddDeletedVlanIDs adds the "deleted_vlans" edge to the DeletedVlanLog entity by IDs.
func (duo *DeviceUpdateOne) AddDeletedVlanIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.AddDeletedVlanIDs(ids...)
	return duo
}

// AddDeletedVlans adds the "deleted_vlans" edges to the DeletedVlanLog entity.
func (duo *DeviceUpdateOne) AddDeletedVlans(d ...*DeletedVlanLog) *DeviceUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddDeletedVlanIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (duo *DeviceUpdateOne) Mutation() *DeviceMutation {
	return duo.mutation
}

// ClearInType clears the "in_type" edge to the DeviceType entity.
func (duo *DeviceUpdateOne) ClearInType() *DeviceUpdateOne {
	duo.mutation.ClearInType()
	return duo
}

// ClearInPlatform clears the "in_platform" edge to the DevicePlatform entity.
func (duo *DeviceUpdateOne) ClearInPlatform() *DeviceUpdateOne {
	duo.mutation.ClearInPlatform()
	return duo
}

// ClearInterfaces clears all "interfaces" edges to the NetInterface entity.
func (duo *DeviceUpdateOne) ClearInterfaces() *DeviceUpdateOne {
	duo.mutation.ClearInterfaces()
	return duo
}

// RemoveInterfaceIDs removes the "interfaces" edge to NetInterface entities by IDs.
func (duo *DeviceUpdateOne) RemoveInterfaceIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.RemoveInterfaceIDs(ids...)
	return duo
}

// RemoveInterfaces removes "interfaces" edges to NetInterface entities.
func (duo *DeviceUpdateOne) RemoveInterfaces(n ...*NetInterface) *DeviceUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return duo.RemoveInterfaceIDs(ids...)
}

// ClearInTopology clears all "in_topology" edges to the NetTopologyDeviceMap entity.
func (duo *DeviceUpdateOne) ClearInTopology() *DeviceUpdateOne {
	duo.mutation.ClearInTopology()
	return duo
}

// RemoveInTopologyIDs removes the "in_topology" edge to NetTopologyDeviceMap entities by IDs.
func (duo *DeviceUpdateOne) RemoveInTopologyIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.RemoveInTopologyIDs(ids...)
	return duo
}

// RemoveInTopology removes "in_topology" edges to NetTopologyDeviceMap entities.
func (duo *DeviceUpdateOne) RemoveInTopology(n ...*NetTopologyDeviceMap) *DeviceUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return duo.RemoveInTopologyIDs(ids...)
}

// ClearStoreVlans clears all "store_vlans" edges to the Vlan entity.
func (duo *DeviceUpdateOne) ClearStoreVlans() *DeviceUpdateOne {
	duo.mutation.ClearStoreVlans()
	return duo
}

// RemoveStoreVlanIDs removes the "store_vlans" edge to Vlan entities by IDs.
func (duo *DeviceUpdateOne) RemoveStoreVlanIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.RemoveStoreVlanIDs(ids...)
	return duo
}

// RemoveStoreVlans removes "store_vlans" edges to Vlan entities.
func (duo *DeviceUpdateOne) RemoveStoreVlans(v ...*Vlan) *DeviceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return duo.RemoveStoreVlanIDs(ids...)
}

// ClearDeletedVlans clears all "deleted_vlans" edges to the DeletedVlanLog entity.
func (duo *DeviceUpdateOne) ClearDeletedVlans() *DeviceUpdateOne {
	duo.mutation.ClearDeletedVlans()
	return duo
}

// RemoveDeletedVlanIDs removes the "deleted_vlans" edge to DeletedVlanLog entities by IDs.
func (duo *DeviceUpdateOne) RemoveDeletedVlanIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.RemoveDeletedVlanIDs(ids...)
	return duo
}

// RemoveDeletedVlans removes "deleted_vlans" edges to DeletedVlanLog entities.
func (duo *DeviceUpdateOne) RemoveDeletedVlans(d ...*DeletedVlanLog) *DeviceUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveDeletedVlanIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeviceUpdateOne) Select(field string, fields ...string) *DeviceUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Device entity.
func (duo *DeviceUpdateOne) Save(ctx context.Context) (*Device, error) {
	var (
		err  error
		node *Device
	)
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeviceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeviceUpdateOne) SaveX(ctx context.Context) *Device {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeviceUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DeviceUpdateOne) check() error {
	if v, ok := duo.mutation.DeviceName(); ok {
		if err := device.DeviceNameValidator(v); err != nil {
			return &ValidationError{Name: "device_name", err: fmt.Errorf("ent: validator failed for field \"device_name\": %w", err)}
		}
	}
	if v, ok := duo.mutation.DeviceHostname(); ok {
		if err := device.DeviceHostnameValidator(v); err != nil {
			return &ValidationError{Name: "device_hostname", err: fmt.Errorf("ent: validator failed for field \"device_hostname\": %w", err)}
		}
	}
	if v, ok := duo.mutation.DeviceSSHPort(); ok {
		if err := device.DeviceSSHPortValidator(v); err != nil {
			return &ValidationError{Name: "device_ssh_port", err: fmt.Errorf("ent: validator failed for field \"device_ssh_port\": %w", err)}
		}
	}
	return nil
}

func (duo *DeviceUpdateOne) sqlSave(ctx context.Context) (_node *Device, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   device.Table,
			Columns: device.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: device.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Device.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, device.FieldID)
		for _, f := range fields {
			if !device.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != device.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.DeviceName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldDeviceName,
		})
	}
	if value, ok := duo.mutation.DeviceHostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldDeviceHostname,
		})
	}
	if value, ok := duo.mutation.DeviceUsername(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldDeviceUsername,
		})
	}
	if duo.mutation.DeviceUsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: device.FieldDeviceUsername,
		})
	}
	if value, ok := duo.mutation.DevicePassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldDevicePassword,
		})
	}
	if duo.mutation.DevicePasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: device.FieldDevicePassword,
		})
	}
	if value, ok := duo.mutation.DeviceSecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldDeviceSecret,
		})
	}
	if duo.mutation.DeviceSecretCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: device.FieldDeviceSecret,
		})
	}
	if value, ok := duo.mutation.DeviceSSHPort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: device.FieldDeviceSSHPort,
		})
	}
	if value, ok := duo.mutation.AddedDeviceSSHPort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: device.FieldDeviceSSHPort,
		})
	}
	if value, ok := duo.mutation.DeviceCommitConfig(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: device.FieldDeviceCommitConfig,
		})
	}
	if duo.mutation.InTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.InTypeTable,
			Columns: []string{device.InTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: devicetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.InTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.InTypeTable,
			Columns: []string{device.InTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: devicetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.InPlatformCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.InPlatformTable,
			Columns: []string{device.InPlatformColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deviceplatform.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.InPlatformIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.InPlatformTable,
			Columns: []string{device.InPlatformColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deviceplatform.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.InterfacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.InterfacesTable,
			Columns: []string{device.InterfacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedInterfacesIDs(); len(nodes) > 0 && !duo.mutation.InterfacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.InterfacesTable,
			Columns: []string{device.InterfacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.InterfacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.InterfacesTable,
			Columns: []string{device.InterfacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.InTopologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.InTopologyTable,
			Columns: []string{device.InTopologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopologydevicemap.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedInTopologyIDs(); len(nodes) > 0 && !duo.mutation.InTopologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.InTopologyTable,
			Columns: []string{device.InTopologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopologydevicemap.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.InTopologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.InTopologyTable,
			Columns: []string{device.InTopologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopologydevicemap.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.StoreVlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.StoreVlansTable,
			Columns: device.StoreVlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedStoreVlansIDs(); len(nodes) > 0 && !duo.mutation.StoreVlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.StoreVlansTable,
			Columns: device.StoreVlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.StoreVlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.StoreVlansTable,
			Columns: device.StoreVlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vlan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DeletedVlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.DeletedVlansTable,
			Columns: []string{device.DeletedVlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deletedvlanlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedDeletedVlansIDs(); len(nodes) > 0 && !duo.mutation.DeletedVlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.DeletedVlansTable,
			Columns: []string{device.DeletedVlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deletedvlanlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DeletedVlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.DeletedVlansTable,
			Columns: []string{device.DeletedVlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deletedvlanlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Device{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
