// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/nettopology"
	"github.com/mrzack99s/netcoco/ent/nettopologydevicemap"
)

// NetTopologyCreate is the builder for creating a NetTopology entity.
type NetTopologyCreate struct {
	config
	mutation *NetTopologyMutation
	hooks    []Hook
}

// SetTopologyName sets the "topology_name" field.
func (ntc *NetTopologyCreate) SetTopologyName(s string) *NetTopologyCreate {
	ntc.mutation.SetTopologyName(s)
	return ntc
}

// SetTopologyDescription sets the "topology_description" field.
func (ntc *NetTopologyCreate) SetTopologyDescription(s string) *NetTopologyCreate {
	ntc.mutation.SetTopologyDescription(s)
	return ntc
}

// AddTopologyIDs adds the "topology" edge to the NetTopologyDeviceMap entity by IDs.
func (ntc *NetTopologyCreate) AddTopologyIDs(ids ...int) *NetTopologyCreate {
	ntc.mutation.AddTopologyIDs(ids...)
	return ntc
}

// AddTopology adds the "topology" edges to the NetTopologyDeviceMap entity.
func (ntc *NetTopologyCreate) AddTopology(n ...*NetTopologyDeviceMap) *NetTopologyCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ntc.AddTopologyIDs(ids...)
}

// Mutation returns the NetTopologyMutation object of the builder.
func (ntc *NetTopologyCreate) Mutation() *NetTopologyMutation {
	return ntc.mutation
}

// Save creates the NetTopology in the database.
func (ntc *NetTopologyCreate) Save(ctx context.Context) (*NetTopology, error) {
	var (
		err  error
		node *NetTopology
	)
	if len(ntc.hooks) == 0 {
		if err = ntc.check(); err != nil {
			return nil, err
		}
		node, err = ntc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetTopologyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ntc.check(); err != nil {
				return nil, err
			}
			ntc.mutation = mutation
			node, err = ntc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ntc.hooks) - 1; i >= 0; i-- {
			mut = ntc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ntc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ntc *NetTopologyCreate) SaveX(ctx context.Context) *NetTopology {
	v, err := ntc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ntc *NetTopologyCreate) check() error {
	if _, ok := ntc.mutation.TopologyName(); !ok {
		return &ValidationError{Name: "topology_name", err: errors.New("ent: missing required field \"topology_name\"")}
	}
	if v, ok := ntc.mutation.TopologyName(); ok {
		if err := nettopology.TopologyNameValidator(v); err != nil {
			return &ValidationError{Name: "topology_name", err: fmt.Errorf("ent: validator failed for field \"topology_name\": %w", err)}
		}
	}
	if _, ok := ntc.mutation.TopologyDescription(); !ok {
		return &ValidationError{Name: "topology_description", err: errors.New("ent: missing required field \"topology_description\"")}
	}
	if v, ok := ntc.mutation.TopologyDescription(); ok {
		if err := nettopology.TopologyDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "topology_description", err: fmt.Errorf("ent: validator failed for field \"topology_description\": %w", err)}
		}
	}
	return nil
}

func (ntc *NetTopologyCreate) sqlSave(ctx context.Context) (*NetTopology, error) {
	_node, _spec := ntc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ntc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ntc *NetTopologyCreate) createSpec() (*NetTopology, *sqlgraph.CreateSpec) {
	var (
		_node = &NetTopology{config: ntc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: nettopology.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nettopology.FieldID,
			},
		}
	)
	if value, ok := ntc.mutation.TopologyName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nettopology.FieldTopologyName,
		})
		_node.TopologyName = value
	}
	if value, ok := ntc.mutation.TopologyDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nettopology.FieldTopologyDescription,
		})
		_node.TopologyDescription = value
	}
	if nodes := ntc.mutation.TopologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nettopology.TopologyTable,
			Columns: []string{nettopology.TopologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopologydevicemap.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NetTopologyCreateBulk is the builder for creating many NetTopology entities in bulk.
type NetTopologyCreateBulk struct {
	config
	builders []*NetTopologyCreate
}

// Save creates the NetTopology entities in the database.
func (ntcb *NetTopologyCreateBulk) Save(ctx context.Context) ([]*NetTopology, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ntcb.builders))
	nodes := make([]*NetTopology, len(ntcb.builders))
	mutators := make([]Mutator, len(ntcb.builders))
	for i := range ntcb.builders {
		func(i int, root context.Context) {
			builder := ntcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NetTopologyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ntcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ntcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ntcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ntcb *NetTopologyCreateBulk) SaveX(ctx context.Context) []*NetTopology {
	v, err := ntcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
