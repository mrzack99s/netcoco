// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/device"
	"github.com/mrzack99s/netcoco/ent/nettopology"
	"github.com/mrzack99s/netcoco/ent/nettopologydevicemap"
	"github.com/mrzack99s/netcoco/ent/predicate"
)

// NetTopologyDeviceMapQuery is the builder for querying NetTopologyDeviceMap entities.
type NetTopologyDeviceMapQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.NetTopologyDeviceMap
	// eager-loading edges.
	withOnTopology *NetTopologyQuery
	withDevice     *DeviceQuery
	withEdge       *NetTopologyDeviceMapQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NetTopologyDeviceMapQuery builder.
func (ntdmq *NetTopologyDeviceMapQuery) Where(ps ...predicate.NetTopologyDeviceMap) *NetTopologyDeviceMapQuery {
	ntdmq.predicates = append(ntdmq.predicates, ps...)
	return ntdmq
}

// Limit adds a limit step to the query.
func (ntdmq *NetTopologyDeviceMapQuery) Limit(limit int) *NetTopologyDeviceMapQuery {
	ntdmq.limit = &limit
	return ntdmq
}

// Offset adds an offset step to the query.
func (ntdmq *NetTopologyDeviceMapQuery) Offset(offset int) *NetTopologyDeviceMapQuery {
	ntdmq.offset = &offset
	return ntdmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ntdmq *NetTopologyDeviceMapQuery) Unique(unique bool) *NetTopologyDeviceMapQuery {
	ntdmq.unique = &unique
	return ntdmq
}

// Order adds an order step to the query.
func (ntdmq *NetTopologyDeviceMapQuery) Order(o ...OrderFunc) *NetTopologyDeviceMapQuery {
	ntdmq.order = append(ntdmq.order, o...)
	return ntdmq
}

// QueryOnTopology chains the current query on the "on_topology" edge.
func (ntdmq *NetTopologyDeviceMapQuery) QueryOnTopology() *NetTopologyQuery {
	query := &NetTopologyQuery{config: ntdmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ntdmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ntdmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(nettopologydevicemap.Table, nettopologydevicemap.FieldID, selector),
			sqlgraph.To(nettopology.Table, nettopology.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, nettopologydevicemap.OnTopologyTable, nettopologydevicemap.OnTopologyColumn),
		)
		fromU = sqlgraph.SetNeighbors(ntdmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDevice chains the current query on the "device" edge.
func (ntdmq *NetTopologyDeviceMapQuery) QueryDevice() *DeviceQuery {
	query := &DeviceQuery{config: ntdmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ntdmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ntdmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(nettopologydevicemap.Table, nettopologydevicemap.FieldID, selector),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, nettopologydevicemap.DeviceTable, nettopologydevicemap.DeviceColumn),
		)
		fromU = sqlgraph.SetNeighbors(ntdmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEdge chains the current query on the "edge" edge.
func (ntdmq *NetTopologyDeviceMapQuery) QueryEdge() *NetTopologyDeviceMapQuery {
	query := &NetTopologyDeviceMapQuery{config: ntdmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ntdmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ntdmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(nettopologydevicemap.Table, nettopologydevicemap.FieldID, selector),
			sqlgraph.To(nettopologydevicemap.Table, nettopologydevicemap.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, nettopologydevicemap.EdgeTable, nettopologydevicemap.EdgePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ntdmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NetTopologyDeviceMap entity from the query.
// Returns a *NotFoundError when no NetTopologyDeviceMap was found.
func (ntdmq *NetTopologyDeviceMapQuery) First(ctx context.Context) (*NetTopologyDeviceMap, error) {
	nodes, err := ntdmq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{nettopologydevicemap.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ntdmq *NetTopologyDeviceMapQuery) FirstX(ctx context.Context) *NetTopologyDeviceMap {
	node, err := ntdmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NetTopologyDeviceMap ID from the query.
// Returns a *NotFoundError when no NetTopologyDeviceMap ID was found.
func (ntdmq *NetTopologyDeviceMapQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ntdmq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{nettopologydevicemap.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ntdmq *NetTopologyDeviceMapQuery) FirstIDX(ctx context.Context) int {
	id, err := ntdmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NetTopologyDeviceMap entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one NetTopologyDeviceMap entity is not found.
// Returns a *NotFoundError when no NetTopologyDeviceMap entities are found.
func (ntdmq *NetTopologyDeviceMapQuery) Only(ctx context.Context) (*NetTopologyDeviceMap, error) {
	nodes, err := ntdmq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{nettopologydevicemap.Label}
	default:
		return nil, &NotSingularError{nettopologydevicemap.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ntdmq *NetTopologyDeviceMapQuery) OnlyX(ctx context.Context) *NetTopologyDeviceMap {
	node, err := ntdmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NetTopologyDeviceMap ID in the query.
// Returns a *NotSingularError when exactly one NetTopologyDeviceMap ID is not found.
// Returns a *NotFoundError when no entities are found.
func (ntdmq *NetTopologyDeviceMapQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ntdmq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{nettopologydevicemap.Label}
	default:
		err = &NotSingularError{nettopologydevicemap.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ntdmq *NetTopologyDeviceMapQuery) OnlyIDX(ctx context.Context) int {
	id, err := ntdmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NetTopologyDeviceMaps.
func (ntdmq *NetTopologyDeviceMapQuery) All(ctx context.Context) ([]*NetTopologyDeviceMap, error) {
	if err := ntdmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ntdmq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ntdmq *NetTopologyDeviceMapQuery) AllX(ctx context.Context) []*NetTopologyDeviceMap {
	nodes, err := ntdmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NetTopologyDeviceMap IDs.
func (ntdmq *NetTopologyDeviceMapQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ntdmq.Select(nettopologydevicemap.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ntdmq *NetTopologyDeviceMapQuery) IDsX(ctx context.Context) []int {
	ids, err := ntdmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ntdmq *NetTopologyDeviceMapQuery) Count(ctx context.Context) (int, error) {
	if err := ntdmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ntdmq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ntdmq *NetTopologyDeviceMapQuery) CountX(ctx context.Context) int {
	count, err := ntdmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ntdmq *NetTopologyDeviceMapQuery) Exist(ctx context.Context) (bool, error) {
	if err := ntdmq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ntdmq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ntdmq *NetTopologyDeviceMapQuery) ExistX(ctx context.Context) bool {
	exist, err := ntdmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NetTopologyDeviceMapQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ntdmq *NetTopologyDeviceMapQuery) Clone() *NetTopologyDeviceMapQuery {
	if ntdmq == nil {
		return nil
	}
	return &NetTopologyDeviceMapQuery{
		config:         ntdmq.config,
		limit:          ntdmq.limit,
		offset:         ntdmq.offset,
		order:          append([]OrderFunc{}, ntdmq.order...),
		predicates:     append([]predicate.NetTopologyDeviceMap{}, ntdmq.predicates...),
		withOnTopology: ntdmq.withOnTopology.Clone(),
		withDevice:     ntdmq.withDevice.Clone(),
		withEdge:       ntdmq.withEdge.Clone(),
		// clone intermediate query.
		sql:  ntdmq.sql.Clone(),
		path: ntdmq.path,
	}
}

// WithOnTopology tells the query-builder to eager-load the nodes that are connected to
// the "on_topology" edge. The optional arguments are used to configure the query builder of the edge.
func (ntdmq *NetTopologyDeviceMapQuery) WithOnTopology(opts ...func(*NetTopologyQuery)) *NetTopologyDeviceMapQuery {
	query := &NetTopologyQuery{config: ntdmq.config}
	for _, opt := range opts {
		opt(query)
	}
	ntdmq.withOnTopology = query
	return ntdmq
}

// WithDevice tells the query-builder to eager-load the nodes that are connected to
// the "device" edge. The optional arguments are used to configure the query builder of the edge.
func (ntdmq *NetTopologyDeviceMapQuery) WithDevice(opts ...func(*DeviceQuery)) *NetTopologyDeviceMapQuery {
	query := &DeviceQuery{config: ntdmq.config}
	for _, opt := range opts {
		opt(query)
	}
	ntdmq.withDevice = query
	return ntdmq
}

// WithEdge tells the query-builder to eager-load the nodes that are connected to
// the "edge" edge. The optional arguments are used to configure the query builder of the edge.
func (ntdmq *NetTopologyDeviceMapQuery) WithEdge(opts ...func(*NetTopologyDeviceMapQuery)) *NetTopologyDeviceMapQuery {
	query := &NetTopologyDeviceMapQuery{config: ntdmq.config}
	for _, opt := range opts {
		opt(query)
	}
	ntdmq.withEdge = query
	return ntdmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PositionX int `json:"position_x,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NetTopologyDeviceMap.Query().
//		GroupBy(nettopologydevicemap.FieldPositionX).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ntdmq *NetTopologyDeviceMapQuery) GroupBy(field string, fields ...string) *NetTopologyDeviceMapGroupBy {
	group := &NetTopologyDeviceMapGroupBy{config: ntdmq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ntdmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ntdmq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PositionX int `json:"position_x,omitempty"`
//	}
//
//	client.NetTopologyDeviceMap.Query().
//		Select(nettopologydevicemap.FieldPositionX).
//		Scan(ctx, &v)
//
func (ntdmq *NetTopologyDeviceMapQuery) Select(field string, fields ...string) *NetTopologyDeviceMapSelect {
	ntdmq.fields = append([]string{field}, fields...)
	return &NetTopologyDeviceMapSelect{NetTopologyDeviceMapQuery: ntdmq}
}

func (ntdmq *NetTopologyDeviceMapQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ntdmq.fields {
		if !nettopologydevicemap.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ntdmq.path != nil {
		prev, err := ntdmq.path(ctx)
		if err != nil {
			return err
		}
		ntdmq.sql = prev
	}
	return nil
}

func (ntdmq *NetTopologyDeviceMapQuery) sqlAll(ctx context.Context) ([]*NetTopologyDeviceMap, error) {
	var (
		nodes       = []*NetTopologyDeviceMap{}
		withFKs     = ntdmq.withFKs
		_spec       = ntdmq.querySpec()
		loadedTypes = [3]bool{
			ntdmq.withOnTopology != nil,
			ntdmq.withDevice != nil,
			ntdmq.withEdge != nil,
		}
	)
	if ntdmq.withOnTopology != nil || ntdmq.withDevice != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, nettopologydevicemap.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &NetTopologyDeviceMap{config: ntdmq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ntdmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ntdmq.withOnTopology; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*NetTopologyDeviceMap)
		for i := range nodes {
			if nodes[i].net_topology_topology == nil {
				continue
			}
			fk := *nodes[i].net_topology_topology
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(nettopology.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "net_topology_topology" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.OnTopology = n
			}
		}
	}

	if query := ntdmq.withDevice; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*NetTopologyDeviceMap)
		for i := range nodes {
			if nodes[i].device_in_topology == nil {
				continue
			}
			fk := *nodes[i].device_in_topology
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(device.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "device_in_topology" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Device = n
			}
		}
	}

	if query := ntdmq.withEdge; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*NetTopologyDeviceMap, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Edge = []*NetTopologyDeviceMap{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*NetTopologyDeviceMap)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   nettopologydevicemap.EdgeTable,
				Columns: nettopologydevicemap.EdgePrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(nettopologydevicemap.EdgePrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, ntdmq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "edge": %w`, err)
		}
		query.Where(nettopologydevicemap.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "edge" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Edge = append(nodes[i].Edges.Edge, n)
			}
		}
	}

	return nodes, nil
}

func (ntdmq *NetTopologyDeviceMapQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ntdmq.querySpec()
	return sqlgraph.CountNodes(ctx, ntdmq.driver, _spec)
}

func (ntdmq *NetTopologyDeviceMapQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ntdmq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ntdmq *NetTopologyDeviceMapQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nettopologydevicemap.Table,
			Columns: nettopologydevicemap.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nettopologydevicemap.FieldID,
			},
		},
		From:   ntdmq.sql,
		Unique: true,
	}
	if unique := ntdmq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ntdmq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nettopologydevicemap.FieldID)
		for i := range fields {
			if fields[i] != nettopologydevicemap.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ntdmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ntdmq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ntdmq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ntdmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ntdmq *NetTopologyDeviceMapQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ntdmq.driver.Dialect())
	t1 := builder.Table(nettopologydevicemap.Table)
	selector := builder.Select(t1.Columns(nettopologydevicemap.Columns...)...).From(t1)
	if ntdmq.sql != nil {
		selector = ntdmq.sql
		selector.Select(selector.Columns(nettopologydevicemap.Columns...)...)
	}
	for _, p := range ntdmq.predicates {
		p(selector)
	}
	for _, p := range ntdmq.order {
		p(selector)
	}
	if offset := ntdmq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ntdmq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NetTopologyDeviceMapGroupBy is the group-by builder for NetTopologyDeviceMap entities.
type NetTopologyDeviceMapGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ntdmgb *NetTopologyDeviceMapGroupBy) Aggregate(fns ...AggregateFunc) *NetTopologyDeviceMapGroupBy {
	ntdmgb.fns = append(ntdmgb.fns, fns...)
	return ntdmgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ntdmgb *NetTopologyDeviceMapGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ntdmgb.path(ctx)
	if err != nil {
		return err
	}
	ntdmgb.sql = query
	return ntdmgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ntdmgb *NetTopologyDeviceMapGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ntdmgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ntdmgb *NetTopologyDeviceMapGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ntdmgb.fields) > 1 {
		return nil, errors.New("ent: NetTopologyDeviceMapGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ntdmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ntdmgb *NetTopologyDeviceMapGroupBy) StringsX(ctx context.Context) []string {
	v, err := ntdmgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ntdmgb *NetTopologyDeviceMapGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ntdmgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{nettopologydevicemap.Label}
	default:
		err = fmt.Errorf("ent: NetTopologyDeviceMapGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ntdmgb *NetTopologyDeviceMapGroupBy) StringX(ctx context.Context) string {
	v, err := ntdmgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ntdmgb *NetTopologyDeviceMapGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ntdmgb.fields) > 1 {
		return nil, errors.New("ent: NetTopologyDeviceMapGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ntdmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ntdmgb *NetTopologyDeviceMapGroupBy) IntsX(ctx context.Context) []int {
	v, err := ntdmgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ntdmgb *NetTopologyDeviceMapGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ntdmgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{nettopologydevicemap.Label}
	default:
		err = fmt.Errorf("ent: NetTopologyDeviceMapGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ntdmgb *NetTopologyDeviceMapGroupBy) IntX(ctx context.Context) int {
	v, err := ntdmgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ntdmgb *NetTopologyDeviceMapGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ntdmgb.fields) > 1 {
		return nil, errors.New("ent: NetTopologyDeviceMapGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ntdmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ntdmgb *NetTopologyDeviceMapGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ntdmgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ntdmgb *NetTopologyDeviceMapGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ntdmgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{nettopologydevicemap.Label}
	default:
		err = fmt.Errorf("ent: NetTopologyDeviceMapGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ntdmgb *NetTopologyDeviceMapGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ntdmgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ntdmgb *NetTopologyDeviceMapGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ntdmgb.fields) > 1 {
		return nil, errors.New("ent: NetTopologyDeviceMapGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ntdmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ntdmgb *NetTopologyDeviceMapGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ntdmgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ntdmgb *NetTopologyDeviceMapGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ntdmgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{nettopologydevicemap.Label}
	default:
		err = fmt.Errorf("ent: NetTopologyDeviceMapGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ntdmgb *NetTopologyDeviceMapGroupBy) BoolX(ctx context.Context) bool {
	v, err := ntdmgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ntdmgb *NetTopologyDeviceMapGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ntdmgb.fields {
		if !nettopologydevicemap.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ntdmgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ntdmgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ntdmgb *NetTopologyDeviceMapGroupBy) sqlQuery() *sql.Selector {
	selector := ntdmgb.sql
	columns := make([]string, 0, len(ntdmgb.fields)+len(ntdmgb.fns))
	columns = append(columns, ntdmgb.fields...)
	for _, fn := range ntdmgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(ntdmgb.fields...)
}

// NetTopologyDeviceMapSelect is the builder for selecting fields of NetTopologyDeviceMap entities.
type NetTopologyDeviceMapSelect struct {
	*NetTopologyDeviceMapQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ntdms *NetTopologyDeviceMapSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ntdms.prepareQuery(ctx); err != nil {
		return err
	}
	ntdms.sql = ntdms.NetTopologyDeviceMapQuery.sqlQuery(ctx)
	return ntdms.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ntdms *NetTopologyDeviceMapSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ntdms.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ntdms *NetTopologyDeviceMapSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ntdms.fields) > 1 {
		return nil, errors.New("ent: NetTopologyDeviceMapSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ntdms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ntdms *NetTopologyDeviceMapSelect) StringsX(ctx context.Context) []string {
	v, err := ntdms.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ntdms *NetTopologyDeviceMapSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ntdms.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{nettopologydevicemap.Label}
	default:
		err = fmt.Errorf("ent: NetTopologyDeviceMapSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ntdms *NetTopologyDeviceMapSelect) StringX(ctx context.Context) string {
	v, err := ntdms.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ntdms *NetTopologyDeviceMapSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ntdms.fields) > 1 {
		return nil, errors.New("ent: NetTopologyDeviceMapSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ntdms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ntdms *NetTopologyDeviceMapSelect) IntsX(ctx context.Context) []int {
	v, err := ntdms.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ntdms *NetTopologyDeviceMapSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ntdms.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{nettopologydevicemap.Label}
	default:
		err = fmt.Errorf("ent: NetTopologyDeviceMapSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ntdms *NetTopologyDeviceMapSelect) IntX(ctx context.Context) int {
	v, err := ntdms.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ntdms *NetTopologyDeviceMapSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ntdms.fields) > 1 {
		return nil, errors.New("ent: NetTopologyDeviceMapSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ntdms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ntdms *NetTopologyDeviceMapSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ntdms.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ntdms *NetTopologyDeviceMapSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ntdms.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{nettopologydevicemap.Label}
	default:
		err = fmt.Errorf("ent: NetTopologyDeviceMapSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ntdms *NetTopologyDeviceMapSelect) Float64X(ctx context.Context) float64 {
	v, err := ntdms.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ntdms *NetTopologyDeviceMapSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ntdms.fields) > 1 {
		return nil, errors.New("ent: NetTopologyDeviceMapSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ntdms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ntdms *NetTopologyDeviceMapSelect) BoolsX(ctx context.Context) []bool {
	v, err := ntdms.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ntdms *NetTopologyDeviceMapSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ntdms.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{nettopologydevicemap.Label}
	default:
		err = fmt.Errorf("ent: NetTopologyDeviceMapSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ntdms *NetTopologyDeviceMapSelect) BoolX(ctx context.Context) bool {
	v, err := ntdms.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ntdms *NetTopologyDeviceMapSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ntdms.sqlQuery().Query()
	if err := ntdms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ntdms *NetTopologyDeviceMapSelect) sqlQuery() sql.Querier {
	selector := ntdms.sql
	selector.Select(selector.Columns(ntdms.fields...)...)
	return selector
}
