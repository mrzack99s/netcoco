// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/netinterface"
	"github.com/mrzack99s/netcoco/ent/netinterfacelayer"
	"github.com/mrzack99s/netcoco/ent/portchannelinterface"
)

// NetInterfaceLayerCreate is the builder for creating a NetInterfaceLayer entity.
type NetInterfaceLayerCreate struct {
	config
	mutation *NetInterfaceLayerMutation
	hooks    []Hook
}

// SetInterfaceLayer sets the "interface_layer" field.
func (nilc *NetInterfaceLayerCreate) SetInterfaceLayer(i int) *NetInterfaceLayerCreate {
	nilc.mutation.SetInterfaceLayer(i)
	return nilc
}

// AddLayerIDs adds the "layers" edge to the NetInterface entity by IDs.
func (nilc *NetInterfaceLayerCreate) AddLayerIDs(ids ...int) *NetInterfaceLayerCreate {
	nilc.mutation.AddLayerIDs(ids...)
	return nilc
}

// AddLayers adds the "layers" edges to the NetInterface entity.
func (nilc *NetInterfaceLayerCreate) AddLayers(n ...*NetInterface) *NetInterfaceLayerCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nilc.AddLayerIDs(ids...)
}

// AddPoLayerIDs adds the "po_layers" edge to the PortChannelInterface entity by IDs.
func (nilc *NetInterfaceLayerCreate) AddPoLayerIDs(ids ...int) *NetInterfaceLayerCreate {
	nilc.mutation.AddPoLayerIDs(ids...)
	return nilc
}

// AddPoLayers adds the "po_layers" edges to the PortChannelInterface entity.
func (nilc *NetInterfaceLayerCreate) AddPoLayers(p ...*PortChannelInterface) *NetInterfaceLayerCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nilc.AddPoLayerIDs(ids...)
}

// Mutation returns the NetInterfaceLayerMutation object of the builder.
func (nilc *NetInterfaceLayerCreate) Mutation() *NetInterfaceLayerMutation {
	return nilc.mutation
}

// Save creates the NetInterfaceLayer in the database.
func (nilc *NetInterfaceLayerCreate) Save(ctx context.Context) (*NetInterfaceLayer, error) {
	var (
		err  error
		node *NetInterfaceLayer
	)
	if len(nilc.hooks) == 0 {
		if err = nilc.check(); err != nil {
			return nil, err
		}
		node, err = nilc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetInterfaceLayerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nilc.check(); err != nil {
				return nil, err
			}
			nilc.mutation = mutation
			node, err = nilc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nilc.hooks) - 1; i >= 0; i-- {
			mut = nilc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nilc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nilc *NetInterfaceLayerCreate) SaveX(ctx context.Context) *NetInterfaceLayer {
	v, err := nilc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (nilc *NetInterfaceLayerCreate) check() error {
	if _, ok := nilc.mutation.InterfaceLayer(); !ok {
		return &ValidationError{Name: "interface_layer", err: errors.New("ent: missing required field \"interface_layer\"")}
	}
	if v, ok := nilc.mutation.InterfaceLayer(); ok {
		if err := netinterfacelayer.InterfaceLayerValidator(v); err != nil {
			return &ValidationError{Name: "interface_layer", err: fmt.Errorf("ent: validator failed for field \"interface_layer\": %w", err)}
		}
	}
	return nil
}

func (nilc *NetInterfaceLayerCreate) sqlSave(ctx context.Context) (*NetInterfaceLayer, error) {
	_node, _spec := nilc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nilc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (nilc *NetInterfaceLayerCreate) createSpec() (*NetInterfaceLayer, *sqlgraph.CreateSpec) {
	var (
		_node = &NetInterfaceLayer{config: nilc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: netinterfacelayer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: netinterfacelayer.FieldID,
			},
		}
	)
	if value, ok := nilc.mutation.InterfaceLayer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: netinterfacelayer.FieldInterfaceLayer,
		})
		_node.InterfaceLayer = value
	}
	if nodes := nilc.mutation.LayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacelayer.LayersTable,
			Columns: []string{netinterfacelayer.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nilc.mutation.PoLayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacelayer.PoLayersTable,
			Columns: []string{netinterfacelayer.PoLayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portchannelinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NetInterfaceLayerCreateBulk is the builder for creating many NetInterfaceLayer entities in bulk.
type NetInterfaceLayerCreateBulk struct {
	config
	builders []*NetInterfaceLayerCreate
}

// Save creates the NetInterfaceLayer entities in the database.
func (nilcb *NetInterfaceLayerCreateBulk) Save(ctx context.Context) ([]*NetInterfaceLayer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nilcb.builders))
	nodes := make([]*NetInterfaceLayer, len(nilcb.builders))
	mutators := make([]Mutator, len(nilcb.builders))
	for i := range nilcb.builders {
		func(i int, root context.Context) {
			builder := nilcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NetInterfaceLayerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nilcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nilcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nilcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nilcb *NetInterfaceLayerCreateBulk) SaveX(ctx context.Context) []*NetInterfaceLayer {
	v, err := nilcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
