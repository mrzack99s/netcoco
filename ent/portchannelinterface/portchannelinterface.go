// Code generated by entc, DO NOT EDIT.

package portchannelinterface

const (
	// Label holds the string label denoting the portchannelinterface type in the database.
	Label = "port_channel_interface"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPoInterfaceID holds the string denoting the po_interface_id field in the database.
	FieldPoInterfaceID = "po_interface_id"
	// FieldPoInterfaceShutdown holds the string denoting the po_interface_shutdown field in the database.
	FieldPoInterfaceShutdown = "po_interface_shutdown"
	// EdgeMode holds the string denoting the mode edge name in mutations.
	EdgeMode = "mode"
	// EdgeOnLayer holds the string denoting the on_layer edge name in mutations.
	EdgeOnLayer = "on_layer"
	// EdgeHaveVlans holds the string denoting the have_vlans edge name in mutations.
	EdgeHaveVlans = "have_vlans"
	// EdgeNativeOnVlan holds the string denoting the native_on_vlan edge name in mutations.
	EdgeNativeOnVlan = "native_on_vlan"
	// EdgeOnDevice holds the string denoting the on_device edge name in mutations.
	EdgeOnDevice = "on_device"
	// EdgeOnIPAddress holds the string denoting the on_ip_address edge name in mutations.
	EdgeOnIPAddress = "on_ip_address"
	// EdgeInterfaces holds the string denoting the interfaces edge name in mutations.
	EdgeInterfaces = "interfaces"
	// Table holds the table name of the portchannelinterface in the database.
	Table = "port_channel_interfaces"
	// ModeTable is the table the holds the mode relation/edge.
	ModeTable = "port_channel_interfaces"
	// ModeInverseTable is the table name for the NetInterfaceMode entity.
	// It exists in this package in order to avoid circular dependency with the "netinterfacemode" package.
	ModeInverseTable = "net_interface_modes"
	// ModeColumn is the table column denoting the mode relation/edge.
	ModeColumn = "net_interface_mode_po_modes"
	// OnLayerTable is the table the holds the on_layer relation/edge.
	OnLayerTable = "port_channel_interfaces"
	// OnLayerInverseTable is the table name for the NetInterfaceLayer entity.
	// It exists in this package in order to avoid circular dependency with the "netinterfacelayer" package.
	OnLayerInverseTable = "net_interface_layers"
	// OnLayerColumn is the table column denoting the on_layer relation/edge.
	OnLayerColumn = "net_interface_layer_po_layers"
	// HaveVlansTable is the table the holds the have_vlans relation/edge. The primary key declared below.
	HaveVlansTable = "vlan_po_vlans"
	// HaveVlansInverseTable is the table name for the Vlan entity.
	// It exists in this package in order to avoid circular dependency with the "vlan" package.
	HaveVlansInverseTable = "vlans"
	// NativeOnVlanTable is the table the holds the native_on_vlan relation/edge.
	NativeOnVlanTable = "port_channel_interfaces"
	// NativeOnVlanInverseTable is the table name for the Vlan entity.
	// It exists in this package in order to avoid circular dependency with the "vlan" package.
	NativeOnVlanInverseTable = "vlans"
	// NativeOnVlanColumn is the table column denoting the native_on_vlan relation/edge.
	NativeOnVlanColumn = "vlan_po_native_vlan"
	// OnDeviceTable is the table the holds the on_device relation/edge.
	OnDeviceTable = "port_channel_interfaces"
	// OnDeviceInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	OnDeviceInverseTable = "devices"
	// OnDeviceColumn is the table column denoting the on_device relation/edge.
	OnDeviceColumn = "device_po_interfaces"
	// OnIPAddressTable is the table the holds the on_ip_address relation/edge.
	OnIPAddressTable = "port_channel_interfaces"
	// OnIPAddressInverseTable is the table name for the IPAddress entity.
	// It exists in this package in order to avoid circular dependency with the "ipaddress" package.
	OnIPAddressInverseTable = "ip_addresses"
	// OnIPAddressColumn is the table column denoting the on_ip_address relation/edge.
	OnIPAddressColumn = "ip_address_po_interfaces"
	// InterfacesTable is the table the holds the interfaces relation/edge.
	InterfacesTable = "net_interfaces"
	// InterfacesInverseTable is the table name for the NetInterface entity.
	// It exists in this package in order to avoid circular dependency with the "netinterface" package.
	InterfacesInverseTable = "net_interfaces"
	// InterfacesColumn is the table column denoting the interfaces relation/edge.
	InterfacesColumn = "port_channel_interface_interfaces"
)

// Columns holds all SQL columns for portchannelinterface fields.
var Columns = []string{
	FieldID,
	FieldPoInterfaceID,
	FieldPoInterfaceShutdown,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "port_channel_interfaces"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"device_po_interfaces",
	"ip_address_po_interfaces",
	"net_interface_layer_po_layers",
	"net_interface_mode_po_modes",
	"vlan_po_native_vlan",
}

var (
	// HaveVlansPrimaryKey and HaveVlansColumn2 are the table columns denoting the
	// primary key for the have_vlans relation (M2M).
	HaveVlansPrimaryKey = []string{"vlan_id", "port_channel_interface_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PoInterfaceIDValidator is a validator for the "po_interface_id" field. It is called by the builders before save.
	PoInterfaceIDValidator func(int) error
	// DefaultPoInterfaceShutdown holds the default value on creation for the "po_interface_shutdown" field.
	DefaultPoInterfaceShutdown bool
)
