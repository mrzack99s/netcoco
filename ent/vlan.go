// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/mrzack99s/netcoco/ent/vlan"
)

// Vlan is the model entity for the Vlan schema.
type Vlan struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VlanID holds the value of the "vlan_id" field.
	VlanID int `json:"vlan_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VlanQuery when eager-loading is set.
	Edges VlanEdges `json:"edges"`
}

// VlanEdges holds the relations/edges for other nodes in the graph.
type VlanEdges struct {
	// Vlans holds the value of the vlans edge.
	Vlans []*NetInterface `json:"vlans,omitempty"`
	// NativeVlan holds the value of the native_vlan edge.
	NativeVlan []*NetInterface `json:"native_vlan,omitempty"`
	// OnDevice holds the value of the on_device edge.
	OnDevice []*Device `json:"on_device,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// VlansOrErr returns the Vlans value or an error if the edge
// was not loaded in eager-loading.
func (e VlanEdges) VlansOrErr() ([]*NetInterface, error) {
	if e.loadedTypes[0] {
		return e.Vlans, nil
	}
	return nil, &NotLoadedError{edge: "vlans"}
}

// NativeVlanOrErr returns the NativeVlan value or an error if the edge
// was not loaded in eager-loading.
func (e VlanEdges) NativeVlanOrErr() ([]*NetInterface, error) {
	if e.loadedTypes[1] {
		return e.NativeVlan, nil
	}
	return nil, &NotLoadedError{edge: "native_vlan"}
}

// OnDeviceOrErr returns the OnDevice value or an error if the edge
// was not loaded in eager-loading.
func (e VlanEdges) OnDeviceOrErr() ([]*Device, error) {
	if e.loadedTypes[2] {
		return e.OnDevice, nil
	}
	return nil, &NotLoadedError{edge: "on_device"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vlan) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case vlan.FieldID, vlan.FieldVlanID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Vlan", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vlan fields.
func (v *Vlan) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vlan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case vlan.FieldVlanID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vlan_id", values[i])
			} else if value.Valid {
				v.VlanID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryVlans queries the "vlans" edge of the Vlan entity.
func (v *Vlan) QueryVlans() *NetInterfaceQuery {
	return (&VlanClient{config: v.config}).QueryVlans(v)
}

// QueryNativeVlan queries the "native_vlan" edge of the Vlan entity.
func (v *Vlan) QueryNativeVlan() *NetInterfaceQuery {
	return (&VlanClient{config: v.config}).QueryNativeVlan(v)
}

// QueryOnDevice queries the "on_device" edge of the Vlan entity.
func (v *Vlan) QueryOnDevice() *DeviceQuery {
	return (&VlanClient{config: v.config}).QueryOnDevice(v)
}

// Update returns a builder for updating this Vlan.
// Note that you need to call Vlan.Unwrap() before calling this method if this Vlan
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vlan) Update() *VlanUpdateOne {
	return (&VlanClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Vlan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vlan) Unwrap() *Vlan {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vlan is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vlan) String() string {
	var builder strings.Builder
	builder.WriteString("Vlan(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", vlan_id=")
	builder.WriteString(fmt.Sprintf("%v", v.VlanID))
	builder.WriteByte(')')
	return builder.String()
}

// Vlans is a parsable slice of Vlan.
type Vlans []*Vlan

func (v Vlans) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
