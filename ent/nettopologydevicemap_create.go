// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/device"
	"github.com/mrzack99s/netcoco/ent/nettopology"
	"github.com/mrzack99s/netcoco/ent/nettopologydevicemap"
)

// NetTopologyDeviceMapCreate is the builder for creating a NetTopologyDeviceMap entity.
type NetTopologyDeviceMapCreate struct {
	config
	mutation *NetTopologyDeviceMapMutation
	hooks    []Hook
}

// SetPositionX sets the "position_x" field.
func (ntdmc *NetTopologyDeviceMapCreate) SetPositionX(i int) *NetTopologyDeviceMapCreate {
	ntdmc.mutation.SetPositionX(i)
	return ntdmc
}

// SetNillablePositionX sets the "position_x" field if the given value is not nil.
func (ntdmc *NetTopologyDeviceMapCreate) SetNillablePositionX(i *int) *NetTopologyDeviceMapCreate {
	if i != nil {
		ntdmc.SetPositionX(*i)
	}
	return ntdmc
}

// SetPositionY sets the "position_y" field.
func (ntdmc *NetTopologyDeviceMapCreate) SetPositionY(i int) *NetTopologyDeviceMapCreate {
	ntdmc.mutation.SetPositionY(i)
	return ntdmc
}

// SetNillablePositionY sets the "position_y" field if the given value is not nil.
func (ntdmc *NetTopologyDeviceMapCreate) SetNillablePositionY(i *int) *NetTopologyDeviceMapCreate {
	if i != nil {
		ntdmc.SetPositionY(*i)
	}
	return ntdmc
}

// SetOnTopologyID sets the "on_topology" edge to the NetTopology entity by ID.
func (ntdmc *NetTopologyDeviceMapCreate) SetOnTopologyID(id int) *NetTopologyDeviceMapCreate {
	ntdmc.mutation.SetOnTopologyID(id)
	return ntdmc
}

// SetNillableOnTopologyID sets the "on_topology" edge to the NetTopology entity by ID if the given value is not nil.
func (ntdmc *NetTopologyDeviceMapCreate) SetNillableOnTopologyID(id *int) *NetTopologyDeviceMapCreate {
	if id != nil {
		ntdmc = ntdmc.SetOnTopologyID(*id)
	}
	return ntdmc
}

// SetOnTopology sets the "on_topology" edge to the NetTopology entity.
func (ntdmc *NetTopologyDeviceMapCreate) SetOnTopology(n *NetTopology) *NetTopologyDeviceMapCreate {
	return ntdmc.SetOnTopologyID(n.ID)
}

// SetDeviceID sets the "device" edge to the Device entity by ID.
func (ntdmc *NetTopologyDeviceMapCreate) SetDeviceID(id int) *NetTopologyDeviceMapCreate {
	ntdmc.mutation.SetDeviceID(id)
	return ntdmc
}

// SetNillableDeviceID sets the "device" edge to the Device entity by ID if the given value is not nil.
func (ntdmc *NetTopologyDeviceMapCreate) SetNillableDeviceID(id *int) *NetTopologyDeviceMapCreate {
	if id != nil {
		ntdmc = ntdmc.SetDeviceID(*id)
	}
	return ntdmc
}

// SetDevice sets the "device" edge to the Device entity.
func (ntdmc *NetTopologyDeviceMapCreate) SetDevice(d *Device) *NetTopologyDeviceMapCreate {
	return ntdmc.SetDeviceID(d.ID)
}

// AddEdgeIDs adds the "edge" edge to the NetTopologyDeviceMap entity by IDs.
func (ntdmc *NetTopologyDeviceMapCreate) AddEdgeIDs(ids ...int) *NetTopologyDeviceMapCreate {
	ntdmc.mutation.AddEdgeIDs(ids...)
	return ntdmc
}

// AddEdge adds the "edge" edges to the NetTopologyDeviceMap entity.
func (ntdmc *NetTopologyDeviceMapCreate) AddEdge(n ...*NetTopologyDeviceMap) *NetTopologyDeviceMapCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ntdmc.AddEdgeIDs(ids...)
}

// Mutation returns the NetTopologyDeviceMapMutation object of the builder.
func (ntdmc *NetTopologyDeviceMapCreate) Mutation() *NetTopologyDeviceMapMutation {
	return ntdmc.mutation
}

// Save creates the NetTopologyDeviceMap in the database.
func (ntdmc *NetTopologyDeviceMapCreate) Save(ctx context.Context) (*NetTopologyDeviceMap, error) {
	var (
		err  error
		node *NetTopologyDeviceMap
	)
	ntdmc.defaults()
	if len(ntdmc.hooks) == 0 {
		if err = ntdmc.check(); err != nil {
			return nil, err
		}
		node, err = ntdmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetTopologyDeviceMapMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ntdmc.check(); err != nil {
				return nil, err
			}
			ntdmc.mutation = mutation
			node, err = ntdmc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ntdmc.hooks) - 1; i >= 0; i-- {
			mut = ntdmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ntdmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ntdmc *NetTopologyDeviceMapCreate) SaveX(ctx context.Context) *NetTopologyDeviceMap {
	v, err := ntdmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ntdmc *NetTopologyDeviceMapCreate) defaults() {
	if _, ok := ntdmc.mutation.PositionX(); !ok {
		v := nettopologydevicemap.DefaultPositionX
		ntdmc.mutation.SetPositionX(v)
	}
	if _, ok := ntdmc.mutation.PositionY(); !ok {
		v := nettopologydevicemap.DefaultPositionY
		ntdmc.mutation.SetPositionY(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ntdmc *NetTopologyDeviceMapCreate) check() error {
	if _, ok := ntdmc.mutation.PositionX(); !ok {
		return &ValidationError{Name: "position_x", err: errors.New("ent: missing required field \"position_x\"")}
	}
	if _, ok := ntdmc.mutation.PositionY(); !ok {
		return &ValidationError{Name: "position_y", err: errors.New("ent: missing required field \"position_y\"")}
	}
	return nil
}

func (ntdmc *NetTopologyDeviceMapCreate) sqlSave(ctx context.Context) (*NetTopologyDeviceMap, error) {
	_node, _spec := ntdmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ntdmc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ntdmc *NetTopologyDeviceMapCreate) createSpec() (*NetTopologyDeviceMap, *sqlgraph.CreateSpec) {
	var (
		_node = &NetTopologyDeviceMap{config: ntdmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: nettopologydevicemap.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nettopologydevicemap.FieldID,
			},
		}
	)
	if value, ok := ntdmc.mutation.PositionX(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: nettopologydevicemap.FieldPositionX,
		})
		_node.PositionX = value
	}
	if value, ok := ntdmc.mutation.PositionY(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: nettopologydevicemap.FieldPositionY,
		})
		_node.PositionY = value
	}
	if nodes := ntdmc.mutation.OnTopologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nettopologydevicemap.OnTopologyTable,
			Columns: []string{nettopologydevicemap.OnTopologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopology.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.net_topology_topology = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ntdmc.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nettopologydevicemap.DeviceTable,
			Columns: []string{nettopologydevicemap.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.device_in_topology = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ntdmc.mutation.EdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nettopologydevicemap.EdgeTable,
			Columns: nettopologydevicemap.EdgePrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nettopologydevicemap.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NetTopologyDeviceMapCreateBulk is the builder for creating many NetTopologyDeviceMap entities in bulk.
type NetTopologyDeviceMapCreateBulk struct {
	config
	builders []*NetTopologyDeviceMapCreate
}

// Save creates the NetTopologyDeviceMap entities in the database.
func (ntdmcb *NetTopologyDeviceMapCreateBulk) Save(ctx context.Context) ([]*NetTopologyDeviceMap, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ntdmcb.builders))
	nodes := make([]*NetTopologyDeviceMap, len(ntdmcb.builders))
	mutators := make([]Mutator, len(ntdmcb.builders))
	for i := range ntdmcb.builders {
		func(i int, root context.Context) {
			builder := ntdmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NetTopologyDeviceMapMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ntdmcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ntdmcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ntdmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ntdmcb *NetTopologyDeviceMapCreateBulk) SaveX(ctx context.Context) []*NetTopologyDeviceMap {
	v, err := ntdmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
