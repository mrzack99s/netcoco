// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/mrzack99s/netcoco/ent/deletedvlanlog"
	"github.com/mrzack99s/netcoco/ent/device"
)

// DeletedVlanLog is the model entity for the DeletedVlanLog schema.
type DeletedVlanLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VlanID holds the value of the "vlan_id" field.
	VlanID int `json:"vlan_id,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted bool `json:"deleted,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeletedVlanLogQuery when eager-loading is set.
	Edges                DeletedVlanLogEdges `json:"edges"`
	device_deleted_vlans *int
}

// DeletedVlanLogEdges holds the relations/edges for other nodes in the graph.
type DeletedVlanLogEdges struct {
	// OnDevice holds the value of the on_device edge.
	OnDevice *Device `json:"on_device,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OnDeviceOrErr returns the OnDevice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeletedVlanLogEdges) OnDeviceOrErr() (*Device, error) {
	if e.loadedTypes[0] {
		if e.OnDevice == nil {
			// The edge on_device was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: device.Label}
		}
		return e.OnDevice, nil
	}
	return nil, &NotLoadedError{edge: "on_device"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeletedVlanLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case deletedvlanlog.FieldDeleted:
			values[i] = new(sql.NullBool)
		case deletedvlanlog.FieldID, deletedvlanlog.FieldVlanID:
			values[i] = new(sql.NullInt64)
		case deletedvlanlog.ForeignKeys[0]: // device_deleted_vlans
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DeletedVlanLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeletedVlanLog fields.
func (dvl *DeletedVlanLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deletedvlanlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dvl.ID = int(value.Int64)
		case deletedvlanlog.FieldVlanID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vlan_id", values[i])
			} else if value.Valid {
				dvl.VlanID = int(value.Int64)
			}
		case deletedvlanlog.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				dvl.Deleted = value.Bool
			}
		case deletedvlanlog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field device_deleted_vlans", value)
			} else if value.Valid {
				dvl.device_deleted_vlans = new(int)
				*dvl.device_deleted_vlans = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOnDevice queries the "on_device" edge of the DeletedVlanLog entity.
func (dvl *DeletedVlanLog) QueryOnDevice() *DeviceQuery {
	return (&DeletedVlanLogClient{config: dvl.config}).QueryOnDevice(dvl)
}

// Update returns a builder for updating this DeletedVlanLog.
// Note that you need to call DeletedVlanLog.Unwrap() before calling this method if this DeletedVlanLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (dvl *DeletedVlanLog) Update() *DeletedVlanLogUpdateOne {
	return (&DeletedVlanLogClient{config: dvl.config}).UpdateOne(dvl)
}

// Unwrap unwraps the DeletedVlanLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dvl *DeletedVlanLog) Unwrap() *DeletedVlanLog {
	tx, ok := dvl.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeletedVlanLog is not a transactional entity")
	}
	dvl.config.driver = tx.drv
	return dvl
}

// String implements the fmt.Stringer.
func (dvl *DeletedVlanLog) String() string {
	var builder strings.Builder
	builder.WriteString("DeletedVlanLog(")
	builder.WriteString(fmt.Sprintf("id=%v", dvl.ID))
	builder.WriteString(", vlan_id=")
	builder.WriteString(fmt.Sprintf("%v", dvl.VlanID))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", dvl.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// DeletedVlanLogs is a parsable slice of DeletedVlanLog.
type DeletedVlanLogs []*DeletedVlanLog

func (dvl DeletedVlanLogs) config(cfg config) {
	for _i := range dvl {
		dvl[_i].config = cfg
	}
}
