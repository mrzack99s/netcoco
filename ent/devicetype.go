// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/mrzack99s/netcoco/ent/devicetype"
)

// DeviceType is the model entity for the DeviceType schema.
type DeviceType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DeviceTypeName holds the value of the "device_type_name" field.
	DeviceTypeName string `json:"device_type_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeviceTypeQuery when eager-loading is set.
	Edges DeviceTypeEdges `json:"edges"`
}

// DeviceTypeEdges holds the relations/edges for other nodes in the graph.
type DeviceTypeEdges struct {
	// Types holds the value of the types edge.
	Types []*Device `json:"types,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TypesOrErr returns the Types value or an error if the edge
// was not loaded in eager-loading.
func (e DeviceTypeEdges) TypesOrErr() ([]*Device, error) {
	if e.loadedTypes[0] {
		return e.Types, nil
	}
	return nil, &NotLoadedError{edge: "types"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeviceType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case devicetype.FieldID:
			values[i] = new(sql.NullInt64)
		case devicetype.FieldDeviceTypeName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DeviceType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeviceType fields.
func (dt *DeviceType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case devicetype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dt.ID = int(value.Int64)
		case devicetype.FieldDeviceTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_type_name", values[i])
			} else if value.Valid {
				dt.DeviceTypeName = value.String
			}
		}
	}
	return nil
}

// QueryTypes queries the "types" edge of the DeviceType entity.
func (dt *DeviceType) QueryTypes() *DeviceQuery {
	return (&DeviceTypeClient{config: dt.config}).QueryTypes(dt)
}

// Update returns a builder for updating this DeviceType.
// Note that you need to call DeviceType.Unwrap() before calling this method if this DeviceType
// was returned from a transaction, and the transaction was committed or rolled back.
func (dt *DeviceType) Update() *DeviceTypeUpdateOne {
	return (&DeviceTypeClient{config: dt.config}).UpdateOne(dt)
}

// Unwrap unwraps the DeviceType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dt *DeviceType) Unwrap() *DeviceType {
	tx, ok := dt.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeviceType is not a transactional entity")
	}
	dt.config.driver = tx.drv
	return dt
}

// String implements the fmt.Stringer.
func (dt *DeviceType) String() string {
	var builder strings.Builder
	builder.WriteString("DeviceType(")
	builder.WriteString(fmt.Sprintf("id=%v", dt.ID))
	builder.WriteString(", device_type_name=")
	builder.WriteString(dt.DeviceTypeName)
	builder.WriteByte(')')
	return builder.String()
}

// DeviceTypes is a parsable slice of DeviceType.
type DeviceTypes []*DeviceType

func (dt DeviceTypes) config(cfg config) {
	for _i := range dt {
		dt[_i].config = cfg
	}
}
