// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/device"
	"github.com/mrzack99s/netcoco/ent/devicetype"
)

// DeviceTypeCreate is the builder for creating a DeviceType entity.
type DeviceTypeCreate struct {
	config
	mutation *DeviceTypeMutation
	hooks    []Hook
}

// SetDeviceTypeName sets the "device_type_name" field.
func (dtc *DeviceTypeCreate) SetDeviceTypeName(s string) *DeviceTypeCreate {
	dtc.mutation.SetDeviceTypeName(s)
	return dtc
}

// AddTypeIDs adds the "types" edge to the Device entity by IDs.
func (dtc *DeviceTypeCreate) AddTypeIDs(ids ...int) *DeviceTypeCreate {
	dtc.mutation.AddTypeIDs(ids...)
	return dtc
}

// AddTypes adds the "types" edges to the Device entity.
func (dtc *DeviceTypeCreate) AddTypes(d ...*Device) *DeviceTypeCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtc.AddTypeIDs(ids...)
}

// Mutation returns the DeviceTypeMutation object of the builder.
func (dtc *DeviceTypeCreate) Mutation() *DeviceTypeMutation {
	return dtc.mutation
}

// Save creates the DeviceType in the database.
func (dtc *DeviceTypeCreate) Save(ctx context.Context) (*DeviceType, error) {
	var (
		err  error
		node *DeviceType
	)
	if len(dtc.hooks) == 0 {
		if err = dtc.check(); err != nil {
			return nil, err
		}
		node, err = dtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeviceTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dtc.check(); err != nil {
				return nil, err
			}
			dtc.mutation = mutation
			node, err = dtc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dtc.hooks) - 1; i >= 0; i-- {
			mut = dtc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dtc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dtc *DeviceTypeCreate) SaveX(ctx context.Context) *DeviceType {
	v, err := dtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (dtc *DeviceTypeCreate) check() error {
	if _, ok := dtc.mutation.DeviceTypeName(); !ok {
		return &ValidationError{Name: "device_type_name", err: errors.New("ent: missing required field \"device_type_name\"")}
	}
	if v, ok := dtc.mutation.DeviceTypeName(); ok {
		if err := devicetype.DeviceTypeNameValidator(v); err != nil {
			return &ValidationError{Name: "device_type_name", err: fmt.Errorf("ent: validator failed for field \"device_type_name\": %w", err)}
		}
	}
	return nil
}

func (dtc *DeviceTypeCreate) sqlSave(ctx context.Context) (*DeviceType, error) {
	_node, _spec := dtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dtc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dtc *DeviceTypeCreate) createSpec() (*DeviceType, *sqlgraph.CreateSpec) {
	var (
		_node = &DeviceType{config: dtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: devicetype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: devicetype.FieldID,
			},
		}
	)
	if value, ok := dtc.mutation.DeviceTypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: devicetype.FieldDeviceTypeName,
		})
		_node.DeviceTypeName = value
	}
	if nodes := dtc.mutation.TypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   devicetype.TypesTable,
			Columns: []string{devicetype.TypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeviceTypeCreateBulk is the builder for creating many DeviceType entities in bulk.
type DeviceTypeCreateBulk struct {
	config
	builders []*DeviceTypeCreate
}

// Save creates the DeviceType entities in the database.
func (dtcb *DeviceTypeCreateBulk) Save(ctx context.Context) ([]*DeviceType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dtcb.builders))
	nodes := make([]*DeviceType, len(dtcb.builders))
	mutators := make([]Mutator, len(dtcb.builders))
	for i := range dtcb.builders {
		func(i int, root context.Context) {
			builder := dtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dtcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dtcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dtcb *DeviceTypeCreateBulk) SaveX(ctx context.Context) []*DeviceType {
	v, err := dtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
