// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/netcoco/ent/netinterface"
	"github.com/mrzack99s/netcoco/ent/netinterfacelayer"
	"github.com/mrzack99s/netcoco/ent/portchannelinterface"
	"github.com/mrzack99s/netcoco/ent/predicate"
)

// NetInterfaceLayerUpdate is the builder for updating NetInterfaceLayer entities.
type NetInterfaceLayerUpdate struct {
	config
	hooks    []Hook
	mutation *NetInterfaceLayerMutation
}

// Where adds a new predicate for the NetInterfaceLayerUpdate builder.
func (nilu *NetInterfaceLayerUpdate) Where(ps ...predicate.NetInterfaceLayer) *NetInterfaceLayerUpdate {
	nilu.mutation.predicates = append(nilu.mutation.predicates, ps...)
	return nilu
}

// SetInterfaceLayer sets the "interface_layer" field.
func (nilu *NetInterfaceLayerUpdate) SetInterfaceLayer(i int) *NetInterfaceLayerUpdate {
	nilu.mutation.ResetInterfaceLayer()
	nilu.mutation.SetInterfaceLayer(i)
	return nilu
}

// AddInterfaceLayer adds i to the "interface_layer" field.
func (nilu *NetInterfaceLayerUpdate) AddInterfaceLayer(i int) *NetInterfaceLayerUpdate {
	nilu.mutation.AddInterfaceLayer(i)
	return nilu
}

// AddLayerIDs adds the "layers" edge to the NetInterface entity by IDs.
func (nilu *NetInterfaceLayerUpdate) AddLayerIDs(ids ...int) *NetInterfaceLayerUpdate {
	nilu.mutation.AddLayerIDs(ids...)
	return nilu
}

// AddLayers adds the "layers" edges to the NetInterface entity.
func (nilu *NetInterfaceLayerUpdate) AddLayers(n ...*NetInterface) *NetInterfaceLayerUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nilu.AddLayerIDs(ids...)
}

// AddPoLayerIDs adds the "po_layers" edge to the PortChannelInterface entity by IDs.
func (nilu *NetInterfaceLayerUpdate) AddPoLayerIDs(ids ...int) *NetInterfaceLayerUpdate {
	nilu.mutation.AddPoLayerIDs(ids...)
	return nilu
}

// AddPoLayers adds the "po_layers" edges to the PortChannelInterface entity.
func (nilu *NetInterfaceLayerUpdate) AddPoLayers(p ...*PortChannelInterface) *NetInterfaceLayerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nilu.AddPoLayerIDs(ids...)
}

// Mutation returns the NetInterfaceLayerMutation object of the builder.
func (nilu *NetInterfaceLayerUpdate) Mutation() *NetInterfaceLayerMutation {
	return nilu.mutation
}

// ClearLayers clears all "layers" edges to the NetInterface entity.
func (nilu *NetInterfaceLayerUpdate) ClearLayers() *NetInterfaceLayerUpdate {
	nilu.mutation.ClearLayers()
	return nilu
}

// RemoveLayerIDs removes the "layers" edge to NetInterface entities by IDs.
func (nilu *NetInterfaceLayerUpdate) RemoveLayerIDs(ids ...int) *NetInterfaceLayerUpdate {
	nilu.mutation.RemoveLayerIDs(ids...)
	return nilu
}

// RemoveLayers removes "layers" edges to NetInterface entities.
func (nilu *NetInterfaceLayerUpdate) RemoveLayers(n ...*NetInterface) *NetInterfaceLayerUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nilu.RemoveLayerIDs(ids...)
}

// ClearPoLayers clears all "po_layers" edges to the PortChannelInterface entity.
func (nilu *NetInterfaceLayerUpdate) ClearPoLayers() *NetInterfaceLayerUpdate {
	nilu.mutation.ClearPoLayers()
	return nilu
}

// RemovePoLayerIDs removes the "po_layers" edge to PortChannelInterface entities by IDs.
func (nilu *NetInterfaceLayerUpdate) RemovePoLayerIDs(ids ...int) *NetInterfaceLayerUpdate {
	nilu.mutation.RemovePoLayerIDs(ids...)
	return nilu
}

// RemovePoLayers removes "po_layers" edges to PortChannelInterface entities.
func (nilu *NetInterfaceLayerUpdate) RemovePoLayers(p ...*PortChannelInterface) *NetInterfaceLayerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nilu.RemovePoLayerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nilu *NetInterfaceLayerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nilu.hooks) == 0 {
		if err = nilu.check(); err != nil {
			return 0, err
		}
		affected, err = nilu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetInterfaceLayerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nilu.check(); err != nil {
				return 0, err
			}
			nilu.mutation = mutation
			affected, err = nilu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nilu.hooks) - 1; i >= 0; i-- {
			mut = nilu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nilu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nilu *NetInterfaceLayerUpdate) SaveX(ctx context.Context) int {
	affected, err := nilu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nilu *NetInterfaceLayerUpdate) Exec(ctx context.Context) error {
	_, err := nilu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nilu *NetInterfaceLayerUpdate) ExecX(ctx context.Context) {
	if err := nilu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nilu *NetInterfaceLayerUpdate) check() error {
	if v, ok := nilu.mutation.InterfaceLayer(); ok {
		if err := netinterfacelayer.InterfaceLayerValidator(v); err != nil {
			return &ValidationError{Name: "interface_layer", err: fmt.Errorf("ent: validator failed for field \"interface_layer\": %w", err)}
		}
	}
	return nil
}

func (nilu *NetInterfaceLayerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   netinterfacelayer.Table,
			Columns: netinterfacelayer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: netinterfacelayer.FieldID,
			},
		},
	}
	if ps := nilu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nilu.mutation.InterfaceLayer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: netinterfacelayer.FieldInterfaceLayer,
		})
	}
	if value, ok := nilu.mutation.AddedInterfaceLayer(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: netinterfacelayer.FieldInterfaceLayer,
		})
	}
	if nilu.mutation.LayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacelayer.LayersTable,
			Columns: []string{netinterfacelayer.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nilu.mutation.RemovedLayersIDs(); len(nodes) > 0 && !nilu.mutation.LayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacelayer.LayersTable,
			Columns: []string{netinterfacelayer.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nilu.mutation.LayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacelayer.LayersTable,
			Columns: []string{netinterfacelayer.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nilu.mutation.PoLayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacelayer.PoLayersTable,
			Columns: []string{netinterfacelayer.PoLayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portchannelinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nilu.mutation.RemovedPoLayersIDs(); len(nodes) > 0 && !nilu.mutation.PoLayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacelayer.PoLayersTable,
			Columns: []string{netinterfacelayer.PoLayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portchannelinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nilu.mutation.PoLayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacelayer.PoLayersTable,
			Columns: []string{netinterfacelayer.PoLayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portchannelinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nilu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{netinterfacelayer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// NetInterfaceLayerUpdateOne is the builder for updating a single NetInterfaceLayer entity.
type NetInterfaceLayerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NetInterfaceLayerMutation
}

// SetInterfaceLayer sets the "interface_layer" field.
func (niluo *NetInterfaceLayerUpdateOne) SetInterfaceLayer(i int) *NetInterfaceLayerUpdateOne {
	niluo.mutation.ResetInterfaceLayer()
	niluo.mutation.SetInterfaceLayer(i)
	return niluo
}

// AddInterfaceLayer adds i to the "interface_layer" field.
func (niluo *NetInterfaceLayerUpdateOne) AddInterfaceLayer(i int) *NetInterfaceLayerUpdateOne {
	niluo.mutation.AddInterfaceLayer(i)
	return niluo
}

// AddLayerIDs adds the "layers" edge to the NetInterface entity by IDs.
func (niluo *NetInterfaceLayerUpdateOne) AddLayerIDs(ids ...int) *NetInterfaceLayerUpdateOne {
	niluo.mutation.AddLayerIDs(ids...)
	return niluo
}

// AddLayers adds the "layers" edges to the NetInterface entity.
func (niluo *NetInterfaceLayerUpdateOne) AddLayers(n ...*NetInterface) *NetInterfaceLayerUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return niluo.AddLayerIDs(ids...)
}

// AddPoLayerIDs adds the "po_layers" edge to the PortChannelInterface entity by IDs.
func (niluo *NetInterfaceLayerUpdateOne) AddPoLayerIDs(ids ...int) *NetInterfaceLayerUpdateOne {
	niluo.mutation.AddPoLayerIDs(ids...)
	return niluo
}

// AddPoLayers adds the "po_layers" edges to the PortChannelInterface entity.
func (niluo *NetInterfaceLayerUpdateOne) AddPoLayers(p ...*PortChannelInterface) *NetInterfaceLayerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return niluo.AddPoLayerIDs(ids...)
}

// Mutation returns the NetInterfaceLayerMutation object of the builder.
func (niluo *NetInterfaceLayerUpdateOne) Mutation() *NetInterfaceLayerMutation {
	return niluo.mutation
}

// ClearLayers clears all "layers" edges to the NetInterface entity.
func (niluo *NetInterfaceLayerUpdateOne) ClearLayers() *NetInterfaceLayerUpdateOne {
	niluo.mutation.ClearLayers()
	return niluo
}

// RemoveLayerIDs removes the "layers" edge to NetInterface entities by IDs.
func (niluo *NetInterfaceLayerUpdateOne) RemoveLayerIDs(ids ...int) *NetInterfaceLayerUpdateOne {
	niluo.mutation.RemoveLayerIDs(ids...)
	return niluo
}

// RemoveLayers removes "layers" edges to NetInterface entities.
func (niluo *NetInterfaceLayerUpdateOne) RemoveLayers(n ...*NetInterface) *NetInterfaceLayerUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return niluo.RemoveLayerIDs(ids...)
}

// ClearPoLayers clears all "po_layers" edges to the PortChannelInterface entity.
func (niluo *NetInterfaceLayerUpdateOne) ClearPoLayers() *NetInterfaceLayerUpdateOne {
	niluo.mutation.ClearPoLayers()
	return niluo
}

// RemovePoLayerIDs removes the "po_layers" edge to PortChannelInterface entities by IDs.
func (niluo *NetInterfaceLayerUpdateOne) RemovePoLayerIDs(ids ...int) *NetInterfaceLayerUpdateOne {
	niluo.mutation.RemovePoLayerIDs(ids...)
	return niluo
}

// RemovePoLayers removes "po_layers" edges to PortChannelInterface entities.
func (niluo *NetInterfaceLayerUpdateOne) RemovePoLayers(p ...*PortChannelInterface) *NetInterfaceLayerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return niluo.RemovePoLayerIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (niluo *NetInterfaceLayerUpdateOne) Select(field string, fields ...string) *NetInterfaceLayerUpdateOne {
	niluo.fields = append([]string{field}, fields...)
	return niluo
}

// Save executes the query and returns the updated NetInterfaceLayer entity.
func (niluo *NetInterfaceLayerUpdateOne) Save(ctx context.Context) (*NetInterfaceLayer, error) {
	var (
		err  error
		node *NetInterfaceLayer
	)
	if len(niluo.hooks) == 0 {
		if err = niluo.check(); err != nil {
			return nil, err
		}
		node, err = niluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetInterfaceLayerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = niluo.check(); err != nil {
				return nil, err
			}
			niluo.mutation = mutation
			node, err = niluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(niluo.hooks) - 1; i >= 0; i-- {
			mut = niluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, niluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (niluo *NetInterfaceLayerUpdateOne) SaveX(ctx context.Context) *NetInterfaceLayer {
	node, err := niluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (niluo *NetInterfaceLayerUpdateOne) Exec(ctx context.Context) error {
	_, err := niluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (niluo *NetInterfaceLayerUpdateOne) ExecX(ctx context.Context) {
	if err := niluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (niluo *NetInterfaceLayerUpdateOne) check() error {
	if v, ok := niluo.mutation.InterfaceLayer(); ok {
		if err := netinterfacelayer.InterfaceLayerValidator(v); err != nil {
			return &ValidationError{Name: "interface_layer", err: fmt.Errorf("ent: validator failed for field \"interface_layer\": %w", err)}
		}
	}
	return nil
}

func (niluo *NetInterfaceLayerUpdateOne) sqlSave(ctx context.Context) (_node *NetInterfaceLayer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   netinterfacelayer.Table,
			Columns: netinterfacelayer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: netinterfacelayer.FieldID,
			},
		},
	}
	id, ok := niluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing NetInterfaceLayer.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := niluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, netinterfacelayer.FieldID)
		for _, f := range fields {
			if !netinterfacelayer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != netinterfacelayer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := niluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := niluo.mutation.InterfaceLayer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: netinterfacelayer.FieldInterfaceLayer,
		})
	}
	if value, ok := niluo.mutation.AddedInterfaceLayer(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: netinterfacelayer.FieldInterfaceLayer,
		})
	}
	if niluo.mutation.LayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacelayer.LayersTable,
			Columns: []string{netinterfacelayer.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := niluo.mutation.RemovedLayersIDs(); len(nodes) > 0 && !niluo.mutation.LayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacelayer.LayersTable,
			Columns: []string{netinterfacelayer.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := niluo.mutation.LayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacelayer.LayersTable,
			Columns: []string{netinterfacelayer.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: netinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if niluo.mutation.PoLayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacelayer.PoLayersTable,
			Columns: []string{netinterfacelayer.PoLayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portchannelinterface.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := niluo.mutation.RemovedPoLayersIDs(); len(nodes) > 0 && !niluo.mutation.PoLayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacelayer.PoLayersTable,
			Columns: []string{netinterfacelayer.PoLayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portchannelinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := niluo.mutation.PoLayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   netinterfacelayer.PoLayersTable,
			Columns: []string{netinterfacelayer.PoLayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portchannelinterface.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NetInterfaceLayer{config: niluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, niluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{netinterfacelayer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
